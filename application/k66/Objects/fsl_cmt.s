; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_cmt.o --depend=.\objects\fsl_cmt.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_cmt.crf ..\..\devices\MK66F18\drivers\fsl_cmt.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.CMT_Deinit||, CODE, READONLY, ALIGN=2

CMT_Deinit PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r0,#0
        STRB     r0,[r4,#5]
        MOVS     r0,#2
        LDRB     r1,[r4,#5]
        BICS     r1,r1,r0
        STRB     r1,[r4,#5]
        NOP      
        MOV      r0,r4
        BL       CMT_GetInstance
        LDR      r1,|L1.128|
        LDRSB    r5,[r1,r0]
        CMN      r5,#0x80
        BNE      |L1.36|
        B        |L1.94|
|L1.36|
        MOV      r0,r5
        CMP      r0,#0
        BLT      |L1.90|
        AND      r2,r0,#0x1f
        MOVS     r1,#1
        LSLS     r1,r1,r2
        LDR      r2,|L1.132|
        LSRS     r3,r0,#5
        STR      r1,[r2,r3,LSL #2]
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        ISB      
        NOP      
        NOP      
        NOP      
|L1.90|
        NOP      
        NOP      
|L1.94|
        MOV      r0,r4
        BL       CMT_GetInstance
        LDR      r1,|L1.136|
        LDR      r5,[r1,r0,LSL #2]
        LDR      r1,|L1.140|
        ADD      r0,r1,r5,LSR #16
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,r5
        BICS     r1,r1,r2
        STR      r1,[r0,#0]
        NOP      
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L1.128|
        DCD      s_cmtIrqs
|L1.132|
        DCD      0xe000e180
|L1.136|
        DCD      s_cmtClock
|L1.140|
        DCD      0x40047000

        AREA ||i.CMT_GetCMTFrequency||, CODE, READONLY, ALIGN=1

CMT_GetCMTFrequency PROC
        PUSH     {r4,lr}
        MOV      r2,r0
        LDRB     r4,[r2,#0xa]
        AND      r4,r4,#0xf
        ADDS     r4,r4,#1
        UDIV     r0,r1,r4
        LDRB     r4,[r2,#5]
        UBFX     r3,r4,#5,#2
        SUBS     r4,r3,#0
        BEQ      |L2.40|
        CMP      r4,#1
        BEQ      |L2.44|
        CMP      r4,#2
        BEQ      |L2.48|
        CMP      r4,#3
        BNE      |L2.56|
        B        |L2.52|
|L2.40|
        NOP      
        B        |L2.60|
|L2.44|
        LSRS     r0,r0,#1
        B        |L2.60|
|L2.48|
        LSRS     r0,r0,#2
        B        |L2.60|
|L2.52|
        LSRS     r0,r0,#3
        B        |L2.60|
|L2.56|
        NOP      
        NOP      
|L2.60|
        NOP      
        POP      {r4,pc}
        ENDP


        AREA ||i.CMT_GetDefaultConfig||, CODE, READONLY, ALIGN=2

CMT_GetDefaultConfig PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L3.8|
        B        |L3.18|
|L3.8|
        MOVS     r2,#0x5b
        ADR      r1,|L3.36|
        ADR      r0,|L3.76|
        BL       __aeabi_assert
|L3.18|
        MOVS     r0,#0
        STR      r0,[r4,#0]
        STRB     r0,[r4,#0]
        MOVS     r0,#1
        STRB     r0,[r4,#1]
        STRB     r0,[r4,#2]
        MOVS     r0,#0
        STRB     r0,[r4,#3]
        POP      {r4,pc}
        ENDP

|L3.36|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_cmt.c",0
|L3.76|
        DCB      "NULL != config",0
        DCB      0

        AREA ||i.CMT_GetInstance||, CODE, READONLY, ALIGN=2

CMT_GetInstance PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r4,#0
        B        |L4.22|
|L4.8|
        LDR      r0,|L4.48|
        LDR      r0,[r0,r4,LSL #2]
        CMP      r0,r5
        BNE      |L4.20|
        B        |L4.26|
|L4.20|
        ADDS     r4,r4,#1
|L4.22|
        CMP      r4,#0
        BEQ      |L4.8|
|L4.26|
        NOP      
        CBNZ     r4,|L4.32|
        B        |L4.42|
|L4.32|
        MOVS     r2,#0x4c
        ADR      r1,|L4.52|
        ADR      r0,|L4.92|
        BL       __aeabi_assert
|L4.42|
        MOV      r0,r4
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L4.48|
        DCD      s_cmtBases
|L4.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_cmt.c",0
|L4.92|
        DCB      "instance < ARRAY_SIZE(s_cmtBases)",0
        DCB      0
        DCB      0

        AREA ||i.CMT_GetMode||, CODE, READONLY, ALIGN=1

CMT_GetMode PROC
        MOV      r2,r0
        LDRB     r1,[r2,#5]
        AND      r0,r1,#1
        CBNZ     r0,|L5.14|
        MOVS     r0,#0
|L5.12|
        BX       lr
|L5.14|
        AND      r0,r1,#8
        CBZ      r0,|L5.24|
        MOVS     r0,#9
        B        |L5.12|
|L5.24|
        AND      r0,r1,#4
        CBZ      r0,|L5.34|
        MOVS     r0,#5
        B        |L5.12|
|L5.34|
        MOVS     r0,#1
        B        |L5.12|
        ENDP


        AREA ||i.CMT_Init||, CODE, READONLY, ALIGN=2

CMT_Init PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r7,r2
        CBZ      r5,|L6.14|
        B        |L6.24|
|L6.14|
        MOVS     r2,#0x73
        ADR      r1,|L6.200|
        ADR      r0,|L6.240|
        BL       __aeabi_assert
|L6.24|
        LDR      r0,|L6.256|
        CMP      r7,r0
        BCC      |L6.32|
        B        |L6.42|
|L6.32|
        MOVS     r2,#0x74
        ADR      r1,|L6.200|
        ADR      r0,|L6.260|
        BL       __aeabi_assert
|L6.42|
        MOV      r0,r4
        BL       CMT_GetInstance
        LDR      r1,|L6.308|
        LDR      r6,[r1,r0,LSL #2]
        LDR      r1,|L6.312|
        ADD      r0,r1,r6,LSR #16
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,r6
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        NOP      
        LDR      r0,|L6.256|
        UDIV     r0,r7,r0
        SUBS     r0,r0,#1
        AND      r0,r0,#0xf
        STRB     r0,[r4,#0xa]
        LDRB     r8,[r4,#5]
        BIC      r8,r8,#0x60
        LDRB     r0,[r5,#3]
        MOVS     r1,#0x60
        AND      r0,r1,r0,LSL #5
        ORR      r8,r0,r8
        STRB     r8,[r4,#5]
        LDRB     r0,[r5,#2]
        MOVS     r1,#0x40
        AND      r0,r1,r0,LSL #6
        LDRB     r1,[r5,#1]
        MOVS     r2,#0x20
        AND      r1,r2,r1,LSL #5
        ORRS     r0,r0,r1
        STRB     r0,[r4,#4]
        LDRB     r0,[r5,#0]
        CMP      r0,#1
        BNE      |L6.196|
        MOVS     r0,#2
        LDRB     r1,[r4,#5]
        ORRS     r1,r1,r0
        STRB     r1,[r4,#5]
        NOP      
        MOV      r0,r4
        BL       CMT_GetInstance
        LDR      r1,|L6.316|
        LDRSB    r6,[r1,r0]
        CMN      r6,#0x80
        BNE      |L6.164|
        B        |L6.194|
|L6.164|
        MOV      r0,r6
        CMP      r0,#0
        BLT      |L6.190|
        AND      r2,r0,#0x1f
        MOVS     r1,#1
        LSLS     r1,r1,r2
        LSRS     r2,r0,#5
        LSLS     r2,r2,#2
        ADD      r2,r2,#0xe000e000
        STR      r1,[r2,#0x100]
|L6.190|
        NOP      
        NOP      
|L6.194|
        NOP      
|L6.196|
        POP      {r4-r8,pc}
        ENDP

|L6.200|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_cmt.c",0
|L6.240|
        DCB      "NULL != config",0
        DCB      0
|L6.256|
        DCD      0x007a1200
|L6.260|
        DCB      "busClock_Hz >= CMT_INTERMEDIATEFREQUENCY_8MHZ",0
        DCB      0
        DCB      0
|L6.308|
        DCD      s_cmtClock
|L6.312|
        DCD      0x40047000
|L6.316|
        DCD      s_cmtIrqs

        AREA ||i.CMT_SetCarrirGenerateCountOne||, CODE, READONLY, ALIGN=2

CMT_SetCarrirGenerateCountOne PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CMP      r4,#0xff
        BHI      |L7.14|
        B        |L7.24|
|L7.14|
        MOVS     r2,#0xe4
        ADR      r1,|L7.76|
        ADR      r0,|L7.116|
        BL       __aeabi_assert
|L7.24|
        CBZ      r4,|L7.28|
        B        |L7.38|
|L7.28|
        MOVS     r2,#0xe5
        ADR      r1,|L7.76|
        ADR      r0,|L7.148|
        BL       __aeabi_assert
|L7.38|
        CMP      r5,#0xff
        BHI      |L7.44|
        B        |L7.54|
|L7.44|
        MOVS     r2,#0xe6
        ADR      r1,|L7.76|
        ADR      r0,|L7.164|
        BL       __aeabi_assert
|L7.54|
        CBZ      r5,|L7.58|
        B        |L7.68|
|L7.58|
        MOVS     r2,#0xe7
        ADR      r1,|L7.76|
        ADR      r0,|L7.196|
        BL       __aeabi_assert
|L7.68|
        STRB     r4,[r6,#0]
        STRB     r5,[r6,#1]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L7.76|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_cmt.h",0
|L7.116|
        DCB      "highCount <= CMT_CGH1_PH_MASK",0
        DCB      0
        DCB      0
|L7.148|
        DCB      "0U != highCount",0
|L7.164|
        DCB      "lowCount <= CMT_CGL1_PL_MASK",0
        DCB      0
        DCB      0
        DCB      0
|L7.196|
        DCB      "0U != lowCount",0
        DCB      0

        AREA ||i.CMT_SetCarrirGenerateCountTwo||, CODE, READONLY, ALIGN=2

CMT_SetCarrirGenerateCountTwo PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CMP      r4,#0xff
        BHI      |L8.14|
        B        |L8.24|
|L8.14|
        MOVS     r2,#0xfe
        ADR      r1,|L8.80|
        ADR      r0,|L8.120|
        BL       __aeabi_assert
|L8.24|
        CBZ      r4,|L8.28|
        B        |L8.38|
|L8.28|
        MOVS     r2,#0xff
        ADR      r1,|L8.80|
        ADR      r0,|L8.152|
        BL       __aeabi_assert
|L8.38|
        CMP      r5,#0xff
        BHI      |L8.44|
        B        |L8.56|
|L8.44|
        MOV      r2,#0x100
        ADR      r1,|L8.80|
        ADR      r0,|L8.168|
        BL       __aeabi_assert
|L8.56|
        CBZ      r5,|L8.60|
        B        |L8.72|
|L8.60|
        MOV      r2,#0x101
        ADR      r1,|L8.80|
        ADR      r0,|L8.200|
        BL       __aeabi_assert
|L8.72|
        STRB     r4,[r6,#2]
        STRB     r5,[r6,#3]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L8.80|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_cmt.h",0
|L8.120|
        DCB      "highCount <= CMT_CGH2_SH_MASK",0
        DCB      0
        DCB      0
|L8.152|
        DCB      "0U != highCount",0
|L8.168|
        DCB      "lowCount <= CMT_CGL2_SL_MASK",0
        DCB      0
        DCB      0
        DCB      0
|L8.200|
        DCB      "0U != lowCount",0
        DCB      0

        AREA ||i.CMT_SetIroState||, CODE, READONLY, ALIGN=1

CMT_SetIroState PROC
        MOV      r2,r1
        LDRB     r1,[r0,#4]
        BIC      r1,r1,#0x80
        MOVS     r3,#0x80
        AND      r3,r3,r2,LSL #7
        ORRS     r1,r1,r3
        STRB     r1,[r0,#4]
        BX       lr
        ENDP


        AREA ||i.CMT_SetMode||, CODE, READONLY, ALIGN=2

CMT_SetMode PROC
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        MOV      r5,r1
        MOV      r4,r2
        LDRB     r6,[r7,#5]
        CMP      r5,#0
        BEQ      |L10.72|
        CBZ      r4,|L10.20|
        B        |L10.30|
|L10.20|
        MOVS     r2,#0xb5
        ADR      r1,|L10.84|
        ADR      r0,|L10.124|
        BL       __aeabi_assert
|L10.30|
        LDRB     r2,[r4,#1]
        LDRB     r1,[r4,#0]
        MOV      r0,r7
        BL       CMT_SetCarrirGenerateCountOne
        CMP      r5,#5
        BNE      |L10.54|
        LDRB     r2,[r4,#3]
        LDRB     r1,[r4,#2]
        MOV      r0,r7
        BL       CMT_SetCarrirGenerateCountTwo
|L10.54|
        LDRH     r2,[r4,#6]
        LDRH     r1,[r4,#4]
        MOV      r0,r7
        BL       CMT_SetModulateMarkSpace
        BIC      r6,r6,#0xc
        ORRS     r6,r6,r5
        B        |L10.76|
|L10.72|
        BIC      r6,r6,#1
|L10.76|
        STRB     r6,[r7,#5]
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L10.84|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_cmt.c",0
|L10.124|
        DCB      "NULL != modulateConfig",0
        DCB      0

        AREA ||i.CMT_SetModulateMarkSpace||, CODE, READONLY, ALIGN=1

CMT_SetModulateMarkSpace PROC
        LSRS     r3,r1,#8
        STRB     r3,[r0,#6]
        STRB     r1,[r0,#7]
        LSRS     r3,r2,#8
        STRB     r3,[r0,#8]
        STRB     r2,[r0,#9]
        BX       lr
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

s_cmtClock
        DCD      0x10340002
s_cmtBases
        DCD      0x40062000
s_cmtIrqs
        DCB      0x2d

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_cmt.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_cmt_c_a17b6872____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_fsl_cmt_c_a17b6872____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_cmt_c_a17b6872____REVSH|
#line 483
|__asm___9_fsl_cmt_c_a17b6872____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_cmt_c_a17b6872____RRX|
#line 670
|__asm___9_fsl_cmt_c_a17b6872____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT CMT_Deinit [CODE]
        EXPORT CMT_GetCMTFrequency [CODE]
        EXPORT CMT_GetDefaultConfig [CODE]
        EXPORT CMT_GetMode [CODE]
        EXPORT CMT_Init [CODE]
        EXPORT CMT_SetIroState [CODE]
        EXPORT CMT_SetMode [CODE]
        EXPORT CMT_SetModulateMarkSpace [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_assert [CODE]

        KEEP CMT_GetInstance
        KEEP CMT_SetCarrirGenerateCountOne
        KEEP CMT_SetCarrirGenerateCountTwo
        KEEP s_cmtClock
        KEEP s_cmtBases
        KEEP s_cmtIrqs

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
