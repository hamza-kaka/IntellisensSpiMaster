; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_uart_edma.o --depend=.\objects\fsl_uart_edma.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_uart_edma.crf ..\..\devices\MK66F18\drivers\fsl_uart_edma.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.UART_EnableRxDMA||, CODE, READONLY, ALIGN=1

UART_EnableRxDMA PROC
        CBZ      r1,|L1.20|
        LDRB     r2,[r0,#0xb]
        ORR      r2,r2,#0x20
        STRB     r2,[r0,#0xb]
        LDRB     r2,[r0,#3]
        ORR      r2,r2,#0x20
        STRB     r2,[r0,#3]
        B        |L1.36|
|L1.20|
        LDRB     r2,[r0,#0xb]
        BIC      r2,r2,#0x20
        STRB     r2,[r0,#0xb]
        LDRB     r2,[r0,#3]
        BIC      r2,r2,#0x20
        STRB     r2,[r0,#3]
|L1.36|
        BX       lr
        ENDP


        AREA ||i.UART_EnableTxDMA||, CODE, READONLY, ALIGN=1

UART_EnableTxDMA PROC
        CBZ      r1,|L2.20|
        LDRB     r2,[r0,#0xb]
        ORR      r2,r2,#0x80
        STRB     r2,[r0,#0xb]
        LDRB     r2,[r0,#3]
        ORR      r2,r2,#0x80
        STRB     r2,[r0,#3]
        B        |L2.36|
|L2.20|
        LDRB     r2,[r0,#0xb]
        BIC      r2,r2,#0x80
        STRB     r2,[r0,#0xb]
        LDRB     r2,[r0,#3]
        BIC      r2,r2,#0x80
        STRB     r2,[r0,#3]
|L2.36|
        BX       lr
        ENDP


        AREA ||i.UART_ReceiveEDMA||, CODE, READONLY, ALIGN=2

UART_ReceiveEDMA PROC
        PUSH     {r4-r8,lr}
        SUB      sp,sp,#0x28
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CBZ      r4,|L3.16|
        B        |L3.28|
|L3.16|
        MOV      r2,#0x114
        ADR      r1,|L3.184|
        ADR      r0,|L3.232|
        BL       __aeabi_assert
|L3.28|
        LDR      r0,[r4,#0x14]
        CBZ      r0,|L3.34|
        B        |L3.46|
|L3.34|
        MOV      r2,#0x115
        ADR      r1,|L3.184|
        ADR      r0,|L3.240|
        BL       __aeabi_assert
|L3.46|
        CBZ      r5,|L3.50|
        B        |L3.62|
|L3.50|
        MOV      r2,#0x116
        ADR      r1,|L3.184|
        ADR      r0,|L3.264|
        BL       __aeabi_assert
|L3.62|
        LDR      r0,[r5,#0]
        CBZ      r0,|L3.68|
        B        |L3.80|
|L3.68|
        MOV      r2,#0x117
        ADR      r1,|L3.184|
        ADR      r0,|L3.272|
        BL       __aeabi_assert
|L3.80|
        LDR      r0,[r5,#4]
        CBZ      r0,|L3.86|
        B        |L3.98|
|L3.86|
        MOV      r2,#0x118
        ADR      r1,|L3.184|
        ADR      r0,|L3.284|
        BL       __aeabi_assert
|L3.98|
        LDRB     r0,[r4,#0x1a]
        CMP      r0,#3
        BNE      |L3.110|
        MOV      r7,#0x3e9
        B        |L3.176|
|L3.110|
        MOVS     r0,#3
        STRB     r0,[r4,#0x1a]
        LDR      r0,[r5,#4]
        STR      r0,[r4,#8]
        NOP      
        ADDS     r0,r6,#7
        MOV      r8,r0
        MOVS     r1,#1
        LDR      r0,[r5,#4]
        STR      r1,[sp,#0]
        STRD     r1,r0,[sp,#4]
        STR      r1,[sp,#0xc]
        MOV      r2,r1
        MOV      r1,r8
        ADD      r0,sp,#0x10
        LDR      r3,[r5,#0]
        BL       EDMA_PrepareTransfer
        MOVS     r0,#1
        STRB     r0,[r4,#0x18]
        ADD      r1,sp,#0x10
        LDR      r0,[r4,#0x14]
        BL       EDMA_SubmitTransfer
        LDR      r0,[r4,#0x14]
        BL       EDMA_StartTransfer
        MOVS     r1,#1
        MOV      r0,r6
        BL       UART_EnableRxDMA
        MOVS     r7,#0
|L3.176|
        MOV      r0,r7
        ADD      sp,sp,#0x28
        POP      {r4-r8,pc}
        ENDP

|L3.184|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart_edma.c",0
        DCB      0
        DCB      0
|L3.232|
        DCB      "handle",0
        DCB      0
|L3.240|
        DCB      "handle->rxEdmaHandle",0
        DCB      0
        DCB      0
        DCB      0
|L3.264|
        DCB      "xfer",0
        DCB      0
        DCB      0
        DCB      0
|L3.272|
        DCB      "xfer->data",0
        DCB      0
|L3.284|
        DCB      "xfer->dataSize",0
        DCB      0

        AREA ||i.UART_ReceiveEDMACallback||, CODE, READONLY, ALIGN=2

UART_ReceiveEDMACallback PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r7,r2
        MOV      r8,r3
        CBZ      r5,|L4.16|
        B        |L4.26|
|L4.16|
        MOVS     r2,#0x7c
        ADR      r1,|L4.72|
        ADR      r0,|L4.120|
        BL       __aeabi_assert
|L4.26|
        MOV      r4,r5
        NOP      
        NOP      
        CBZ      r7,|L4.66|
        LDRD     r0,r1,[r4,#0]
        BL       UART_TransferAbortReceiveEDMA
        LDR      r0,[r4,#4]
        LDR      r0,[r0,#0]
        CBZ      r0,|L4.66|
        LDR      r2,[r4,#4]
        MOV      r1,r2
        LDR      r3,[r2,#4]
        LDR      r0,[r4,#0]
        LDR      r12,[r2,#0]
        MOV      r2,#0x3eb
        BLX      r12
|L4.66|
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L4.72|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart_edma.c",0
        DCB      0
        DCB      0
|L4.120|
        DCB      "param",0
        DCB      0
        DCB      0

        AREA ||i.UART_SendEDMA||, CODE, READONLY, ALIGN=2

UART_SendEDMA PROC
        PUSH     {r4-r8,lr}
        SUB      sp,sp,#0x28
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CBZ      r4,|L5.16|
        B        |L5.26|
|L5.16|
        MOVS     r2,#0xde
        ADR      r1,|L5.176|
        ADR      r0,|L5.224|
        BL       __aeabi_assert
|L5.26|
        LDR      r0,[r4,#0x10]
        CBZ      r0,|L5.32|
        B        |L5.42|
|L5.32|
        MOVS     r2,#0xdf
        ADR      r1,|L5.176|
        ADR      r0,|L5.232|
        BL       __aeabi_assert
|L5.42|
        CBZ      r5,|L5.46|
        B        |L5.56|
|L5.46|
        MOVS     r2,#0xe0
        ADR      r1,|L5.176|
        ADR      r0,|L5.256|
        BL       __aeabi_assert
|L5.56|
        LDR      r0,[r5,#0]
        CBZ      r0,|L5.62|
        B        |L5.72|
|L5.62|
        MOVS     r2,#0xe1
        ADR      r1,|L5.176|
        ADR      r0,|L5.264|
        BL       __aeabi_assert
|L5.72|
        LDR      r0,[r5,#4]
        CBZ      r0,|L5.78|
        B        |L5.88|
|L5.78|
        MOVS     r2,#0xe2
        ADR      r1,|L5.176|
        ADR      r0,|L5.276|
        BL       __aeabi_assert
|L5.88|
        LDRB     r0,[r4,#0x19]
        CMP      r0,#1
        BNE      |L5.100|
        MOV      r7,#0x3e8
        B        |L5.166|
|L5.100|
        MOVS     r0,#1
        STRB     r0,[r4,#0x19]
        LDR      r0,[r5,#4]
        STR      r0,[r4,#0xc]
        NOP      
        ADDS     r0,r6,#7
        MOV      r8,r0
        MOVS     r1,#2
        MOVS     r2,#1
        LDR      r0,[r5,#4]
        STR      r2,[sp,#0]
        STRD     r2,r0,[sp,#4]
        STR      r1,[sp,#0xc]
        MOV      r3,r8
        ADD      r0,sp,#0x10
        LDR      r1,[r5,#0]
        BL       EDMA_PrepareTransfer
        MOVS     r0,#1
        STRB     r0,[r4,#0x18]
        ADD      r1,sp,#0x10
        LDR      r0,[r4,#0x10]
        BL       EDMA_SubmitTransfer
        LDR      r0,[r4,#0x10]
        BL       EDMA_StartTransfer
        MOVS     r1,#1
        MOV      r0,r6
        BL       UART_EnableTxDMA
        MOVS     r7,#0
|L5.166|
        MOV      r0,r7
        ADD      sp,sp,#0x28
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L5.176|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart_edma.c",0
        DCB      0
        DCB      0
|L5.224|
        DCB      "handle",0
        DCB      0
|L5.232|
        DCB      "handle->txEdmaHandle",0
        DCB      0
        DCB      0
        DCB      0
|L5.256|
        DCB      "xfer",0
        DCB      0
        DCB      0
        DCB      0
|L5.264|
        DCB      "xfer->data",0
        DCB      0
|L5.276|
        DCB      "xfer->dataSize",0
        DCB      0

        AREA ||i.UART_SendEDMACallback||, CODE, READONLY, ALIGN=2

UART_SendEDMACallback PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r7,r2
        MOV      r8,r3
        CBZ      r5,|L6.16|
        B        |L6.26|
|L6.16|
        MOVS     r2,#0x66
        ADR      r1,|L6.72|
        ADR      r0,|L6.120|
        BL       __aeabi_assert
|L6.26|
        MOV      r4,r5
        NOP      
        NOP      
        CBZ      r7,|L6.66|
        LDRD     r0,r1,[r4,#0]
        BL       UART_TransferAbortSendEDMA
        LDR      r0,[r4,#4]
        LDR      r0,[r0,#0]
        CBZ      r0,|L6.66|
        LDR      r2,[r4,#4]
        MOV      r1,r2
        LDR      r3,[r2,#4]
        LDR      r0,[r4,#0]
        LDR      r12,[r2,#0]
        MOV      r2,#0x3ea
        BLX      r12
|L6.66|
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L6.72|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart_edma.c",0
        DCB      0
        DCB      0
|L6.120|
        DCB      "param",0
        DCB      0
        DCB      0

        AREA ||i.UART_TransferAbortReceiveEDMA||, CODE, READONLY, ALIGN=2

UART_TransferAbortReceiveEDMA PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L7.10|
        B        |L7.22|
|L7.10|
        MOV      r2,#0x15b
        ADR      r1,|L7.60|
        ADR      r0,|L7.108|
        BL       __aeabi_assert
|L7.22|
        LDR      r0,[r4,#0x14]
        CBZ      r0,|L7.28|
        B        |L7.40|
|L7.28|
        MOV      r2,#0x15c
        ADR      r1,|L7.60|
        ADR      r0,|L7.116|
        BL       __aeabi_assert
|L7.40|
        MOVS     r1,#0
        MOV      r0,r5
        BL       UART_EnableRxDMA
        LDR      r0,[r4,#0x14]
        BL       EDMA_AbortTransfer
        MOVS     r0,#2
        STRB     r0,[r4,#0x1a]
        POP      {r4-r6,pc}
        ENDP

|L7.60|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart_edma.c",0
        DCB      0
        DCB      0
|L7.108|
        DCB      "handle",0
        DCB      0
|L7.116|
        DCB      "handle->rxEdmaHandle",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.UART_TransferAbortSendEDMA||, CODE, READONLY, ALIGN=2

UART_TransferAbortSendEDMA PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L8.10|
        B        |L8.22|
|L8.10|
        MOV      r2,#0x145
        ADR      r1,|L8.60|
        ADR      r0,|L8.108|
        BL       __aeabi_assert
|L8.22|
        LDR      r0,[r4,#0x10]
        CBZ      r0,|L8.28|
        B        |L8.40|
|L8.28|
        MOV      r2,#0x146
        ADR      r1,|L8.60|
        ADR      r0,|L8.116|
        BL       __aeabi_assert
|L8.40|
        MOVS     r1,#0
        MOV      r0,r5
        BL       UART_EnableTxDMA
        LDR      r0,[r4,#0x10]
        BL       EDMA_AbortTransfer
        MOVS     r0,#0
        STRB     r0,[r4,#0x19]
        POP      {r4-r6,pc}
        ENDP

|L8.60|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart_edma.c",0
        DCB      0
        DCB      0
|L8.108|
        DCB      "handle",0
        DCB      0
|L8.116|
        DCB      "handle->txEdmaHandle",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.UART_TransferCreateHandleEDMA||, CODE, READONLY, ALIGN=2

UART_TransferCreateHandleEDMA PROC
        PUSH     {r4-r10,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r8,r2
        MOV      r9,r3
        LDRD     r10,r7,[sp,#0x20]
        CBZ      r4,|L9.20|
        B        |L9.30|
|L9.20|
        MOVS     r2,#0xa1
        ADR      r1,|L9.128|
        ADR      r0,|L9.176|
        BL       __aeabi_assert
|L9.30|
        MOV      r0,r6
        BL       UART_GetInstance
        MOV      r5,r0
        LDR      r0,|L9.184|
        STR      r6,[r0,r5,LSL #3]
        ADD      r0,r0,r5,LSL #3
        STR      r4,[r0,#4]
        MOVS     r1,#0x1c
        MOV      r0,r4
        BL       __aeabi_memclr4
        MOVS     r0,#2
        STRB     r0,[r4,#0x1a]
        MOVS     r0,#0
        STRB     r0,[r4,#0x19]
        STR      r7,[r4,#0x14]
        STR      r10,[r4,#0x10]
        STR      r8,[r4,#0]
        STR      r9,[r4,#4]
        CBZ      r7,|L9.86|
        MOVS     r0,#1
        STRB     r0,[r6,#0x15]
|L9.86|
        CMP      r10,#0
        BEQ      |L9.106|
        LDR      r1,|L9.184|
        ADD      r2,r1,r5,LSL #3
        LDR      r1,|L9.188|
        LDR      r0,[r4,#0x10]
        BL       EDMA_SetCallback
|L9.106|
        CBZ      r7,|L9.122|
        LDR      r1,|L9.184|
        ADD      r2,r1,r5,LSL #3
        LDR      r1,|L9.192|
        LDR      r0,[r4,#0x14]
        BL       EDMA_SetCallback
|L9.122|
        POP      {r4-r10,pc}
        ENDP

        DCW      0x0000
|L9.128|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart_edma.c",0
        DCB      0
        DCB      0
|L9.176|
        DCB      "handle",0
        DCB      0
|L9.184|
        DCD      s_edmaPrivateHandle
|L9.188|
        DCD      UART_SendEDMACallback
|L9.192|
        DCD      UART_ReceiveEDMACallback

        AREA ||i.UART_TransferGetReceiveCountEDMA||, CODE, READONLY, ALIGN=2

UART_TransferGetReceiveCountEDMA PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CBZ      r4,|L10.12|
        B        |L10.24|
|L10.12|
        MOV      r2,#0x175
        ADR      r1,|L10.92|
        ADR      r0,|L10.140|
        BL       __aeabi_assert
|L10.24|
        LDR      r0,[r4,#0x14]
        CBZ      r0,|L10.30|
        B        |L10.42|
|L10.30|
        MOV      r2,#0x176
        ADR      r1,|L10.92|
        ADR      r0,|L10.148|
        BL       __aeabi_assert
|L10.42|
        CBZ      r5,|L10.46|
        B        |L10.58|
|L10.46|
        MOV      r2,#0x177
        ADR      r1,|L10.92|
        ADR      r0,|L10.172|
        BL       __aeabi_assert
|L10.58|
        LDRB     r0,[r4,#0x1a]
        CMP      r0,#2
        BNE      |L10.68|
        MOVS     r0,#6
|L10.66|
        POP      {r4-r6,pc}
|L10.68|
        LDR      r2,[r4,#0x14]
        LDRB     r1,[r2,#0x10]
        LDR      r0,[r2,#8]
        BL       EDMA_GetRemainingMajorLoopCount
        LDRB     r2,[r4,#0x18]
        LDR      r1,[r4,#8]
        MLS      r0,r2,r0,r1
        STR      r0,[r5,#0]
        MOVS     r0,#0
        B        |L10.66|
        ENDP

|L10.92|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart_edma.c",0
        DCB      0
        DCB      0
|L10.140|
        DCB      "handle",0
        DCB      0
|L10.148|
        DCB      "handle->rxEdmaHandle",0
        DCB      0
        DCB      0
        DCB      0
|L10.172|
        DCB      "count",0
        DCB      0
        DCB      0

        AREA ||i.UART_TransferGetSendCountEDMA||, CODE, READONLY, ALIGN=2

UART_TransferGetSendCountEDMA PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CBZ      r4,|L11.12|
        B        |L11.24|
|L11.12|
        MOV      r2,#0x194
        ADR      r1,|L11.92|
        ADR      r0,|L11.140|
        BL       __aeabi_assert
|L11.24|
        LDR      r0,[r4,#0x10]
        CBZ      r0,|L11.30|
        B        |L11.42|
|L11.30|
        MOV      r2,#0x195
        ADR      r1,|L11.92|
        ADR      r0,|L11.148|
        BL       __aeabi_assert
|L11.42|
        CBZ      r5,|L11.46|
        B        |L11.58|
|L11.46|
        MOV      r2,#0x196
        ADR      r1,|L11.92|
        ADR      r0,|L11.172|
        BL       __aeabi_assert
|L11.58|
        LDRB     r0,[r4,#0x19]
        CBNZ     r0,|L11.66|
        MOVS     r0,#6
|L11.64|
        POP      {r4-r6,pc}
|L11.66|
        LDR      r2,[r4,#0x10]
        LDRB     r1,[r2,#0x10]
        LDR      r0,[r2,#8]
        BL       EDMA_GetRemainingMajorLoopCount
        LDRB     r2,[r4,#0x18]
        LDR      r1,[r4,#0xc]
        MLS      r0,r2,r0,r1
        STR      r0,[r5,#0]
        MOVS     r0,#0
        B        |L11.64|
        ENDP

        DCW      0x0000
|L11.92|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart_edma.c",0
        DCB      0
        DCB      0
|L11.140|
        DCB      "handle",0
        DCB      0
|L11.148|
        DCB      "handle->txEdmaHandle",0
        DCB      0
        DCB      0
        DCB      0
|L11.172|
        DCB      "count",0
        DCB      0
        DCB      0

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

s_edmaPrivateHandle
        %        40

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_uart_edma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_fsl_uart_edma_c_653f1b1c____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___15_fsl_uart_edma_c_653f1b1c____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_fsl_uart_edma_c_653f1b1c____REVSH|
#line 483
|__asm___15_fsl_uart_edma_c_653f1b1c____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_fsl_uart_edma_c_653f1b1c____RRX|
#line 670
|__asm___15_fsl_uart_edma_c_653f1b1c____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT UART_ReceiveEDMA [CODE]
        EXPORT UART_SendEDMA [CODE]
        EXPORT UART_TransferAbortReceiveEDMA [CODE]
        EXPORT UART_TransferAbortSendEDMA [CODE]
        EXPORT UART_TransferCreateHandleEDMA [CODE]
        EXPORT UART_TransferGetReceiveCountEDMA [CODE]
        EXPORT UART_TransferGetSendCountEDMA [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_assert [CODE]
        IMPORT EDMA_AbortTransfer [CODE]
        IMPORT UART_GetInstance [CODE]
        IMPORT __aeabi_memclr4 [CODE]
        IMPORT EDMA_SetCallback [CODE]
        IMPORT EDMA_PrepareTransfer [CODE]
        IMPORT EDMA_SubmitTransfer [CODE]
        IMPORT EDMA_StartTransfer [CODE]
        IMPORT EDMA_GetRemainingMajorLoopCount [CODE]

        KEEP UART_EnableRxDMA
        KEEP UART_EnableTxDMA
        KEEP UART_ReceiveEDMACallback
        KEEP UART_SendEDMACallback
        KEEP s_edmaPrivateHandle

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
