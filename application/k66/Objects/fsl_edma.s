; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_edma.o --depend=.\objects\fsl_edma.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_edma.crf ..\..\devices\MK66F18\drivers\fsl_edma.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.DMA0_DMA16_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA0_DMA16_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#0
        LDR      r0,|L1.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L1.24|
        LDR      r1,|L1.68|
        LDR      r0,[r1,#0]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L1.24|
        MOVS     r1,#0x10
        LDR      r0,|L1.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L1.46|
        LDR      r1,|L1.68|
        LDR      r0,[r1,#0x40]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L1.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L1.64|
        DCD      0x40008000
|L1.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA10_DMA26_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA10_DMA26_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xa
        LDR      r0,|L2.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L2.24|
        LDR      r1,|L2.68|
        LDR      r0,[r1,#0x28]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L2.24|
        MOVS     r1,#0x1a
        LDR      r0,|L2.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L2.46|
        LDR      r1,|L2.68|
        LDR      r0,[r1,#0x68]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L2.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L2.64|
        DCD      0x40008000
|L2.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA11_DMA27_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA11_DMA27_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xb
        LDR      r0,|L3.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L3.24|
        LDR      r1,|L3.68|
        LDR      r0,[r1,#0x2c]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L3.24|
        MOVS     r1,#0x1b
        LDR      r0,|L3.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L3.46|
        LDR      r1,|L3.68|
        LDR      r0,[r1,#0x6c]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L3.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L3.64|
        DCD      0x40008000
|L3.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA12_DMA28_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA12_DMA28_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xc
        LDR      r0,|L4.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L4.24|
        LDR      r1,|L4.68|
        LDR      r0,[r1,#0x30]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L4.24|
        MOVS     r1,#0x1c
        LDR      r0,|L4.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L4.46|
        LDR      r1,|L4.68|
        LDR      r0,[r1,#0x70]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L4.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L4.64|
        DCD      0x40008000
|L4.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA13_DMA29_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA13_DMA29_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xd
        LDR      r0,|L5.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L5.24|
        LDR      r1,|L5.68|
        LDR      r0,[r1,#0x34]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L5.24|
        MOVS     r1,#0x1d
        LDR      r0,|L5.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L5.46|
        LDR      r1,|L5.68|
        LDR      r0,[r1,#0x74]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L5.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L5.64|
        DCD      0x40008000
|L5.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA14_DMA30_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA14_DMA30_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xe
        LDR      r0,|L6.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L6.24|
        LDR      r1,|L6.68|
        LDR      r0,[r1,#0x38]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L6.24|
        MOVS     r1,#0x1e
        LDR      r0,|L6.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L6.46|
        LDR      r1,|L6.68|
        LDR      r0,[r1,#0x78]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L6.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L6.64|
        DCD      0x40008000
|L6.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA15_DMA31_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA15_DMA31_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#0xf
        LDR      r0,|L7.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L7.24|
        LDR      r1,|L7.68|
        LDR      r0,[r1,#0x3c]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L7.24|
        MOVS     r1,#0x1f
        LDR      r0,|L7.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L7.46|
        LDR      r1,|L7.68|
        LDR      r0,[r1,#0x7c]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L7.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L7.64|
        DCD      0x40008000
|L7.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA1_DMA17_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA1_DMA17_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#1
        LDR      r0,|L8.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L8.24|
        LDR      r1,|L8.68|
        LDR      r0,[r1,#4]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L8.24|
        MOVS     r1,#0x11
        LDR      r0,|L8.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L8.46|
        LDR      r1,|L8.68|
        LDR      r0,[r1,#0x44]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L8.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L8.64|
        DCD      0x40008000
|L8.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA2_DMA18_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA2_DMA18_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#2
        LDR      r0,|L9.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L9.24|
        LDR      r1,|L9.68|
        LDR      r0,[r1,#8]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L9.24|
        MOVS     r1,#0x12
        LDR      r0,|L9.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L9.46|
        LDR      r1,|L9.68|
        LDR      r0,[r1,#0x48]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L9.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L9.64|
        DCD      0x40008000
|L9.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA3_DMA19_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA3_DMA19_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#3
        LDR      r0,|L10.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L10.24|
        LDR      r1,|L10.68|
        LDR      r0,[r1,#0xc]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L10.24|
        MOVS     r1,#0x13
        LDR      r0,|L10.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L10.46|
        LDR      r1,|L10.68|
        LDR      r0,[r1,#0x4c]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L10.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L10.64|
        DCD      0x40008000
|L10.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA4_DMA20_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA4_DMA20_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#4
        LDR      r0,|L11.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L11.24|
        LDR      r1,|L11.68|
        LDR      r0,[r1,#0x10]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L11.24|
        MOVS     r1,#0x14
        LDR      r0,|L11.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L11.46|
        LDR      r1,|L11.68|
        LDR      r0,[r1,#0x50]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L11.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L11.64|
        DCD      0x40008000
|L11.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA5_DMA21_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA5_DMA21_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#5
        LDR      r0,|L12.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L12.24|
        LDR      r1,|L12.68|
        LDR      r0,[r1,#0x14]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L12.24|
        MOVS     r1,#0x15
        LDR      r0,|L12.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L12.46|
        LDR      r1,|L12.68|
        LDR      r0,[r1,#0x54]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L12.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L12.64|
        DCD      0x40008000
|L12.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA6_DMA22_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA6_DMA22_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#6
        LDR      r0,|L13.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L13.24|
        LDR      r1,|L13.68|
        LDR      r0,[r1,#0x18]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L13.24|
        MOVS     r1,#0x16
        LDR      r0,|L13.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L13.46|
        LDR      r1,|L13.68|
        LDR      r0,[r1,#0x58]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L13.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L13.64|
        DCD      0x40008000
|L13.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA7_DMA23_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA7_DMA23_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#7
        LDR      r0,|L14.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L14.24|
        LDR      r1,|L14.68|
        LDR      r0,[r1,#0x1c]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L14.24|
        MOVS     r1,#0x17
        LDR      r0,|L14.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L14.46|
        LDR      r1,|L14.68|
        LDR      r0,[r1,#0x5c]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L14.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L14.64|
        DCD      0x40008000
|L14.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA8_DMA24_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA8_DMA24_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#8
        LDR      r0,|L15.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L15.24|
        LDR      r1,|L15.68|
        LDR      r0,[r1,#0x20]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L15.24|
        MOVS     r1,#0x18
        LDR      r0,|L15.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L15.46|
        LDR      r1,|L15.68|
        LDR      r0,[r1,#0x60]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L15.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L15.64|
        DCD      0x40008000
|L15.68|
        DCD      s_EDMAHandle

        AREA ||i.DMA9_DMA25_DriverIRQHandler||, CODE, READONLY, ALIGN=2

DMA9_DMA25_DriverIRQHandler PROC
        PUSH     {r4,lr}
        MOVS     r1,#9
        LDR      r0,|L16.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L16.24|
        LDR      r1,|L16.68|
        LDR      r0,[r1,#0x24]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L16.24|
        MOVS     r1,#0x19
        LDR      r0,|L16.64|
        BL       EDMA_GetChannelStatusFlags
        AND      r0,r0,#4
        CBZ      r0,|L16.46|
        LDR      r1,|L16.68|
        LDR      r0,[r1,#0x64]  ; s_EDMAHandle
        BL       EDMA_HandleIRQ
|L16.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L16.64|
        DCD      0x40008000
|L16.68|
        DCD      s_EDMAHandle

        AREA ||i.DisableGlobalIRQ||, CODE, READONLY, ALIGN=1

DisableGlobalIRQ PROC
        NOP      
        MRS      r1,PRIMASK
        MOV      r0,r1
        CPSID    i
        BX       lr
        ENDP


        AREA ||i.EDMA_AbortTransfer||, CODE, READONLY, ALIGN=1

EDMA_AbortTransfer PROC
        LDRB     r1,[r0,#0x10]
        AND      r1,r1,#0x1f
        LDR      r2,[r0,#8]
        STRB     r1,[r2,#0x1a]
        MOVS     r2,#0
        LDR      r1,[r0,#8]
        ADD      r1,r1,#0x1000
        LDRB     r3,[r0,#0x10]
        ADD      r1,r1,r3,LSL #5
        STRH     r2,[r1,#0x1c]
        LDR      r1,[r0,#8]
        ADD      r1,r1,#0x1000
        LDRB     r3,[r0,#0x10]
        ADD      r1,r1,r3,LSL #5
        STR      r2,[r1,#0x18]
        LDR      r1,[r0,#0xc]
        CBZ      r1,|L18.52|
        MOVS     r1,#0
        STRB     r1,[r0,#0x11]
        STRB     r1,[r0,#0x12]
        STRB     r1,[r0,#0x13]
|L18.52|
        BX       lr
        ENDP


        AREA ||i.EDMA_ClearChannelStatusFlags||, CODE, READONLY, ALIGN=2

EDMA_ClearChannelStatusFlags PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        MOV      r6,r2
        CMP      r4,#0x20
        BCS      |L19.14|
        B        |L19.26|
|L19.14|
        MOV      r2,#0x2dd
        ADR      r1,|L19.52|
        ADR      r0,|L19.96|
        BL       __aeabi_assert
|L19.26|
        AND      r0,r6,#1
        CBZ      r0,|L19.34|
        STRB     r4,[r5,#0x1c]
|L19.34|
        AND      r0,r6,#2
        CBZ      r0,|L19.42|
        STRB     r4,[r5,#0x1e]
|L19.42|
        AND      r0,r6,#4
        CBZ      r0,|L19.50|
        STRB     r4,[r5,#0x1f]
|L19.50|
        POP      {r4-r6,pc}
        ENDP

|L19.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L19.96|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0

        AREA ||i.EDMA_CreateHandle||, CODE, READONLY, ALIGN=2

EDMA_CreateHandle PROC
        PUSH     {r4-r10,lr}
        MOV      r5,r0
        MOV      r7,r1
        MOV      r6,r2
        CBZ      r5,|L20.14|
        B        |L20.26|
|L20.14|
        MOV      r2,#0x30e
        ADR      r1,|L20.172|
        ADR      r0,|L20.216|
        BL       __aeabi_assert
|L20.26|
        CMP      r6,#0x20
        BCS      |L20.32|
        B        |L20.44|
|L20.32|
        MOV      r2,#0x30f
        ADR      r1,|L20.172|
        ADR      r0,|L20.232|
        BL       __aeabi_assert
|L20.44|
        MOVS     r1,#0x18
        MOV      r0,r5
        BL       __aeabi_memclr4
        STR      r7,[r5,#8]
        STRB     r6,[r5,#0x10]
        MOV      r0,r7
        BL       EDMA_GetInstance
        MOV      r8,r0
        BL       Get_StartInstance
        MOV      r9,r0
        SUB      r0,r8,r9
        ADD      r10,r6,r0,LSL #5
        LDR      r0,|L20.284|
        STR      r5,[r0,r10,LSL #2]
        LDR      r1,|L20.288|
        ADD      r1,r1,r8,LSL #5
        LDRSB    r0,[r1,r6]
        CMN      r0,#0x80
        BNE      |L20.100|
        B        |L20.130|
|L20.100|
        MOV      r1,r0
        CMP      r1,#0
        BLT      |L20.126|
        AND      r3,r1,#0x1f
        MOVS     r2,#1
        LSLS     r2,r2,r3
        LSRS     r3,r1,#5
        LSLS     r3,r3,#2
        ADD      r3,r3,#0xe000e000
        STR      r2,[r3,#0x100]
|L20.126|
        NOP      
        NOP      
|L20.130|
        LDR      r0,[r5,#8]
        ADD      r0,r0,#0x1000
        LDRB     r1,[r5,#0x10]
        ADD      r4,r0,r1,LSL #5
        MOVS     r0,#0
        STR      r0,[r4,#0]
        STRH     r0,[r4,#4]
        STRH     r0,[r4,#6]
        STR      r0,[r4,#8]
        STR      r0,[r4,#0xc]
        STR      r0,[r4,#0x10]
        STRH     r0,[r4,#0x14]
        STRH     r0,[r4,#0x16]
        STR      r0,[r4,#0x18]
        STRH     r0,[r4,#0x1c]
        STRH     r0,[r4,#0x1e]
        POP      {r4-r10,pc}
        ENDP

        DCW      0x0000
|L20.172|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L20.216|
        DCB      "handle != NULL",0
        DCB      0
|L20.232|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0
|L20.284|
        DCD      s_EDMAHandle
|L20.288|
        DCD      s_edmaIRQNumber

        AREA ||i.EDMA_Deinit||, CODE, READONLY, ALIGN=2

EDMA_Deinit PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r0,r5
        BL       EDMA_GetInstance
        LDR      r1,|L21.36|
        LDR      r4,[r1,r0,LSL #2]
        LDR      r1,|L21.40|
        ADD      r0,r1,r4,LSR #16
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,r4
        BICS     r1,r1,r2
        STR      r1,[r0,#0]
        NOP      
        POP      {r4-r6,pc}
        ENDP

|L21.36|
        DCD      s_edmaClockName
|L21.40|
        DCD      0x40047000

        AREA ||i.EDMA_DisableChannelInterrupts||, CODE, READONLY, ALIGN=2

EDMA_DisableChannelInterrupts PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        CMP      r5,#0x20
        BCS      |L22.14|
        B        |L22.26|
|L22.14|
        MOV      r2,#0x182
        ADR      r1,|L22.104|
        ADR      r0,|L22.148|
        BL       __aeabi_assert
|L22.26|
        AND      r0,r6,#1
        CBZ      r0,|L22.42|
        LDR      r0,[r4,#0x14]
        MOVS     r1,#1
        LSLS     r1,r1,r5
        BICS     r0,r0,r1
        STR      r0,[r4,#0x14]
|L22.42|
        AND      r0,r6,#2
        CBZ      r0,|L22.72|
        ADD      r0,r4,#0x1000
        ADD      r0,r0,r5,LSL #5
        LDRH     r0,[r0,#0x1c]
        BIC      r1,r0,#2
        ADD      r0,r4,#0x1000
        ADD      r0,r0,r5,LSL #5
        STRH     r1,[r0,#0x1c]
|L22.72|
        AND      r0,r6,#4
        CBZ      r0,|L22.102|
        ADD      r0,r4,#0x1000
        ADD      r0,r0,r5,LSL #5
        LDRH     r0,[r0,#0x1c]
        BIC      r1,r0,#4
        ADD      r0,r4,#0x1000
        ADD      r0,r0,r5,LSL #5
        STRH     r1,[r0,#0x1c]
|L22.102|
        POP      {r4-r6,pc}
        ENDP

|L22.104|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L22.148|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0

        AREA ||i.EDMA_EnableChannelInterrupts||, CODE, READONLY, ALIGN=2

EDMA_EnableChannelInterrupts PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        CMP      r5,#0x20
        BCS      |L23.14|
        B        |L23.26|
|L23.14|
        MOV      r2,#0x163
        ADR      r1,|L23.104|
        ADR      r0,|L23.148|
        BL       __aeabi_assert
|L23.26|
        AND      r0,r6,#1
        CBZ      r0,|L23.42|
        LDR      r0,[r4,#0x14]
        MOVS     r1,#1
        LSLS     r1,r1,r5
        ORRS     r0,r0,r1
        STR      r0,[r4,#0x14]
|L23.42|
        AND      r0,r6,#2
        CBZ      r0,|L23.72|
        ADD      r0,r4,#0x1000
        ADD      r0,r0,r5,LSL #5
        LDRH     r0,[r0,#0x1c]
        ORR      r1,r0,#2
        ADD      r0,r4,#0x1000
        ADD      r0,r0,r5,LSL #5
        STRH     r1,[r0,#0x1c]
|L23.72|
        AND      r0,r6,#4
        CBZ      r0,|L23.102|
        ADD      r0,r4,#0x1000
        ADD      r0,r0,r5,LSL #5
        LDRH     r0,[r0,#0x1c]
        ORR      r1,r0,#4
        ADD      r0,r4,#0x1000
        ADD      r0,r0,r5,LSL #5
        STRH     r1,[r0,#0x1c]
|L23.102|
        POP      {r4-r6,pc}
        ENDP

|L23.104|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L23.148|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0

        AREA ||i.EDMA_GetChannelStatusFlags||, CODE, READONLY, ALIGN=2

EDMA_GetChannelStatusFlags PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        CMP      r4,#0x20
        BCS      |L24.12|
        B        |L24.24|
|L24.12|
        MOV      r2,#0x2c5
        ADR      r1,|L24.72|
        ADR      r0,|L24.116|
        BL       __aeabi_assert
|L24.24|
        MOVS     r5,#0
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        LDRH     r0,[r0,#0x1c]
        UBFX     r0,r0,#7,#1
        ORRS     r5,r5,r0
        LDR      r0,[r6,#0x2c]
        LSRS     r0,r0,r4
        AND      r0,r0,#1
        ORR      r5,r5,r0,LSL #1
        LDR      r0,[r6,#0x24]
        LSRS     r0,r0,r4
        AND      r0,r0,#1
        ORR      r5,r5,r0,LSL #2
        MOV      r0,r5
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L24.72|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L24.116|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0

        AREA ||i.EDMA_GetDefaultConfig||, CODE, READONLY, ALIGN=2

EDMA_GetDefaultConfig PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L25.8|
        B        |L25.18|
|L25.8|
        MOVS     r2,#0xa6
        ADR      r1,|L25.36|
        ADR      r0,|L25.80|
        BL       __aeabi_assert
|L25.18|
        MOVS     r0,#0
        STR      r0,[r4,#0]
        STRB     r0,[r4,#2]
        MOVS     r0,#1
        STRB     r0,[r4,#1]
        MOVS     r0,#0
        STRB     r0,[r4,#0]
        STRB     r0,[r4,#3]
        POP      {r4,pc}
        ENDP

|L25.36|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L25.80|
        DCB      "config != NULL",0
        DCB      0

        AREA ||i.EDMA_GetInstance||, CODE, READONLY, ALIGN=2

EDMA_GetInstance PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r4,#0
        B        |L26.22|
|L26.8|
        LDR      r0,|L26.48|
        LDR      r0,[r0,r4,LSL #2]
        CMP      r0,r5
        BNE      |L26.20|
        B        |L26.26|
|L26.20|
        ADDS     r4,r4,#1
|L26.22|
        CMP      r4,#0
        BEQ      |L26.8|
|L26.26|
        NOP      
        CBNZ     r4,|L26.32|
        B        |L26.42|
|L26.32|
        MOVS     r2,#0x44
        ADR      r1,|L26.52|
        ADR      r0,|L26.96|
        BL       __aeabi_assert
|L26.42|
        MOV      r0,r4
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L26.48|
        DCD      s_edmaBases
|L26.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L26.96|
        DCB      "instance < ARRAY_SIZE(s_edmaBases)",0
        DCB      0

        AREA ||i.EDMA_GetRemainingMajorLoopCount||, CODE, READONLY, ALIGN=2

EDMA_GetRemainingMajorLoopCount PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CMP      r4,#0x20
        BCS      |L27.12|
        B        |L27.24|
|L27.12|
        MOV      r2,#0x2a1
        ADR      r1,|L27.96|
        ADR      r0,|L27.140|
        BL       __aeabi_assert
|L27.24|
        MOVS     r6,#0
        ADD      r0,r5,#0x1000
        ADD      r0,r0,r4,LSL #5
        LDRH     r0,[r0,#0x1c]
        AND      r0,r0,#0x80
        CBZ      r0,|L27.44|
        B        |L27.90|
|L27.44|
        ADD      r0,r5,#0x1000
        ADD      r0,r0,r4,LSL #5
        LDRH     r0,[r0,#0x16]
        AND      r0,r0,#0x8000
        CBZ      r0,|L27.76|
        ADD      r0,r5,#0x1000
        ADD      r0,r0,r4,LSL #5
        LDRH     r0,[r0,#0x16]
        UBFX     r6,r0,#0,#9
        B        |L27.90|
|L27.76|
        ADD      r0,r5,#0x1000
        ADD      r0,r0,r4,LSL #5
        LDRH     r0,[r0,#0x16]
        UBFX     r6,r0,#0,#15
|L27.90|
        MOV      r0,r6
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L27.96|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L27.140|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0

        AREA ||i.EDMA_HandleIRQ||, CODE, READONLY, ALIGN=2

EDMA_HandleIRQ PROC
        PUSH     {r4-r10,lr}
        MOV      r4,r0
        CBZ      r4,|L28.10|
        B        |L28.22|
|L28.10|
        MOV      r2,#0x4f4
        ADR      r1,|L28.212|
        ADR      r0,|L28.256|
        BL       __aeabi_assert
|L28.22|
        LDRB     r0,[r4,#0x10]
        LDR      r1,[r4,#8]
        STRB     r0,[r1,#0x1f]
        LDR      r0,[r4,#8]
        ADD      r0,r0,#0x1000
        LDRB     r1,[r4,#0x10]
        ADD      r0,r0,r1,LSL #5
        LDRH     r0,[r0,#0x1c]
        UBFX     r7,r0,#7,#1
        LDR      r0,[r4,#0xc]
        CBNZ     r0,|L28.70|
        LDR      r0,[r4,#0]
        CMP      r0,#0
        BEQ      |L28.206|
        MOVS     r3,#0
        MOV      r2,r7
        MOV      r0,r4
        LDRD     r5,r1,[r4,#0]
        BLX      r5
        B        |L28.206|
|L28.70|
        LDR      r0,[r4,#8]
        ADD      r0,r0,#0x1000
        LDRB     r1,[r4,#0x10]
        ADD      r0,r0,r1,LSL #5
        LDR      r9,[r0,#0x18]
        LDR      r0,[r4,#0xc]
        SUB      r9,r9,r0
        LSR      r8,r9,#5
        CBZ      r7,|L28.104|
        AND      r6,r8,#0xff
        B        |L28.124|
|L28.104|
        CMP      r8,#0
        BEQ      |L28.116|
        SUB      r0,r8,#1
        B        |L28.122|
|L28.116|
        LDRSB    r0,[r4,#0x14]
        SUBS     r0,r0,#1
|L28.122|
        UXTB     r6,r0
|L28.124|
        LDRB     r0,[r4,#0x11]
        CMP      r0,r6
        BNE      |L28.152|
        LDRSB    r0,[r4,#0x13]
        LDRSB    r1,[r4,#0x14]
        CMP      r0,r1
        BNE      |L28.148|
        LDRSB    r5,[r4,#0x13]
        B        |L28.150|
|L28.148|
        MOVS     r5,#0
|L28.150|
        B        |L28.168|
|L28.152|
        LDRSB    r0,[r4,#0x11]
        SUBS     r5,r6,r0
        CMP      r5,#0
        BGE      |L28.168|
        LDRSB    r0,[r4,#0x14]
        ADD      r5,r5,r0
|L28.168|
        SXTB     r0,r6
        STRB     r0,[r4,#0x11]
        LDRB     r0,[r4,#0x13]
        SUBS     r0,r0,r5
        SXTB     r0,r0
        STRB     r0,[r4,#0x13]
        LDR      r0,[r4,#0]
        CBZ      r0,|L28.196|
        MOV      r3,r5
        MOV      r2,r7
        MOV      r0,r4
        LDRD     r12,r1,[r4,#0]
        BLX      r12
|L28.196|
        CBZ      r7,|L28.204|
        LDRB     r0,[r4,#0x10]
        LDR      r1,[r4,#8]
        STRB     r0,[r1,#0x1c]
|L28.204|
        NOP      
|L28.206|
        POP      {r4-r10,pc}
        ENDP

        DCW      0x0000
|L28.212|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L28.256|
        DCB      "handle != NULL",0
        DCB      0

        AREA ||i.EDMA_Init||, CODE, READONLY, ALIGN=2

EDMA_Init PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBZ      r5,|L29.12|
        B        |L29.22|
|L29.12|
        MOVS     r2,#0x72
        ADR      r1,|L29.120|
        ADR      r0,|L29.164|
        BL       __aeabi_assert
|L29.22|
        MOV      r0,r4
        BL       EDMA_GetInstance
        LDR      r1,|L29.180|
        LDR      r7,[r1,r0,LSL #2]
        LDR      r1,|L29.184|
        ADD      r0,r1,r7,LSR #16
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,r7
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        NOP      
        MOVS     r0,#0
        STR      r0,[r4,#0xc]
        SUBS     r0,r0,#1
        STR      r0,[r4,#0x24]
        STR      r0,[r4,#0x2c]
        LDR      r6,[r4,#0]
        BIC      r6,r6,#0x56
        LDRB     r0,[r5,#2]
        MOVS     r1,#4
        AND      r0,r1,r0,LSL #2
        LDRB     r1,[r5,#1]
        MOVS     r2,#0x10
        AND      r1,r2,r1,LSL #4
        ORRS     r0,r0,r1
        LDRB     r1,[r5,#0]
        MOVS     r2,#0x40
        AND      r1,r2,r1,LSL #6
        ORRS     r0,r0,r1
        LDRB     r1,[r5,#3]
        MOVS     r2,#2
        AND      r1,r2,r1,LSL #1
        ORRS     r0,r0,r1
        ORR      r0,r0,#0x80
        ORRS     r6,r6,r0
        STR      r6,[r4,#0]
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L29.120|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L29.164|
        DCB      "config != NULL",0
        DCB      0
|L29.180|
        DCD      s_edmaClockName
|L29.184|
        DCD      0x40047000

        AREA ||i.EDMA_InstallTCD||, CODE, READONLY, ALIGN=2

EDMA_InstallTCD PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CMP      r4,#0x20
        BCS      |L30.14|
        B        |L30.24|
|L30.14|
        MOVS     r2,#0x52
        ADR      r1,|L30.204|
        ADR      r0,|L30.248|
        BL       __aeabi_assert
|L30.24|
        CBZ      r5,|L30.28|
        B        |L30.38|
|L30.28|
        MOVS     r2,#0x53
        ADR      r1,|L30.204|
        ADR      r0,|L30.300|
        BL       __aeabi_assert
|L30.38|
        AND      r0,r5,#0x1f
        CBNZ     r0,|L30.46|
        B        |L30.56|
|L30.46|
        MOVS     r2,#0x54
        ADR      r1,|L30.204|
        ADR      r0,|L30.312|
        BL       __aeabi_assert
|L30.56|
        LDR      r1,[r5,#0]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STR      r1,[r0,#0]
        LDRH     r1,[r5,#4]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STRH     r1,[r0,#4]
        LDRH     r1,[r5,#6]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STRH     r1,[r0,#6]
        LDR      r1,[r5,#8]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STR      r1,[r0,#8]
        LDR      r1,[r5,#0xc]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STR      r1,[r0,#0xc]
        LDR      r1,[r5,#0x10]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STR      r1,[r0,#0x10]
        LDRH     r1,[r5,#0x14]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STRH     r1,[r0,#0x14]
        LDRH     r1,[r5,#0x16]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STRH     r1,[r0,#0x16]
        LDR      r1,[r5,#0x18]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STR      r1,[r0,#0x18]
        MOVS     r1,#0
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STRH     r1,[r0,#0x1c]
        LDRH     r1,[r5,#0x1c]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STRH     r1,[r0,#0x1c]
        LDRH     r1,[r5,#0x1e]
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r4,LSL #5
        STRH     r1,[r0,#0x1e]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L30.204|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L30.248|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0
|L30.300|
        DCB      "tcd != NULL",0
|L30.312|
        DCB      "((uint32_t)tcd & 0x1FU) == 0U",0
        DCB      0
        DCB      0

        AREA ||i.EDMA_InstallTCDMemory||, CODE, READONLY, ALIGN=2

EDMA_InstallTCDMemory PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        CBZ      r4,|L31.12|
        B        |L31.24|
|L31.12|
        MOV      r2,#0x345
        ADR      r1,|L31.64|
        ADR      r0,|L31.108|
        BL       __aeabi_assert
|L31.24|
        AND      r0,r5,#0x1f
        CBNZ     r0,|L31.32|
        B        |L31.44|
|L31.32|
        MOV      r2,#0x346
        ADR      r1,|L31.64|
        ADR      r0,|L31.124|
        BL       __aeabi_assert
|L31.44|
        MOVS     r0,#0
        STRB     r0,[r4,#0x11]
        STRB     r0,[r4,#0x12]
        STRB     r0,[r4,#0x13]
        SXTB     r0,r6
        STRB     r0,[r4,#0x14]
        MOVS     r0,#0
        STRB     r0,[r4,#0x15]
        STR      r5,[r4,#0xc]
        POP      {r4-r6,pc}
        ENDP

|L31.64|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L31.108|
        DCB      "handle != NULL",0
        DCB      0
|L31.124|
        DCB      "((uint32_t)tcdPool & 0x1FU) == 0U",0
        DCB      0
        DCB      0

        AREA ||i.EDMA_PrepareTransfer||, CODE, READONLY, ALIGN=2

EDMA_PrepareTransfer PROC
        PUSH     {r4-r12,lr}
        MOV      r4,r0
        MOV      r7,r1
        MOV      r5,r2
        MOV      r8,r3
        ADD      r6,sp,#0x28
        LDM      r6,{r6,r9-r11}
        CBZ      r4,|L32.22|
        B        |L32.34|
|L32.22|
        MOV      r2,#0x37d
        ADR      r1,|L32.404|
        ADR      r0,|L32.448|
        BL       __aeabi_assert
|L32.34|
        CBZ      r7,|L32.38|
        B        |L32.50|
|L32.38|
        MOV      r2,#0x37e
        ADR      r1,|L32.404|
        ADR      r0,|L32.464|
        BL       __aeabi_assert
|L32.50|
        CMP      r8,#0
        BEQ      |L32.58|
        B        |L32.70|
|L32.58|
        MOV      r2,#0x37f
        ADR      r1,|L32.404|
        ADR      r0,|L32.480|
        BL       __aeabi_assert
|L32.70|
        CMP      r5,#1
        BEQ      |L32.94|
        CMP      r5,#2
        BEQ      |L32.94|
        CMP      r5,#4
        BEQ      |L32.94|
        CMP      r5,#8
        BEQ      |L32.94|
        CMP      r5,#0x10
        BEQ      |L32.94|
        CMP      r5,#0x20
        BNE      |L32.96|
|L32.94|
        B        |L32.108|
|L32.96|
        MOV      r2,#0x380
        ADR      r1,|L32.404|
        LDR      r0,|L32.500|
        BL       __aeabi_assert
|L32.108|
        CMP      r6,#1
        BEQ      |L32.132|
        CMP      r6,#2
        BEQ      |L32.132|
        CMP      r6,#4
        BEQ      |L32.132|
        CMP      r6,#8
        BEQ      |L32.132|
        CMP      r6,#0x10
        BEQ      |L32.132|
        CMP      r6,#0x20
        BNE      |L32.134|
|L32.132|
        B        |L32.146|
|L32.134|
        MOV      r2,#0x382
        ADR      r1,|L32.404|
        LDR      r0,|L32.504|
        BL       __aeabi_assert
|L32.146|
        UDIV     r0,r10,r9
        MLS      r0,r9,r0,r10
        CBNZ     r0,|L32.158|
        B        |L32.170|
|L32.158|
        MOV      r2,#0x384
        ADR      r1,|L32.404|
        ADR      r0,|L32.508|
        BL       __aeabi_assert
|L32.170|
        MOVS     r1,#0x18
        MOV      r0,r4
        BL       __aeabi_memclr4
        STR      r8,[r4,#4]
        STR      r7,[r4,#0]
        STR      r9,[r4,#0x10]
        UDIV     r0,r10,r9
        STR      r0,[r4,#0x14]
        CMP      r5,#4
        BEQ      |L32.232|
        BGT      |L32.210|
        CMP      r5,#1
        BEQ      |L32.220|
        CMP      r5,#2
        BNE      |L32.250|
        B        |L32.226|
|L32.210|
        CMP      r5,#0x10
        BEQ      |L32.238|
        CMP      r5,#0x20
        BNE      |L32.250|
        B        |L32.244|
|L32.220|
        MOVS     r0,#0
        STRB     r0,[r4,#8]
        B        |L32.262|
|L32.226|
        MOVS     r0,#1
        STRB     r0,[r4,#8]
        B        |L32.262|
|L32.232|
        MOVS     r0,#2
        STRB     r0,[r4,#8]
        B        |L32.262|
|L32.238|
        MOVS     r0,#4
        STRB     r0,[r4,#8]
        B        |L32.262|
|L32.244|
        MOVS     r0,#5
        STRB     r0,[r4,#8]
        B        |L32.262|
|L32.250|
        MOV      r2,#0x3a7
        ADR      r1,|L32.404|
        ADR      r0,|L32.552|
        BL       __aeabi_assert
|L32.262|
        NOP      
        CMP      r6,#4
        BEQ      |L32.302|
        BGT      |L32.280|
        CMP      r6,#1
        BEQ      |L32.290|
        CMP      r6,#2
        BNE      |L32.320|
        B        |L32.296|
|L32.280|
        CMP      r6,#0x10
        BEQ      |L32.308|
        CMP      r6,#0x20
        BNE      |L32.320|
        B        |L32.314|
|L32.290|
        MOVS     r0,#0
        STRB     r0,[r4,#9]
        B        |L32.332|
|L32.296|
        MOVS     r0,#1
        STRB     r0,[r4,#9]
        B        |L32.332|
|L32.302|
        MOVS     r0,#2
        STRB     r0,[r4,#9]
        B        |L32.332|
|L32.308|
        MOVS     r0,#4
        STRB     r0,[r4,#9]
        B        |L32.332|
|L32.314|
        MOVS     r0,#5
        STRB     r0,[r4,#9]
        B        |L32.332|
|L32.320|
        MOV      r2,#0x3c4
        ADR      r1,|L32.404|
        ADR      r0,|L32.552|
        BL       __aeabi_assert
|L32.332|
        NOP      
        CMP      r11,#0
        BEQ      |L32.354|
        CMP      r11,#1
        BEQ      |L32.374|
        CMP      r11,#2
        BNE      |L32.384|
        B        |L32.364|
|L32.354|
        SXTH     r0,r6
        STRH     r0,[r4,#0xc]
        SXTH     r0,r5
        STRH     r0,[r4,#0xa]
        B        |L32.396|
|L32.364|
        MOVS     r0,#0
        STRH     r0,[r4,#0xc]
        SXTH     r0,r5
        STRH     r0,[r4,#0xa]
        B        |L32.396|
|L32.374|
        SXTH     r0,r6
        STRH     r0,[r4,#0xc]
        MOVS     r0,#0
        STRH     r0,[r4,#0xa]
        B        |L32.396|
|L32.384|
        MOV      r2,#0x3d7
        ADR      r1,|L32.404|
        ADR      r0,|L32.552|
        BL       __aeabi_assert
|L32.396|
        NOP      
        POP      {r4-r12,pc}
        ENDP

        DCW      0x0000
|L32.404|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L32.448|
        DCB      "config != NULL",0
        DCB      0
|L32.464|
        DCB      "srcAddr != NULL",0
|L32.480|
        DCB      "destAddr != NULL",0
        DCB      0
        DCB      0
        DCB      0
|L32.500|
        DCD      ||.conststring||
|L32.504|
        DCD      ||.conststring||+0x78
|L32.508|
        DCB      "(transferBytes % bytesEachRequest) == 0U",0
        DCB      0
        DCB      0
        DCB      0
|L32.552|
        DCB      "false",0
        DCB      0
        DCB      0

        AREA ||i.EDMA_ResetChannel||, CODE, READONLY, ALIGN=2

EDMA_ResetChannel PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CMP      r4,#0x20
        BCS      |L33.12|
        B        |L33.22|
|L33.12|
        MOVS     r2,#0xbe
        ADR      r1,|L33.36|
        ADR      r0,|L33.80|
        BL       __aeabi_assert
|L33.22|
        ADD      r1,r5,#0x1000
        ADD      r0,r1,r4,LSL #5
        BL       EDMA_TcdReset
        POP      {r4-r6,pc}
        ENDP

|L33.36|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L33.80|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0

        AREA ||i.EDMA_SetBandWidth||, CODE, READONLY, ALIGN=2

EDMA_SetBandWidth PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        MOV      r6,r2
        CMP      r4,#0x20
        BCS      |L34.14|
        B        |L34.26|
|L34.14|
        MOV      r2,#0x13e
        ADR      r1,|L34.52|
        ADR      r0,|L34.96|
        BL       __aeabi_assert
|L34.26|
        ADD      r0,r5,#0x1000
        ADD      r0,r0,r4,LSL #5
        LDRH     r0,[r0,#0x1c]
        BFI      r0,r6,#14,#2
        ADD      r1,r5,#0x1000
        ADD      r1,r1,r4,LSL #5
        STRH     r0,[r1,#0x1c]
        POP      {r4-r6,pc}
        ENDP

|L34.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L34.96|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0

        AREA ||i.EDMA_SetCallback||, CODE, READONLY, ALIGN=2

EDMA_SetCallback PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r6,r1
        MOV      r5,r2
        CBZ      r4,|L35.12|
        B        |L35.24|
|L35.12|
        MOV      r2,#0x35d
        ADR      r1,|L35.32|
        ADR      r0,|L35.76|
        BL       __aeabi_assert
|L35.24|
        STR      r6,[r4,#0]
        STR      r5,[r4,#4]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L35.32|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L35.76|
        DCB      "handle != NULL",0
        DCB      0

        AREA ||i.EDMA_SetChannelLink||, CODE, READONLY, ALIGN=2

EDMA_SetChannelLink PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r7,r2
        MOV      r5,r3
        CMP      r4,#0x20
        BCS      |L36.18|
        B        |L36.30|
|L36.18|
        MOV      r2,#0x128
        ADR      r1,|L36.68|
        ADR      r0,|L36.112|
        BL       __aeabi_assert
|L36.30|
        CMP      r5,#0x20
        BCS      |L36.36|
        B        |L36.48|
|L36.36|
        MOV      r2,#0x129
        ADR      r1,|L36.68|
        ADR      r0,|L36.164|
        BL       __aeabi_assert
|L36.48|
        ADD      r1,r6,#0x1000
        ADD      r0,r1,r4,LSL #5
        MOV      r2,r5
        MOV      r1,r7
        BL       EDMA_TcdSetChannelLink
        POP      {r4-r8,pc}
        ENDP

|L36.68|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L36.112|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0
|L36.164|
        DCB      "linkedChannel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANN"
        DCB      "EL",0
        DCB      0
        DCB      0

        AREA ||i.EDMA_SetChannelPreemptionConfig||, CODE, READONLY, ALIGN=2

EDMA_SetChannelPreemptionConfig PROC
        PUSH     {r4-r10,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r4,r2
        CMP      r5,#0x20
        BCS      |L37.16|
        B        |L37.28|
|L37.16|
        MOV      r2,#0x109
        ADR      r1,|L37.104|
        ADR      r0,|L37.148|
        BL       __aeabi_assert
|L37.28|
        CBZ      r4,|L37.32|
        B        |L37.44|
|L37.32|
        MOV      r2,#0x10a
        ADR      r1,|L37.104|
        ADR      r0,|L37.200|
        BL       __aeabi_assert
|L37.44|
        LDRB     r7,[r4,#1]
        LDRB     r8,[r4,#0]
        LDRB     r9,[r4,#2]
        ADD      r10,r6,#0x100
        EOR      r0,r7,#1
        MOVS     r1,#0x40
        AND      r0,r1,r0,LSL #6
        MOVS     r2,#0x80
        AND      r1,r2,r8,LSL #7
        ORRS     r0,r0,r1
        AND      r1,r9,#0xf
        ORRS     r0,r0,r1
        BIC      r1,r5,#3
        AND      r2,r5,#3
        RSB      r2,r2,#3
        ORRS     r1,r1,r2
        STRB     r0,[r10,r1]
        POP      {r4-r10,pc}
        ENDP

|L37.104|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L37.148|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0
|L37.200|
        DCB      "config != NULL",0
        DCB      0

        AREA ||i.EDMA_SetMinorOffsetConfig||, CODE, READONLY, ALIGN=2

EDMA_SetMinorOffsetConfig PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r4,r2
        CMP      r5,#0x20
        BCS      |L38.16|
        B        |L38.26|
|L38.16|
        MOVS     r2,#0xf1
        ADR      r1,|L38.104|
        ADR      r0,|L38.148|
        BL       __aeabi_assert
|L38.26|
        CBZ      r4,|L38.30|
        B        |L38.40|
|L38.30|
        MOVS     r2,#0xf2
        ADR      r1,|L38.104|
        ADR      r0,|L38.200|
        BL       __aeabi_assert
|L38.40|
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r5,LSL #5
        LDR      r7,[r0,#8]
        UBFX     r7,r7,#0,#10
        LDRB     r0,[r4,#0]
        MOV      r1,#0x80000000
        AND      r0,r1,r0,LSL #31
        LDRB     r1,[r4,#1]
        MOV      r2,#0x40000000
        AND      r1,r2,r1,LSL #30
        ORRS     r0,r0,r1
        LDR      r2,|L38.216|
        LDR      r1,[r4,#4]
        AND      r1,r2,r1,LSL #10
        ORRS     r0,r0,r1
        ORRS     r7,r7,r0
        ADD      r0,r6,#0x1000
        ADD      r0,r0,r5,LSL #5
        STR      r7,[r0,#8]
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L38.104|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L38.148|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0
|L38.200|
        DCB      "config != NULL",0
        DCB      0
|L38.216|
        DCD      0x3ffffc00

        AREA ||i.EDMA_SetModulo||, CODE, READONLY, ALIGN=2

EDMA_SetModulo PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r4,r1
        MOV      r6,r2
        MOV      r7,r3
        CMP      r4,#0x20
        BCS      |L39.18|
        B        |L39.30|
|L39.18|
        MOV      r2,#0x151
        ADR      r1,|L39.84|
        ADR      r0,|L39.128|
        BL       __aeabi_assert
|L39.30|
        ADD      r0,r5,#0x1000
        ADD      r0,r0,r4,LSL #5
        LDRH     r0,[r0,#6]
        MOV      r1,#0xf8f8
        BIC      r8,r0,r1
        MOVS     r0,#0xf8
        AND      r0,r0,r7,LSL #3
        ORR      r0,r0,r8
        MOV      r1,#0xf800
        AND      r1,r1,r6,LSL #11
        ORRS     r0,r0,r1
        ADD      r1,r5,#0x1000
        ADD      r1,r1,r4,LSL #5
        STRH     r0,[r1,#6]
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L39.84|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L39.128|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0

        AREA ||i.EDMA_SetTransferConfig||, CODE, READONLY, ALIGN=2

EDMA_SetTransferConfig PROC
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        MOV      r4,r1
        MOV      r5,r2
        MOV      r6,r3
        CMP      r4,#0x20
        BCS      |L40.18|
        B        |L40.28|
|L40.18|
        MOVS     r2,#0xde
        ADR      r1,|L40.80|
        ADR      r0,|L40.124|
        BL       __aeabi_assert
|L40.28|
        CBZ      r5,|L40.32|
        B        |L40.42|
|L40.32|
        MOVS     r2,#0xdf
        ADR      r1,|L40.80|
        ADR      r0,|L40.176|
        BL       __aeabi_assert
|L40.42|
        AND      r0,r6,#0x1f
        CBNZ     r0,|L40.50|
        B        |L40.60|
|L40.50|
        MOVS     r2,#0xe0
        ADR      r1,|L40.80|
        ADR      r0,|L40.192|
        BL       __aeabi_assert
|L40.60|
        ADD      r1,r7,#0x1000
        ADD      r0,r1,r4,LSL #5
        MOV      r2,r6
        MOV      r1,r5
        BL       EDMA_TcdSetTransferConfig
        POP      {r4-r8,pc}
        ENDP

|L40.80|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L40.124|
        DCB      "channel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANNEL",0
|L40.176|
        DCB      "config != NULL",0
        DCB      0
|L40.192|
        DCB      "((uint32_t)nextTcd & 0x1FU) == 0U",0
        DCB      0
        DCB      0

        AREA ||i.EDMA_StartTransfer||, CODE, READONLY, ALIGN=2

EDMA_StartTransfer PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        CBZ      r4,|L41.10|
        B        |L41.22|
|L41.10|
        MOV      r2,#0x484
        ADR      r1,|L41.120|
        ADR      r0,|L41.164|
        BL       __aeabi_assert
|L41.22|
        MOVS     r5,#0
        LDR      r0,[r4,#0xc]
        CBNZ     r0,|L41.40|
        LDRB     r0,[r4,#0x10]
        AND      r0,r0,#0x1f
        LDR      r1,[r4,#8]
        STRB     r0,[r1,#0x1b]
        B        |L41.116|
|L41.40|
        LDR      r0,[r4,#8]
        ADD      r0,r0,#0x1000
        LDRB     r1,[r4,#0x10]
        ADD      r6,r0,r1,LSL #5
        LDRB     r0,[r4,#0x15]
        ORR      r0,r0,#0x80
        STRB     r0,[r4,#0x15]
        LDR      r0,[r6,#0x18]
        CBZ      r0,|L41.114|
        BL       DisableGlobalIRQ
        MOV      r7,r0
        LDR      r0,[r4,#8]
        LDR      r0,[r0,#0xc]
        LDRB     r2,[r4,#0x10]
        MOVS     r1,#1
        LSLS     r1,r1,r2
        ANDS     r0,r0,r1
        CBNZ     r0,|L41.108|
        LDRH     r5,[r6,#0x1c]
        AND      r0,r5,#0x80
        CBZ      r0,|L41.98|
        AND      r0,r5,#0x10
        CBZ      r0,|L41.108|
|L41.98|
        LDRB     r0,[r4,#0x10]
        AND      r0,r0,#0x1f
        LDR      r1,[r4,#8]
        STRB     r0,[r1,#0x1b]
|L41.108|
        MOV      r0,r7
        BL       EnableGlobalIRQ
|L41.114|
        NOP      
|L41.116|
        POP      {r4-r8,pc}
        ENDP

|L41.120|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L41.164|
        DCB      "handle != NULL",0
        DCB      0

        AREA ||i.EDMA_StopTransfer||, CODE, READONLY, ALIGN=2

EDMA_StopTransfer PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L42.8|
        B        |L42.20|
|L42.8|
        MOV      r2,#0x4b3
        ADR      r1,|L42.40|
        ADR      r0,|L42.84|
        BL       __aeabi_assert
|L42.20|
        LDRB     r0,[r4,#0x15]
        BIC      r0,r0,#0x80
        STRB     r0,[r4,#0x15]
        LDRB     r0,[r4,#0x10]
        AND      r0,r0,#0x1f
        LDR      r1,[r4,#8]
        STRB     r0,[r1,#0x1a]
        POP      {r4,pc}
        ENDP

|L42.40|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L42.84|
        DCB      "handle != NULL",0
        DCB      0

        AREA ||i.EDMA_SubmitTransfer||, CODE, READONLY, ALIGN=2

EDMA_SubmitTransfer PROC
        PUSH     {r1-r11,lr}
        MOV      r4,r0
        MOV      r9,r1
        CBZ      r4,|L43.12|
        B        |L43.24|
|L43.12|
        MOV      r2,#0x3eb
        ADR      r1,|L43.456|
        ADR      r0,|L43.500|
        BL       __aeabi_assert
|L43.24|
        CMP      r9,#0
        BEQ      |L43.32|
        B        |L43.44|
|L43.32|
        MOV      r2,#0x3ec
        ADR      r1,|L43.456|
        ADR      r0,|L43.516|
        BL       __aeabi_assert
|L43.44|
        MOV      r10,#0
        LDR      r0,[r4,#8]
        ADD      r0,r0,#0x1000
        LDRB     r1,[r4,#0x10]
        ADD      r5,r0,r1,LSL #5
        LDR      r0,[r4,#0xc]
        CBNZ     r0,|L43.168|
        LDRH     r10,[r5,#0x1c]
        CMP      r10,#0
        BEQ      |L43.88|
        AND      r0,r10,#0x80
        CBNZ     r0,|L43.88|
        MOV      r0,#0x13ed
|L43.84|
        POP      {r1-r11,pc}
|L43.88|
        LDRB     r1,[r4,#0x10]
        MOVS     r3,#0
        MOV      r2,r9
        LDR      r0,[r4,#8]
        BL       EDMA_SetTransferConfig
        LDR      r0,[r4,#8]
        ADD      r0,r0,#0x1000
        LDRB     r1,[r4,#0x10]
        ADD      r0,r0,r1,LSL #5
        LDRH     r0,[r0,#0x1c]
        ORR      r1,r0,#8
        LDR      r0,[r4,#8]
        ADD      r0,r0,#0x1000
        LDRB     r2,[r4,#0x10]
        ADD      r0,r0,r2,LSL #5
        STRH     r1,[r0,#0x1c]
        LDR      r0,[r4,#8]
        ADD      r0,r0,#0x1000
        LDRB     r1,[r4,#0x10]
        ADD      r0,r0,r1,LSL #5
        LDRH     r0,[r0,#0x1c]
        ORR      r1,r0,#2
        LDR      r0,[r4,#8]
        ADD      r0,r0,#0x1000
        LDRB     r2,[r4,#0x10]
        ADD      r0,r0,r2,LSL #5
        STRH     r1,[r0,#0x1c]
        MOVS     r0,#0
        B        |L43.84|
|L43.168|
        B        |L43.170|
|L43.170|
        BL       DisableGlobalIRQ
        STR      r0,[sp,#8]
        LDRSB    r0,[r4,#0x13]
        STR      r0,[sp,#4]
        LDRSB    r0,[r4,#0x14]
        STR      r0,[sp,#0]
        LDRD     r1,r0,[sp,#0]
        CMP      r0,r1
        BLT      |L43.208|
        LDR      r0,[sp,#8]
        BL       EnableGlobalIRQ
        MOV      r0,#0x13ec
        B        |L43.84|
|L43.208|
        LDRSB    r6,[r4,#0x12]
        LDRB     r0,[r4,#0x13]
        ADDS     r0,r0,#1
        SXTB     r0,r0
        STRB     r0,[r4,#0x13]
        ADDS     r0,r6,#1
        SXTB     r7,r0
        LDRSB    r0,[r4,#0x14]
        CMP      r0,r7
        BNE      |L43.234|
        MOVS     r7,#0
|L43.234|
        STRB     r7,[r4,#0x12]
        LDR      r0,[sp,#8]
        BL       EnableGlobalIRQ
        CBZ      r6,|L43.248|
        SUBS     r0,r6,#1
        B        |L43.254|
|L43.248|
        LDRSB    r0,[r4,#0x14]
        SUBS     r0,r0,#1
|L43.254|
        SXTB     r8,r0
        LDR      r1,[r4,#0xc]
        ADD      r0,r1,r6,LSL #5
        BL       EDMA_TcdReset
        LDR      r1,[r4,#0xc]
        ADD      r0,r1,r6,LSL #5
        MOVS     r2,#0
        MOV      r1,r9
        BL       EDMA_TcdSetTransferConfig
        LDR      r0,[r4,#0xc]
        ADD      r0,r0,r6,LSL #5
        LDRH     r0,[r0,#0x1c]
        ORR      r0,r0,#2
        LDR      r1,[r4,#0xc]
        ADD      r1,r1,r6,LSL #5
        STRH     r0,[r1,#0x1c]
        LDR      r0,[r4,#0xc]
        ADD      r0,r0,r7,LSL #5
        LDR      r1,[r4,#0xc]
        ADD      r1,r1,r6,LSL #5
        STR      r0,[r1,#0x18]
        CMP      r6,r8
        BEQ      |L43.420|
        LDR      r0,[r4,#0xc]
        ADD      r0,r0,r8,LSL #5
        LDRH     r0,[r0,#0x1c]
        BIC      r0,r0,#8
        ORR      r11,r0,#0x10
        LDR      r0,[r4,#0xc]
        ADD      r0,r0,r8,LSL #5
        STRH     r11,[r0,#0x1c]
        LDR      r0,[r4,#0xc]
        ADD      r0,r0,r6,LSL #5
        LDR      r1,[r5,#0x18]
        CMP      r0,r1
        BNE      |L43.412|
        LDRH     r0,[r5,#0x1c]
        ORR      r0,r0,#8
        STRH     r0,[r5,#0x1c]
        LDRH     r0,[r5,#0x1c]
        ORR      r11,r0,#0x10
        STRH     r11,[r5,#0x1c]
        LDRH     r0,[r5,#0x1c]
        AND      r0,r0,#0x10
        CBZ      r0,|L43.396|
        LDRH     r0,[r5,#0x1c]
        BIC      r0,r0,#8
        STRH     r0,[r5,#0x1c]
        MOVS     r0,#0
        B        |L43.84|
|L43.396|
        LDR      r0,[r4,#0xc]
        ADD      r0,r0,r7,LSL #5
        LDR      r1,[r5,#0x18]
        CMP      r0,r1
        BNE      |L43.420|
        MOVS     r0,#0
        B        |L43.84|
|L43.412|
        LDR      r0,[r5,#0x18]
        CBZ      r0,|L43.420|
        MOVS     r0,#0
        B        |L43.84|
|L43.420|
        LDR      r3,[r4,#0xc]
        ADD      r2,r3,r6,LSL #5
        LDRB     r1,[r4,#0x10]
        LDR      r0,[r4,#8]
        BL       EDMA_InstallTCD
        LDRB     r0,[r4,#0x15]
        AND      r0,r0,#0x80
        CBZ      r0,|L43.452|
        LDRB     r0,[r4,#0x10]
        AND      r0,r0,#0x1f
        LDR      r1,[r4,#8]
        STRB     r0,[r1,#0x1b]
|L43.452|
        MOVS     r0,#0
        B        |L43.84|
        ENDP

|L43.456|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L43.500|
        DCB      "handle != NULL",0
        DCB      0
|L43.516|
        DCB      "config != NULL",0
        DCB      0

        AREA ||i.EDMA_TcdDisableInterrupts||, CODE, READONLY, ALIGN=2

EDMA_TcdDisableInterrupts PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBZ      r4,|L44.10|
        B        |L44.22|
|L44.10|
        MOV      r2,#0x27b
        ADR      r1,|L44.52|
        ADR      r0,|L44.96|
        BL       __aeabi_assert
|L44.22|
        AND      r0,r5,#2
        CBZ      r0,|L44.36|
        LDRH     r0,[r4,#0x1c]
        BIC      r0,r0,#2
        STRH     r0,[r4,#0x1c]
|L44.36|
        AND      r0,r5,#4
        CBZ      r0,|L44.50|
        LDRH     r0,[r4,#0x1c]
        BIC      r0,r0,#4
        STRH     r0,[r4,#0x1c]
|L44.50|
        POP      {r4-r6,pc}
        ENDP

|L44.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L44.96|
        DCB      "tcd != NULL",0

        AREA ||i.EDMA_TcdEnableInterrupts||, CODE, READONLY, ALIGN=2

EDMA_TcdEnableInterrupts PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBZ      r4,|L45.10|
        B        |L45.22|
|L45.10|
        MOV      r2,#0x263
        ADR      r1,|L45.52|
        ADR      r0,|L45.96|
        BL       __aeabi_assert
|L45.22|
        AND      r0,r5,#2
        CBZ      r0,|L45.36|
        LDRH     r0,[r4,#0x1c]
        ORR      r0,r0,#2
        STRH     r0,[r4,#0x1c]
|L45.36|
        AND      r0,r5,#4
        CBZ      r0,|L45.50|
        LDRH     r0,[r4,#0x1c]
        ORR      r0,r0,#4
        STRH     r0,[r4,#0x1c]
|L45.50|
        POP      {r4-r6,pc}
        ENDP

|L45.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L45.96|
        DCB      "tcd != NULL",0

        AREA ||i.EDMA_TcdReset||, CODE, READONLY, ALIGN=2

EDMA_TcdReset PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L46.8|
        B        |L46.20|
|L46.8|
        MOV      r2,#0x1a1
        ADR      r1,|L46.72|
        ADR      r0,|L46.116|
        BL       __aeabi_assert
|L46.20|
        AND      r0,r4,#0x1f
        CBNZ     r0,|L46.28|
        B        |L46.40|
|L46.28|
        MOV      r2,#0x1a2
        ADR      r1,|L46.72|
        ADR      r0,|L46.128|
        BL       __aeabi_assert
|L46.40|
        MOVS     r0,#0
        STR      r0,[r4,#0]
        STRH     r0,[r4,#4]
        STRH     r0,[r4,#6]
        STR      r0,[r4,#8]
        STR      r0,[r4,#0xc]
        STR      r0,[r4,#0x10]
        STRH     r0,[r4,#0x14]
        STRH     r0,[r4,#0x16]
        STR      r0,[r4,#0x18]
        MOVS     r0,#8
        STRH     r0,[r4,#0x1c]
        MOVS     r0,#0
        STRH     r0,[r4,#0x1e]
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L46.72|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L46.116|
        DCB      "tcd != NULL",0
|L46.128|
        DCB      "((uint32_t)tcd & 0x1FU) == 0U",0
        DCB      0
        DCB      0

        AREA ||i.EDMA_TcdSetChannelLink||, CODE, READONLY, ALIGN=2

EDMA_TcdSetChannelLink PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r6,r1
        MOV      r5,r2
        CBZ      r4,|L47.12|
        B        |L47.24|
|L47.12|
        MOV      r2,#0x21f
        ADR      r1,|L47.180|
        ADR      r0,|L47.224|
        BL       __aeabi_assert
|L47.24|
        AND      r0,r4,#0x1f
        CBNZ     r0,|L47.32|
        B        |L47.44|
|L47.32|
        MOV      r2,#0x220
        ADR      r1,|L47.180|
        ADR      r0,|L47.236|
        BL       __aeabi_assert
|L47.44|
        CMP      r5,#0x20
        BCS      |L47.50|
        B        |L47.62|
|L47.50|
        MOV      r2,#0x221
        ADR      r1,|L47.180|
        ADR      r0,|L47.268|
        BL       __aeabi_assert
|L47.62|
        CMP      r6,#1
        BNE      |L47.120|
        LDRH     r1,[r4,#0x16]
        ORR      r1,r1,#0x8000
        STRH     r1,[r4,#0x16]
        LDRH     r1,[r4,#0x1e]
        ORR      r1,r1,#0x8000
        STRH     r1,[r4,#0x1e]
        LDRH     r1,[r4,#0x16]
        BIC      r0,r1,#0x3e00
        MOV      r1,#0x3e00
        AND      r1,r1,r5,LSL #9
        ORRS     r0,r0,r1
        STRH     r0,[r4,#0x16]
        LDRH     r1,[r4,#0x1e]
        BIC      r0,r1,#0x3e00
        MOV      r1,#0x3e00
        AND      r1,r1,r5,LSL #9
        ORRS     r0,r0,r1
        STRH     r0,[r4,#0x1e]
        B        |L47.176|
|L47.120|
        CMP      r6,#2
        BNE      |L47.152|
        LDRH     r1,[r4,#0x1c]
        ORR      r1,r1,#0x20
        STRH     r1,[r4,#0x1c]
        LDRH     r1,[r4,#0x1c]
        BIC      r0,r1,#0x1f00
        MOV      r1,#0x1f00
        AND      r1,r1,r5,LSL #8
        ORRS     r1,r1,r0
        STRH     r1,[r4,#0x1c]
        B        |L47.176|
|L47.152|
        LDRH     r0,[r4,#0x16]
        BIC      r0,r0,#0x8000
        STRH     r0,[r4,#0x16]
        LDRH     r0,[r4,#0x1e]
        BIC      r0,r0,#0x8000
        STRH     r0,[r4,#0x1e]
        LDRH     r0,[r4,#0x1c]
        BIC      r0,r0,#0x20
        STRH     r0,[r4,#0x1c]
|L47.176|
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L47.180|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L47.224|
        DCB      "tcd != NULL",0
|L47.236|
        DCB      "((uint32_t)tcd & 0x1FU) == 0U",0
        DCB      0
        DCB      0
|L47.268|
        DCB      "linkedChannel < (uint32_t)FSL_FEATURE_EDMA_MODULE_CHANN"
        DCB      "EL",0
        DCB      0
        DCB      0

        AREA ||i.EDMA_TcdSetMinorOffsetConfig||, CODE, READONLY, ALIGN=2

EDMA_TcdSetMinorOffsetConfig PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBZ      r4,|L48.10|
        B        |L48.22|
|L48.10|
        MOV      r2,#0x201
        ADR      r1,|L48.88|
        ADR      r0,|L48.132|
        BL       __aeabi_assert
|L48.22|
        AND      r0,r4,#0x1f
        CBNZ     r0,|L48.30|
        B        |L48.42|
|L48.30|
        MOV      r2,#0x202
        ADR      r1,|L48.88|
        ADR      r0,|L48.144|
        BL       __aeabi_assert
|L48.42|
        LDR      r0,[r4,#8]
        UBFX     r6,r0,#0,#10
        LDRB     r0,[r5,#0]
        MOV      r1,#0x80000000
        AND      r0,r1,r0,LSL #31
        LDRB     r1,[r5,#1]
        MOV      r2,#0x40000000
        AND      r1,r2,r1,LSL #30
        ORRS     r0,r0,r1
        LDR      r2,|L48.176|
        LDR      r1,[r5,#4]
        AND      r1,r2,r1,LSL #10
        ORRS     r0,r0,r1
        ORRS     r6,r6,r0
        STR      r6,[r4,#8]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L48.88|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L48.132|
        DCB      "tcd != NULL",0
|L48.144|
        DCB      "((uint32_t)tcd & 0x1FU) == 0U",0
        DCB      0
        DCB      0
|L48.176|
        DCD      0x3ffffc00

        AREA ||i.EDMA_TcdSetModulo||, CODE, READONLY, ALIGN=2

EDMA_TcdSetModulo PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        CBZ      r4,|L49.14|
        B        |L49.26|
|L49.14|
        MOV      r2,#0x251
        ADR      r1,|L49.80|
        ADR      r0,|L49.124|
        BL       __aeabi_assert
|L49.26|
        AND      r0,r4,#0x1f
        CBNZ     r0,|L49.34|
        B        |L49.46|
|L49.34|
        MOV      r2,#0x252
        ADR      r1,|L49.80|
        ADR      r0,|L49.136|
        BL       __aeabi_assert
|L49.46|
        LDRH     r0,[r4,#6]
        MOV      r1,#0xf8f8
        BIC      r7,r0,r1
        MOVS     r0,#0xf8
        AND      r0,r0,r6,LSL #3
        ORRS     r0,r0,r7
        MOV      r1,#0xf800
        AND      r1,r1,r5,LSL #11
        ORRS     r0,r0,r1
        STRH     r0,[r4,#6]
        POP      {r4-r8,pc}
        ENDP

|L49.80|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L49.124|
        DCB      "tcd != NULL",0
|L49.136|
        DCB      "((uint32_t)tcd & 0x1FU) == 0U",0
        DCB      0
        DCB      0

        AREA ||i.EDMA_TcdSetTransferConfig||, CODE, READONLY, ALIGN=2

EDMA_TcdSetTransferConfig PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        CBZ      r4,|L50.12|
        B        |L50.24|
|L50.12|
        MOV      r2,#0x1d0
        ADR      r1,|L50.148|
        ADR      r0,|L50.192|
        BL       __aeabi_assert
|L50.24|
        AND      r0,r4,#0x1f
        CBNZ     r0,|L50.32|
        B        |L50.44|
|L50.32|
        MOV      r2,#0x1d1
        ADR      r1,|L50.148|
        ADR      r0,|L50.204|
        BL       __aeabi_assert
|L50.44|
        CBZ      r5,|L50.48|
        B        |L50.60|
|L50.48|
        MOV      r2,#0x1d2
        ADR      r1,|L50.148|
        ADR      r0,|L50.236|
        BL       __aeabi_assert
|L50.60|
        AND      r0,r6,#0x1f
        CBNZ     r0,|L50.68|
        B        |L50.80|
|L50.68|
        MOV      r2,#0x1d3
        ADR      r1,|L50.148|
        ADR      r0,|L50.252|
        BL       __aeabi_assert
|L50.80|
        LDR      r0,[r5,#0]
        STR      r0,[r4,#0]
        LDR      r0,[r5,#4]
        STR      r0,[r4,#0x10]
        LDRB     r0,[r5,#8]
        MOV      r1,#0x700
        AND      r0,r1,r0,LSL #8
        LDRB     r1,[r5,#9]
        AND      r1,r1,#7
        ORRS     r0,r0,r1
        STRH     r0,[r4,#6]
        LDRH     r0,[r5,#0xa]
        STRH     r0,[r4,#4]
        LDRH     r0,[r5,#0xc]
        STRH     r0,[r4,#0x14]
        LDR      r0,[r5,#0x10]
        STR      r0,[r4,#8]
        LDRH     r0,[r5,#0x14]
        STRH     r0,[r4,#0x16]
        LDRH     r0,[r5,#0x14]
        STRH     r0,[r4,#0x1e]
        CBZ      r6,|L50.144|
        STR      r6,[r4,#0x18]
        LDRH     r0,[r4,#0x1c]
        BIC      r0,r0,#8
        ORR      r0,r0,#0x10
        STRH     r0,[r4,#0x1c]
|L50.144|
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L50.148|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c",0
        DCB      0
        DCB      0
        DCB      0
|L50.192|
        DCB      "tcd != NULL",0
|L50.204|
        DCB      "((uint32_t)tcd & 0x1FU) == 0U",0
        DCB      0
        DCB      0
|L50.236|
        DCB      "config != NULL",0
        DCB      0
|L50.252|
        DCB      "((uint32_t)nextTcd & 0x1FU) == 0U",0
        DCB      0
        DCB      0

        AREA ||i.EnableGlobalIRQ||, CODE, READONLY, ALIGN=1

EnableGlobalIRQ PROC
        NOP      
        MSR      PRIMASK,r0
        NOP      
        BX       lr
        ENDP


        AREA ||i.Get_StartInstance||, CODE, READONLY, ALIGN=2

Get_StartInstance PROC
        PUSH     {r4,lr}
        LDR      r0,|L52.20|
        BL       EDMA_GetInstance
        LDR      r1,|L52.24|
        STRB     r0,[r1,#0]
        MOV      r0,r1
        LDRB     r0,[r0,#0]  ; StartInstanceNum
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L52.20|
        DCD      0x40008000
|L52.24|
        DCD      StartInstanceNum

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

s_EDMAHandle
        %        128

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

s_edmaBases
        DCD      0x40008000
s_edmaClockName
        DCD      0x10400001
s_edmaIRQNumber
        DCB      0x00,0x01,0x02,0x03
        DCB      0x04,0x05,0x06,0x07
        DCB      0x08,0x09,0x0a,0x0b
        DCB      0x0c,0x0d,0x0e,0x0f
        DCB      0x00,0x01,0x02,0x03
        DCB      0x04,0x05,0x06,0x07
        DCB      0x08,0x09,0x0a,0x0b
        DCB      0x0c,0x0d,0x0e,0x0f

        AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

        DCB      "(srcWidth == 1U) || (srcWidth == 2U) || (srcWidth == 4U"
        DCB      ") || (srcWidth == 8U) || (srcWidth == 16U) || (srcWidth"
        DCB      " == 32U)",0
        DCB      0
        DCB      "(destWidth == 1U) || (destWidth == 2U) || (destWidth =="
        DCB      " 4U) || (destWidth == 8U) || (destWidth == 16U) || (des"
        DCB      "tWidth == 32U)",0

        AREA ||.data||, DATA, ALIGN=0

StartInstanceNum
        DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_edma.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_edma_c_2fa7986f____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_fsl_edma_c_2fa7986f____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_edma_c_2fa7986f____REVSH|
#line 483
|__asm___10_fsl_edma_c_2fa7986f____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_edma_c_2fa7986f____RRX|
#line 670
|__asm___10_fsl_edma_c_2fa7986f____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT DMA0_DMA16_DriverIRQHandler [CODE]
        EXPORT DMA10_DMA26_DriverIRQHandler [CODE]
        EXPORT DMA11_DMA27_DriverIRQHandler [CODE]
        EXPORT DMA12_DMA28_DriverIRQHandler [CODE]
        EXPORT DMA13_DMA29_DriverIRQHandler [CODE]
        EXPORT DMA14_DMA30_DriverIRQHandler [CODE]
        EXPORT DMA15_DMA31_DriverIRQHandler [CODE]
        EXPORT DMA1_DMA17_DriverIRQHandler [CODE]
        EXPORT DMA2_DMA18_DriverIRQHandler [CODE]
        EXPORT DMA3_DMA19_DriverIRQHandler [CODE]
        EXPORT DMA4_DMA20_DriverIRQHandler [CODE]
        EXPORT DMA5_DMA21_DriverIRQHandler [CODE]
        EXPORT DMA6_DMA22_DriverIRQHandler [CODE]
        EXPORT DMA7_DMA23_DriverIRQHandler [CODE]
        EXPORT DMA8_DMA24_DriverIRQHandler [CODE]
        EXPORT DMA9_DMA25_DriverIRQHandler [CODE]
        EXPORT EDMA_AbortTransfer [CODE]
        EXPORT EDMA_ClearChannelStatusFlags [CODE]
        EXPORT EDMA_CreateHandle [CODE]
        EXPORT EDMA_Deinit [CODE]
        EXPORT EDMA_DisableChannelInterrupts [CODE]
        EXPORT EDMA_EnableChannelInterrupts [CODE]
        EXPORT EDMA_GetChannelStatusFlags [CODE]
        EXPORT EDMA_GetDefaultConfig [CODE]
        EXPORT EDMA_GetRemainingMajorLoopCount [CODE]
        EXPORT EDMA_HandleIRQ [CODE]
        EXPORT EDMA_Init [CODE]
        EXPORT EDMA_InstallTCD [CODE]
        EXPORT EDMA_InstallTCDMemory [CODE]
        EXPORT EDMA_PrepareTransfer [CODE]
        EXPORT EDMA_ResetChannel [CODE]
        EXPORT EDMA_SetBandWidth [CODE]
        EXPORT EDMA_SetCallback [CODE]
        EXPORT EDMA_SetChannelLink [CODE]
        EXPORT EDMA_SetChannelPreemptionConfig [CODE]
        EXPORT EDMA_SetMinorOffsetConfig [CODE]
        EXPORT EDMA_SetModulo [CODE]
        EXPORT EDMA_SetTransferConfig [CODE]
        EXPORT EDMA_StartTransfer [CODE]
        EXPORT EDMA_StopTransfer [CODE]
        EXPORT EDMA_SubmitTransfer [CODE]
        EXPORT EDMA_TcdDisableInterrupts [CODE]
        EXPORT EDMA_TcdEnableInterrupts [CODE]
        EXPORT EDMA_TcdReset [CODE]
        EXPORT EDMA_TcdSetChannelLink [CODE]
        EXPORT EDMA_TcdSetMinorOffsetConfig [CODE]
        EXPORT EDMA_TcdSetModulo [CODE]
        EXPORT EDMA_TcdSetTransferConfig [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_assert [CODE]
        IMPORT __aeabi_memclr4 [CODE]

        KEEP DisableGlobalIRQ
        KEEP EDMA_GetInstance
        KEEP EnableGlobalIRQ
        KEEP Get_StartInstance
        KEEP s_EDMAHandle
        KEEP s_edmaBases
        KEEP s_edmaClockName
        KEEP s_edmaIRQNumber
        KEEP StartInstanceNum

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
