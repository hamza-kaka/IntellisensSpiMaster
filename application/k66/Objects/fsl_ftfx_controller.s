; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_ftfx_controller.o --depend=.\objects\fsl_ftfx_controller.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_ftfx_controller.crf ..\..\devices\MK66F18\drivers\fsl_ftfx_controller.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.FTFx_API_Init||, CODE, READONLY, ALIGN=2

FTFx_API_Init PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        CBNZ     r4,|L1.10|
        MOVS     r0,#4
|L1.8|
        POP      {r4-r6,pc}
|L1.10|
        MOV      r0,#0x14000000
        STR      r0,[r4,#0x3c]
        MOV      r0,#0x1000
        STR      r0,[r4,#0x40]
        LDR      r0,[r4,#0x48]
        CBNZ     r0,|L1.30|
        LDR      r0,|L1.56|
        STR      r0,[r4,#0x48]
|L1.30|
        LDR      r0,[r4,#0x48]
        BL       ftfx_copy_run_command_to_ram
        MOV      r0,r4
        BL       ftfx_init_ifr
        MOV      r5,r0
        CBZ      r5,|L1.50|
        MOV      r0,r5
        B        |L1.8|
|L1.50|
        MOVS     r0,#0
        B        |L1.8|
        ENDP

        DCW      0x0000
|L1.56|
        DCD      s_ftfxRunCommand

        AREA ||i.FTFx_CMD_Erase||, CODE, READONLY, ALIGN=2

FTFx_CMD_Erase PROC
        PUSH     {r0-r12,lr}
        MOV      r6,r0
        MOV      r9,r2
        MOV      r10,r3
        MOVS     r0,#0x34
        LDRB     r3,[r0,r6]
        MOV      r2,r9
        MOV      r0,r6
        LDR      r1,[sp,#4]
        BL       ftfx_check_mem_range
        MOV      r8,r0
        CMP      r8,#0
        BEQ      |L2.40|
        MOV      r0,r8
|L2.34|
        ADD      sp,sp,#0x10
        POP      {r4-r12,pc}
|L2.40|
        MOV      r0,r10
        BL       ftfx_check_user_key
        MOV      r8,r0
        CMP      r8,#0
        BEQ      |L2.58|
        MOV      r0,r8
        B        |L2.34|
|L2.58|
        LDR      r5,[r6,#0x30]
        LDR      r4,[r6,#0x10]
        ADD      r0,r5,r9
        SUBS     r7,r0,#1
        UDIV     r0,r7,r4
        MLS      r0,r4,r0,r7
        CBZ      r0,|L2.92|
        UDIV     r0,r7,r4
        ADD      r11,r0,#1
        MUL      r0,r11,r4
        SUBS     r7,r0,#1
|L2.92|
        B        |L2.124|
|L2.94|
        BIC      r0,r5,#0xff000000
        ORR      r0,r0,#0x9000000
        LDR      r1,|L2.136|
        STR      r0,[r1,#4]
        MOV      r0,r6
        BL       ftfx_command_sequence
        MOV      r8,r0
        CMP      r8,#0
        BEQ      |L2.122|
        B        |L2.128|
|L2.122|
        ADD      r5,r5,r4
|L2.124|
        CMP      r5,r7
        BLS      |L2.94|
|L2.128|
        NOP      
        MOV      r0,r8
        B        |L2.34|
        ENDP

        DCW      0x0000
|L2.136|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_EraseAll||, CODE, READONLY, ALIGN=2

FTFx_CMD_EraseAll PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r6,r1
        CBNZ     r5,|L3.12|
        MOVS     r0,#4
|L3.10|
        POP      {r4-r6,pc}
|L3.12|
        MVN      r0,#0xbb000000
        LDR      r1,|L3.48|
        STR      r0,[r1,#4]
        MOV      r0,r6
        BL       ftfx_check_user_key
        MOV      r4,r0
        CBZ      r4,|L3.34|
        MOV      r0,r4
        B        |L3.10|
|L3.34|
        MOV      r0,r5
        BL       ftfx_command_sequence
        MOV      r4,r0
        MOV      r0,r4
        B        |L3.10|
        ENDP

        DCW      0x0000
|L3.48|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_EraseAllExecuteOnlySegments||, CODE, READONLY, ALIGN=2

FTFx_CMD_EraseAllExecuteOnlySegments PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r6,r1
        CBNZ     r5,|L4.12|
        MOVS     r0,#4
|L4.10|
        POP      {r4-r6,pc}
|L4.12|
        MVN      r0,#0xb4000000
        LDR      r1,|L4.48|
        STR      r0,[r1,#4]
        MOV      r0,r6
        BL       ftfx_check_user_key
        MOV      r4,r0
        CBZ      r4,|L4.34|
        MOV      r0,r4
        B        |L4.10|
|L4.34|
        MOV      r0,r5
        BL       ftfx_command_sequence
        MOV      r4,r0
        MOV      r0,r4
        B        |L4.10|
        ENDP

        DCW      0x0000
|L4.48|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_Program||, CODE, READONLY, ALIGN=2

FTFx_CMD_Program PROC
        PUSH     {r4-r12,lr}
        MOV      r8,r0
        MOV      r11,r1
        MOV      r4,r2
        MOV      r9,r3
        LDRB     r5,[r8,#0x39]
        CBNZ     r4,|L5.24|
        MOVS     r0,#4
|L5.20|
        POP      {r4-r12,pc}
|L5.24|
        MOV      r3,r5
        MOV      r2,r9
        MOV      r1,r11
        MOV      r0,r8
        BL       ftfx_check_mem_range
        MOV      r6,r0
        CBZ      r6,|L5.44|
        MOV      r0,r6
        B        |L5.20|
|L5.44|
        LDR      r7,[r8,#0x30]
        MOV      r10,r9
        B        |L5.124|
|L5.52|
        MOV      r0,r4
        BL       ftfx_read_word_from_byte_address
        LDR      r1,|L5.136|
        STR      r0,[r1,#8]
        ADDS     r4,r4,#4
        CMP      r5,#4
        BNE      |L5.80|
        BIC      r0,r7,#0xff000000
        ORR      r0,r0,#0x6000000
        STR      r0,[r1,#4]
        B        |L5.106|
|L5.80|
        CMP      r5,#8
        BNE      |L5.106|
        MOV      r0,r4
        BL       ftfx_read_word_from_byte_address
        LDR      r1,|L5.136|
        STR      r0,[r1,#0xc]
        ADDS     r4,r4,#4
        BIC      r0,r7,#0xff000000
        ORR      r0,r0,#0x7000000
        STR      r0,[r1,#4]
|L5.106|
        MOV      r0,r8
        BL       ftfx_command_sequence
        MOV      r6,r0
        CBZ      r6,|L5.118|
        B        |L5.130|
|L5.118|
        ADD      r7,r7,r5
        SUB      r10,r10,r5
|L5.124|
        CMP      r10,#0
        BNE      |L5.52|
|L5.130|
        NOP      
        MOV      r0,r6
        B        |L5.20|
        ENDP

|L5.136|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_ProgramOnce||, CODE, READONLY, ALIGN=2

FTFx_CMD_ProgramOnce PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r7,r3
        CBZ      r4,|L6.16|
        CBNZ     r6,|L6.22|
|L6.16|
        MOVS     r0,#4
|L6.18|
        POP      {r4-r8,pc}
|L6.22|
        UXTB     r0,r5
        MOV      r1,#0x43000000
        ORR      r0,r1,r0,LSL #16
        MOV      r1,#0xffff
        ADD      r0,r0,r1
        LDR      r1,|L6.136|
        STR      r0,[r1,#4]
        MOV      r0,r6
        BL       ftfx_read_word_from_byte_address
        LDR      r1,|L6.136|
        STR      r0,[r1,#8]
        LDRB     r0,[r4,#0x4c]
        UBFX     r0,r0,#1,#1
        CBZ      r0,|L6.124|
        LDRB     r0,[r4,#0x4c]
        AND      r0,r0,#1
        CBZ      r0,|L6.114|
        MOVS     r0,#0x60
        LDRH     r0,[r0,r4]
        CMP      r0,r5
        BEQ      |L6.98|
        MOVS     r0,#0x60
        LDRH     r0,[r0,r4]
        ADDS     r0,r0,#1
        CMP      r0,r5
        BHI      |L6.124|
        MOVS     r0,#0x60
        LDRH     r0,[r0,r4]
        CMP      r0,r5
        BCC      |L6.124|
|L6.98|
        CMP      r7,#8
        BNE      |L6.124|
        ADDS     r0,r6,#4
        BL       ftfx_read_word_from_byte_address
        LDR      r1,|L6.136|
        STR      r0,[r1,#0xc]
        B        |L6.124|
|L6.114|
        ADDS     r0,r6,#4
        BL       ftfx_read_word_from_byte_address
        LDR      r1,|L6.136|
        STR      r0,[r1,#0xc]
|L6.124|
        MOV      r0,r4
        BL       ftfx_command_sequence
        MOV      r8,r0
        MOV      r0,r8
        B        |L6.18|
        ENDP

|L6.136|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_ProgramSection||, CODE, READONLY, ALIGN=2

FTFx_CMD_ProgramSection PROC
        PUSH     {r0-r11,lr}
        SUB      sp,sp,#0x14
        MOV      r4,r0
        MOV      r6,r3
        LDRB     r0,[r4,#0x35]
        STR      r0,[sp,#0x10]
        LDR      r0,[sp,#0x1c]
        STR      r0,[sp,#0xc]
        LDR      r0,[sp,#0xc]
        CBNZ     r0,|L7.32|
        MOVS     r0,#4
|L7.26|
        ADD      sp,sp,#0x24
        POP      {r4-r11,pc}
|L7.32|
        MOV      r2,r6
        MOV      r0,r4
        LDR      r3,[sp,#0x10]
        LDR      r1,[sp,#0x18]
        BL       ftfx_check_mem_range
        MOV      r10,r0
        CMP      r10,#0
        BEQ      |L7.56|
        MOV      r0,r10
        B        |L7.26|
|L7.56|
        LDR      r5,[r4,#0x30]
        LDR      r11,[r4,#0x10]
        B        |L7.222|
|L7.64|
        ADD      r0,r5,r11
        SUBS     r0,r0,#1
        SUB      r1,r11,#1
        BICS     r0,r0,r1
        STR      r0,[sp,#8]
        MOV      r8,#0
        LDR      r0,[sp,#8]
        CMP      r0,r5
        BNE      |L7.94|
        LDR      r0,[sp,#8]
        ADD      r0,r0,r11
        STR      r0,[sp,#8]
|L7.94|
        ADDS     r1,r6,r5
        LDR      r0,[sp,#8]
        CMP      r1,r0
        BLS      |L7.108|
        LDR      r0,[sp,#8]
        SUBS     r7,r0,r5
        B        |L7.110|
|L7.108|
        MOV      r7,r6
|L7.110|
        B        |L7.204|
|L7.112|
        LDR      r0,[r4,#0x40]
        CMP      r0,r7
        BCS      |L7.124|
        LDR      r9,[r4,#0x40]
        B        |L7.126|
|L7.124|
        MOV      r9,r7
|L7.126|
        LDR      r2,[sp,#0xc]
        ADD      r1,r2,r8
        MOV      r2,r9
        LDR      r0,[r4,#0x3c]
        BL       __aeabi_memcpy
        ADD      r0,r5,r8
        BIC      r0,r0,#0xff000000
        ORR      r0,r0,#0xb000000
        LDR      r1,|L7.232|
        STR      r0,[r1,#4]
        LDR      r0,[sp,#0x10]
        UDIV     r0,r9,r0
        STR      r0,[sp,#4]
        MOV      r1,#0xffff
        LDR      r0,[sp,#4]
        ADD      r0,r1,r0,LSL #16
        LDR      r1,|L7.232|
        STR      r0,[r1,#8]
        MOV      r0,r4
        BL       ftfx_command_sequence
        MOV      r10,r0
        CMP      r10,#0
        BEQ      |L7.196|
        MOV      r0,r10
        B        |L7.26|
|L7.196|
        SUB      r7,r7,r9
        ADD      r8,r8,r9
        NOP      
|L7.204|
        CMP      r7,#0
        BNE      |L7.112|
        LDR      r0,[sp,#0xc]
        ADD      r0,r0,r8
        STR      r0,[sp,#0xc]
        ADD      r5,r5,r8
        SUB      r6,r6,r8
        NOP      
|L7.222|
        CMP      r6,#0
        BNE      |L7.64|
        MOV      r0,r10
        B        |L7.26|
        ENDP

        DCW      0x0000
|L7.232|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_ReadOnce||, CODE, READONLY, ALIGN=2

FTFx_CMD_ReadOnce PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r8,r3
        CBZ      r4,|L8.16|
        CBNZ     r6,|L8.22|
|L8.16|
        MOVS     r0,#4
|L8.18|
        POP      {r4-r8,pc}
|L8.22|
        UXTB     r0,r5
        MOV      r1,#0x41000000
        ORR      r0,r1,r0,LSL #16
        MOV      r1,#0xffff
        ADD      r0,r0,r1
        LDR      r1,|L8.140|
        STR      r0,[r1,#4]
        MOV      r0,r4
        BL       ftfx_command_sequence
        MOV      r7,r0
        CBNZ     r7,|L8.124|
        LDR      r0,|L8.140|
        LDR      r1,[r0,#8]
        MOV      r0,r6
        BL       ftfx_write_word_to_byte_address
        LDRB     r0,[r4,#0x4c]
        UBFX     r0,r0,#1,#1
        CBZ      r0,|L8.124|
        LDRB     r0,[r4,#0x4c]
        AND      r0,r0,#1
        CBZ      r0,|L8.126|
        MOVS     r0,#0x60
        LDRH     r0,[r0,r4]
        CMP      r0,r5
        BEQ      |L8.108|
        MOVS     r0,#0x60
        LDRH     r0,[r0,r4]
        ADDS     r0,r0,#1
        CMP      r0,r5
        BHI      |L8.136|
        MOVS     r0,#0x60
        LDRH     r0,[r0,r4]
        CMP      r0,r5
        BCC      |L8.136|
|L8.108|
        CMP      r8,#8
        BNE      |L8.136|
        LDR      r0,|L8.140|
        LDR      r1,[r0,#0xc]
        ADDS     r0,r6,#4
        BL       ftfx_write_word_to_byte_address
|L8.124|
        B        |L8.136|
|L8.126|
        LDR      r0,|L8.140|
        LDR      r1,[r0,#0xc]
        ADDS     r0,r6,#4
        BL       ftfx_write_word_to_byte_address
|L8.136|
        MOV      r0,r7
        B        |L8.18|
        ENDP

|L8.140|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_ReadResource||, CODE, READONLY, ALIGN=2

FTFx_CMD_ReadResource PROC
        PUSH     {r0-r11,lr}
        SUB      sp,sp,#4
        MOV      r6,r0
        MOV      r7,r2
        LDR      r8,[sp,#0x38]
        LDR      r9,[sp,#8]
        MOV      r10,r7
        LDR      r11,[sp,#0x10]
        CBZ      r6,|L9.28|
        CBNZ     r7,|L9.36|
|L9.28|
        MOVS     r0,#4
|L9.30|
        ADD      sp,sp,#0x14
        POP      {r4-r11,pc}
|L9.36|
        LDRB     r4,[r6,#0x36]
        MOV      r3,r4
        MOV      r2,r11
        MOV      r1,r9
        MOV      r0,r6
        STR      r8,[sp,#0]
        BL       ftfx_check_resource_range
        MOV      r5,r0
        CBZ      r5,|L9.64|
        MOV      r0,r5
        B        |L9.30|
|L9.64|
        B        |L9.160|
|L9.66|
        BIC      r0,r9,#0xff000000
        ORR      r0,r0,#0x3000000
        LDR      r1,|L9.172|
        STR      r0,[r1,#4]
        CMP      r4,#4
        BNE      |L9.94|
        MVN      r0,#0xff000000
        ORR      r0,r0,r8,LSL #24
        STR      r0,[r1,#0xc]
        B        |L9.110|
|L9.94|
        CMP      r4,#8
        BNE      |L9.110|
        MVN      r0,#0xff000000
        ORR      r0,r0,r8,LSL #24
        LDR      r1,|L9.172|
        STR      r0,[r1,#8]
|L9.110|
        MOV      r0,r6
        BL       ftfx_command_sequence
        MOV      r5,r0
        CBZ      r5,|L9.122|
        B        |L9.166|
|L9.122|
        LDR      r0,|L9.172|
        LDR      r1,[r0,#8]
        MOV      r0,r10
        BL       ftfx_write_word_to_byte_address
        ADD      r10,r10,#4
        CMP      r4,#8
        BNE      |L9.154|
        LDR      r0,|L9.172|
        LDR      r1,[r0,#0xc]
        MOV      r0,r10
        BL       ftfx_write_word_to_byte_address
        ADD      r10,r10,#4
|L9.154|
        ADD      r9,r9,r4
        SUB      r11,r11,r4
|L9.160|
        CMP      r11,#0
        BNE      |L9.66|
|L9.166|
        NOP      
        MOV      r0,r5
        B        |L9.30|
        ENDP

|L9.172|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_SecurityBypass||, CODE, READONLY, ALIGN=2

FTFx_CMD_SecurityBypass PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r5,|L10.12|
        CBNZ     r4,|L10.18|
|L10.12|
        MOVS     r0,#4
|L10.14|
        POP      {r4-r8,pc}
|L10.18|
        MOVS     r6,#0
        LDR      r0,|L10.100|
        LDRB     r7,[r0,#2]
        AND      r0,r7,#3
        CMP      r0,#2
        BEQ      |L10.96|
        MVN      r0,#0xba000000
        LDR      r1,|L10.100|
        STR      r0,[r1,#4]
        LDRB     r0,[r4,#0]
        LSLS     r1,r0,#24
        LDRB     r0,[r4,#1]
        ORR      r1,r1,r0,LSL #16
        LDRB     r0,[r4,#2]
        ORR      r0,r1,r0,LSL #8
        LDRB     r1,[r4,#3]
        ORRS     r0,r0,r1
        LDR      r1,|L10.100|
        STR      r0,[r1,#8]
        LDRB     r0,[r4,#4]
        LSLS     r1,r0,#24
        LDRB     r0,[r4,#5]
        ORR      r1,r1,r0,LSL #16
        LDRB     r0,[r4,#6]
        ORR      r0,r1,r0,LSL #8
        LDRB     r1,[r4,#7]
        ORRS     r0,r0,r1
        LDR      r1,|L10.100|
        STR      r0,[r1,#0xc]
        MOV      r0,r5
        BL       ftfx_command_sequence
        MOV      r6,r0
|L10.96|
        MOV      r0,r6
        B        |L10.14|
        ENDP

|L10.100|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_SwapControl||, CODE, READONLY, ALIGN=2

FTFx_CMD_SwapControl PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r7,r2
        MOV      r5,r3
        CBZ      r6,|L11.16|
        CBNZ     r5,|L11.22|
|L11.16|
        MOVS     r0,#4
|L11.18|
        POP      {r4-r8,pc}
|L11.22|
        AND      r0,r4,#0xf
        CBZ      r0,|L11.32|
        MOVS     r0,#0x65
        B        |L11.18|
|L11.32|
        LDR      r0,[r6,#0xc]
        CMP      r4,r0,LSR #1
        BCS      |L11.52|
        CMP      r4,#0x400
        BCC      |L11.56|
        CMP      r4,#0x410
        BCS      |L11.56|
|L11.52|
        MOVS     r0,#0x75
        B        |L11.18|
|L11.56|
        MOV      r0,r7
        BL       ftfx_check_swap_control_option
        MOV      r8,r0
        CMP      r8,#0
        BEQ      |L11.74|
        MOV      r0,r8
        B        |L11.18|
|L11.74|
        BIC      r0,r4,#0xff000000
        ORR      r0,r0,#0x46000000
        LDR      r1,|L11.128|
        STR      r0,[r1,#4]
        MVN      r0,#0xff000000
        ORR      r0,r0,r7,LSL #24
        STR      r0,[r1,#8]
        MOV      r0,r6
        BL       ftfx_command_sequence
        MOV      r8,r0
        LDR      r0,|L11.128|
        LDRB     r0,[r0,#0xa]
        STRB     r0,[r5,#0]
        LDR      r0,|L11.128|
        LDRB     r0,[r0,#9]
        STRB     r0,[r5,#1]
        LDR      r0,|L11.128|
        LDRB     r0,[r0,#8]
        STRB     r0,[r5,#2]
        MOV      r0,r8
        B        |L11.18|
        ENDP

        DCW      0x0000
|L11.128|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_VerifyErase||, CODE, READONLY, ALIGN=2

FTFx_CMD_VerifyErase PROC
        PUSH     {r0-r11,lr}
        SUB      sp,sp,#0xc
        MOV      r5,r0
        MOV      r11,r2
        LDRB     r0,[r5,#0x35]
        STR      r0,[sp,#8]
        MOV      r2,r11
        MOV      r0,r5
        LDR      r3,[sp,#8]
        LDR      r1,[sp,#0x10]
        BL       ftfx_check_mem_range
        MOV      r10,r0
        CMP      r10,#0
        BEQ      |L12.44|
        MOV      r0,r10
|L12.38|
        ADD      sp,sp,#0x1c
        POP      {r4-r11,pc}
|L12.44|
        LDR      r4,[r5,#0x30]
        LDR      r1,[r5,#0x14]
        LDR      r0,[r5,#0xc]
        UDIV     r6,r0,r1
        ADDS     r0,r4,r6
        SUBS     r0,r0,#1
        SUBS     r1,r6,#1
        BIC      r7,r0,r1
        CMP      r7,r4
        BNE      |L12.70|
        ADD      r7,r7,r6
|L12.70|
        MOV      r8,r11
        B        |L12.152|
|L12.74|
        SUB      r9,r7,r4
        CMP      r9,r8
        BLS      |L12.84|
        MOV      r9,r8
|L12.84|
        LDR      r0,[sp,#8]
        UDIV     r0,r9,r0
        STR      r0,[sp,#4]
        BIC      r0,r4,#0xff000000
        ORR      r0,r0,#0x1000000
        LDR      r1,|L12.164|
        STR      r0,[r1,#4]
        LDR      r0,[sp,#4]
        LSLS     r1,r0,#16
        LDR      r0,[sp,#0x18]
        UXTB     r0,r0
        ORR      r0,r1,r0,LSL #8
        ORR      r0,r0,#0xff
        LDR      r1,|L12.164|
        STR      r0,[r1,#8]
        MOV      r0,r5
        BL       ftfx_command_sequence
        MOV      r10,r0
        CMP      r10,#0
        BEQ      |L12.142|
        MOV      r0,r10
        B        |L12.38|
|L12.142|
        SUB      r8,r8,r9
        ADD      r4,r4,r9
        ADD      r7,r7,r6
        NOP      
|L12.152|
        CMP      r8,#0
        BNE      |L12.74|
        MOVS     r0,#0
        B        |L12.38|
        ENDP

        DCW      0x0000
|L12.164|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_VerifyEraseAll||, CODE, READONLY, ALIGN=2

FTFx_CMD_VerifyEraseAll PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBNZ     r4,|L13.12|
        MOVS     r0,#4
|L13.10|
        POP      {r4-r6,pc}
|L13.12|
        UXTB     r0,r5
        MOV      r1,#0x40000000
        ORR      r0,r1,r0,LSL #16
        MOV      r1,#0xffff
        ADD      r0,r0,r1
        LDR      r1,|L13.40|
        STR      r0,[r1,#4]
        MOV      r0,r4
        BL       ftfx_command_sequence
        B        |L13.10|
        ENDP

|L13.40|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_VerifyEraseAllExecuteOnlySegments||, CODE, READONLY, ALIGN=2

FTFx_CMD_VerifyEraseAllExecuteOnlySegments PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBNZ     r4,|L14.12|
        MOVS     r0,#4
|L14.10|
        POP      {r4-r6,pc}
|L14.12|
        UXTB     r0,r5
        MOV      r1,#0x4a000000
        ORR      r0,r1,r0,LSL #16
        MOV      r1,#0xffff
        ADD      r0,r0,r1
        LDR      r1,|L14.40|
        STR      r0,[r1,#4]
        MOV      r0,r4
        BL       ftfx_command_sequence
        B        |L14.10|
        ENDP

|L14.40|
        DCD      0x40020000

        AREA ||i.FTFx_CMD_VerifyProgram||, CODE, READONLY, ALIGN=2

FTFx_CMD_VerifyProgram PROC
        PUSH     {r0-r11,lr}
        SUB      sp,sp,#4
        MOV      r8,r0
        MOV      r9,r2
        MOV      r4,r3
        LDRD     r10,r11,[sp,#0x3c]
        LDRB     r6,[r8,#0x37]
        STR      r9,[sp,#0]
        CBNZ     r4,|L15.34|
        MOVS     r0,#4
|L15.28|
        ADD      sp,sp,#0x14
        POP      {r4-r11,pc}
|L15.34|
        MOV      r3,r6
        MOV      r2,r9
        MOV      r0,r8
        LDR      r1,[sp,#8]
        BL       ftfx_check_mem_range
        MOV      r5,r0
        CBZ      r5,|L15.54|
        MOV      r0,r5
        B        |L15.28|
|L15.54|
        LDR      r7,[r8,#0x30]
        B        |L15.140|
|L15.60|
        BIC      r0,r7,#0xff000000
        ORR      r0,r0,#0x2000000
        LDR      r1,|L15.152|
        STR      r0,[r1,#4]
        MVN      r1,#0xff000000
        LDR      r0,[sp,#0x38]
        ORR      r0,r1,r0,LSL #24
        LDR      r1,|L15.152|
        STR      r0,[r1,#8]
        MOV      r0,r4
        BL       ftfx_read_word_from_byte_address
        LDR      r1,|L15.152|
        STR      r0,[r1,#0xc]
        MOV      r0,r8
        BL       ftfx_command_sequence
        MOV      r5,r0
        CBZ      r5,|L15.130|
        CMP      r10,#0
        BEQ      |L15.116|
        STR      r7,[r10,#0]
|L15.116|
        CMP      r11,#0
        BEQ      |L15.128|
        MOVS     r0,#0
        STR      r0,[r11,#0]
|L15.128|
        B        |L15.146|
|L15.130|
        LDR      r0,[sp,#0]
        SUBS     r0,r0,r6
        STR      r0,[sp,#0]
        ADD      r4,r4,r6
        ADD      r7,r7,r6
|L15.140|
        LDR      r0,[sp,#0]
        CMP      r0,#0
        BNE      |L15.60|
|L15.146|
        NOP      
        MOV      r0,r5
        B        |L15.28|
        ENDP

|L15.152|
        DCD      0x40020000

        AREA ||i.FTFx_REG_GetSecurityState||, CODE, READONLY, ALIGN=2

FTFx_REG_GetSecurityState PROC
        MOV      r3,r0
        CBZ      r3,|L16.6|
        CBNZ     r1,|L16.10|
|L16.6|
        MOVS     r0,#4
|L16.8|
        BX       lr
|L16.10|
        LDR      r0,|L16.52|
        LDRB     r2,[r0,#2]
        AND      r0,r2,#3
        CMP      r0,#2
        BNE      |L16.28|
        LDR      r0,|L16.56|
        STR      r0,[r1,#0]
        B        |L16.46|
|L16.28|
        AND      r0,r2,#0xc0
        CMP      r0,#0x80
        BNE      |L16.42|
        LDR      r0,|L16.60|
        STR      r0,[r1,#0]
        B        |L16.46|
|L16.42|
        LDR      r0,|L16.64|
        STR      r0,[r1,#0]
|L16.46|
        MOVS     r0,#0
        B        |L16.8|
        ENDP

        DCW      0x0000
|L16.52|
        DCD      0x40020000
|L16.56|
        DCD      0xc33cc33c
|L16.60|
        DCD      0x5aa55aa5
|L16.64|
        DCD      0x5ac33ca5

        AREA ||i.ftfx_check_mem_range||, CODE, READONLY, ALIGN=1

ftfx_check_mem_range PROC
        PUSH     {r4,r5,lr}
        MOV      r4,r0
        CBNZ     r4,|L17.10|
        MOVS     r0,#4
|L17.8|
        POP      {r4,r5,pc}
|L17.10|
        SUBS     r0,r3,#1
        UXTB     r0,r0
        ANDS     r0,r0,r1
        CBNZ     r0,|L17.26|
        SUBS     r0,r3,#1
        UXTB     r0,r0
        ANDS     r0,r0,r2
        CBZ      r0,|L17.30|
|L17.26|
        MOVS     r0,#0x65
        B        |L17.8|
|L17.30|
        LDR      r0,[r4,#8]
        CMP      r0,r1
        BHI      |L17.52|
        LDRD     r0,r5,[r4,#8]
        ADD      r0,r0,r5
        ADDS     r5,r1,r2
        CMP      r0,r5
        BCC      |L17.52|
        MOVS     r0,#0
        B        |L17.8|
|L17.52|
        MOVS     r0,#0x66
        B        |L17.8|
        ENDP


        AREA ||i.ftfx_check_resource_range||, CODE, READONLY, ALIGN=1

ftfx_check_resource_range PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r0
        LDR      r6,[sp,#0x14]
        SUBS     r0,r3,#1
        ANDS     r0,r0,r1
        CBNZ     r0,|L18.18|
        SUBS     r0,r3,#1
        ANDS     r0,r0,r2
        CBZ      r0,|L18.22|
|L18.18|
        MOVS     r0,#0x65
|L18.20|
        POP      {r4-r7,pc}
|L18.22|
        MOVS     r7,#0
        ADDS     r0,r1,r2
        SUBS     r5,r0,#1
        CMP      r6,#1
        BNE      |L18.52|
        MOVS     r0,#0x50
        LDRB     r0,[r0,r4]
        CMP      r0,r1
        BNE      |L18.48|
        LDRB     r0,[r4,#0x51]
        CMP      r0,r2
        BEQ      |L18.100|
|L18.48|
        MOVS     r7,#4
        B        |L18.100|
|L18.52|
        CBNZ     r6,|L18.98|
        LDR      r0,[r4,#0x54]
        CMP      r0,r1
        BHI      |L18.74|
        LDRH     r0,[r4,#0x52]
        LDR      r12,[r4,#0x54]
        ADD      r0,r0,r12
        CMP      r0,r5
        BHI      |L18.100|
|L18.74|
        LDR      r0,[r4,#0x5c]
        CMP      r0,r1
        BHI      |L18.94|
        LDRH     r0,[r4,#0x52]
        LDR      r12,[r4,#0x5c]
        ADD      r0,r0,r12
        CMP      r0,r5
        BHI      |L18.100|
|L18.94|
        MOVS     r7,#4
        B        |L18.100|
|L18.98|
        MOVS     r7,#4
|L18.100|
        MOV      r0,r7
        B        |L18.20|
        ENDP


        AREA ||i.ftfx_check_swap_control_option||, CODE, READONLY, ALIGN=1

ftfx_check_swap_control_option PROC
        MOV      r1,r0
        CMP      r1,#1
        BEQ      |L19.22|
        CMP      r1,#2
        BEQ      |L19.22|
        CMP      r1,#4
        BEQ      |L19.22|
        CMP      r1,#8
        BEQ      |L19.22|
        CMP      r1,#0x10
        BNE      |L19.26|
|L19.22|
        MOVS     r0,#0
|L19.24|
        BX       lr
|L19.26|
        MOVS     r0,#4
        B        |L19.24|
        ENDP


        AREA ||i.ftfx_check_user_key||, CODE, READONLY, ALIGN=2

ftfx_check_user_key PROC
        MOV      r1,r0
        LDR      r0,|L20.16|
        CMP      r1,r0
        BEQ      |L20.12|
        MOVS     r0,#0x6b
|L20.10|
        BX       lr
|L20.12|
        MOVS     r0,#0
        B        |L20.10|
        ENDP

|L20.16|
        DCD      0x6b65666b

        AREA ||i.ftfx_command_sequence||, CODE, READONLY, ALIGN=2

ftfx_command_sequence PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r0,#0x70
        LDR      r1,|L21.56|
        STRB     r0,[r1,#0]
        LDR      r0,[r5,#0x48]
        ADDS     r6,r0,#1
        MOV      r0,r1
        BLX      r6
        LDR      r0,|L21.56|
        LDRB     r4,[r0,#0]
        AND      r0,r4,#0x20
        CBZ      r0,|L21.32|
        MOVS     r0,#0x67
|L21.30|
        POP      {r4-r6,pc}
|L21.32|
        AND      r0,r4,#0x10
        CBZ      r0,|L21.42|
        MOVS     r0,#0x68
        B        |L21.30|
|L21.42|
        AND      r0,r4,#1
        CBZ      r0,|L21.52|
        MOVS     r0,#0x69
        B        |L21.30|
|L21.52|
        MOVS     r0,#0
        B        |L21.30|
        ENDP

|L21.56|
        DCD      0x40020000

        AREA ||i.ftfx_copy_run_command_to_ram||, CODE, READONLY, ALIGN=2

ftfx_copy_run_command_to_ram PROC
        LDR      r1,|L22.16|
        LDR      r2,[r1,#0]  ; s_ftfxRunCommandFunctionCode
        STR      r2,[r0,#0]
        LDR      r2,[r1,#4]  ; s_ftfxRunCommandFunctionCode
        STR      r2,[r0,#4]
        LDR      r1,[r1,#8]  ; s_ftfxRunCommandFunctionCode
        STR      r1,[r0,#8]
        BX       lr
        ENDP

|L22.16|
        DCD      s_ftfxRunCommandFunctionCode

        AREA ||i.ftfx_init_ifr||, CODE, READONLY, ALIGN=1

ftfx_init_ifr PROC
        MOV      r1,r0
        CBNZ     r1,|L23.8|
        MOVS     r0,#4
|L23.6|
        BX       lr
|L23.8|
        LDR      r0,[r1,#0x4c]
        BIC      r0,r0,#1
        STR      r0,[r1,#0x4c]
        LDR      r0,[r1,#0x4c]
        BIC      r0,r0,#2
        ADDS     r0,r0,#2
        STR      r0,[r1,#0x4c]
        MOVS     r2,#0
        STR      r2,[r1,#0x54]
        MOVS     r2,#8
        STRB     r2,[r1,#0x51]
        MOVS     r0,#0x50
        STRB     r2,[r0,r1]
        LSLS     r2,r2,#7
        STRH     r2,[r1,#0x52]
        LSLS     r2,r2,#8
        STR      r2,[r1,#0x5c]
        MOVS     r0,#0
        B        |L23.6|
        ENDP


        AREA ||i.ftfx_read_word_from_byte_address||, CODE, READONLY, ALIGN=1

ftfx_read_word_from_byte_address PROC
        PUSH     {r4,r5,lr}
        MOV      r2,r0
        MOVS     r3,#0
        MOV      r1,r2
        AND      r0,r1,#3
        CBNZ     r0,|L24.18|
        LDR      r3,[r1,#0]
        B        |L24.38|
|L24.18|
        MOVS     r0,#0
        B        |L24.34|
|L24.22|
        LDRB     r4,[r1,#0]
        LSLS     r5,r0,#3
        LSLS     r4,r4,r5
        ORRS     r3,r3,r4
        ADDS     r1,r1,#1
        ADDS     r0,r0,#1
|L24.34|
        CMP      r0,#4
        BCC      |L24.22|
|L24.38|
        MOV      r0,r3
        POP      {r4,r5,pc}
        ENDP


        AREA ||i.ftfx_write_word_to_byte_address||, CODE, READONLY, ALIGN=1

ftfx_write_word_to_byte_address PROC
        PUSH     {r4,lr}
        MOV      r2,r0
        MOV      r0,r2
        AND      r3,r0,#3
        CBNZ     r3,|L25.16|
        STR      r1,[r0,#0]
        B        |L25.36|
|L25.16|
        MOVS     r3,#0
        B        |L25.32|
|L25.20|
        LSLS     r4,r3,#3
        LSR      r4,r1,r4
        STRB     r4,[r0,#0]
        ADDS     r0,r0,#1
        ADDS     r3,r3,#1
|L25.32|
        CMP      r3,#4
        BCC      |L25.20|
|L25.36|
        POP      {r4,pc}
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

s_ftfxRunCommand
        %        64

        AREA ||.constdata||, DATA, READONLY, ALIGN=1

s_ftfxRunCommandFunctionCode
        DCW      0x2180,0x7001
        DCW      0x7802,0x420a
        DCW      0xd0fc,0x4770

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_ftfx_controller.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_fsl_ftfx_controller_c_481d4dcc____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___21_fsl_ftfx_controller_c_481d4dcc____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_fsl_ftfx_controller_c_481d4dcc____REVSH|
#line 483
|__asm___21_fsl_ftfx_controller_c_481d4dcc____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_fsl_ftfx_controller_c_481d4dcc____RRX|
#line 670
|__asm___21_fsl_ftfx_controller_c_481d4dcc____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT FTFx_API_Init [CODE]
        EXPORT FTFx_CMD_Erase [CODE]
        EXPORT FTFx_CMD_EraseAll [CODE]
        EXPORT FTFx_CMD_EraseAllExecuteOnlySegments [CODE]
        EXPORT FTFx_CMD_Program [CODE]
        EXPORT FTFx_CMD_ProgramOnce [CODE]
        EXPORT FTFx_CMD_ProgramSection [CODE]
        EXPORT FTFx_CMD_ReadOnce [CODE]
        EXPORT FTFx_CMD_ReadResource [CODE]
        EXPORT FTFx_CMD_SecurityBypass [CODE]
        EXPORT FTFx_CMD_SwapControl [CODE]
        EXPORT FTFx_CMD_VerifyErase [CODE]
        EXPORT FTFx_CMD_VerifyEraseAll [CODE]
        EXPORT FTFx_CMD_VerifyEraseAllExecuteOnlySegments [CODE]
        EXPORT FTFx_CMD_VerifyProgram [CODE]
        EXPORT FTFx_REG_GetSecurityState [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_memcpy [CODE]

        KEEP ftfx_check_mem_range
        KEEP ftfx_check_resource_range
        KEEP ftfx_check_swap_control_option
        KEEP ftfx_check_user_key
        KEEP ftfx_command_sequence
        KEEP ftfx_copy_run_command_to_ram
        KEEP ftfx_init_ifr
        KEEP ftfx_read_word_from_byte_address
        KEEP ftfx_write_word_to_byte_address
        KEEP s_ftfxRunCommand
        KEEP s_ftfxRunCommandFunctionCode

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
