; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_cache.o --depend=.\objects\fsl_cache.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_cache.crf ..\..\devices\MK66F18\drivers\fsl_cache.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.L1CACHE_CleanCodeCache||, CODE, READONLY, ALIGN=2

L1CACHE_CleanCodeCache PROC
        LDR      r0,|L1.40|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0x8a000000
        LDR      r1,|L1.40|
        STR      r0,[r1,#0]
        NOP      
|L1.14|
        LDR      r0,|L1.40|
        LDR      r0,[r0,#0]
        AND      r0,r0,#0x80000000
        CMP      r0,#0
        BNE      |L1.14|
        LDR      r0,|L1.40|
        LDR      r0,[r0,#0]
        BIC      r0,r0,#0xa000000
        LDR      r1,|L1.40|
        STR      r0,[r1,#0]
        BX       lr
        ENDP

|L1.40|
        DCD      0xe0082000

        AREA ||i.L1CACHE_CleanCodeCacheByRange||, CODE, READONLY, ALIGN=2

L1CACHE_CleanCodeCacheByRange PROC
        PUSH     {r4-r6,lr}
        MOV      r2,r1
        ADDS     r3,r0,r2
        MOVS     r4,#0
        BIC      r1,r0,#0xf
        B        |L2.56|
|L2.14|
        LDR      r5,|L2.64|
        LDR      r5,[r5,#4]
        BIC      r5,r5,#0x3000000
        ORR      r4,r5,#0x6000000
        LDR      r5,|L2.64|
        STR      r4,[r5,#4]
        BIC      r5,r1,#3
        ADDS     r5,r5,#1
        LDR      r6,|L2.64|
        STR      r5,[r6,#8]
        NOP      
|L2.42|
        LDR      r5,|L2.64|
        LDR      r5,[r5,#8]
        AND      r5,r5,#1
        CMP      r5,#0
        BNE      |L2.42|
        ADDS     r1,r1,#0x10
|L2.56|
        CMP      r1,r3
        BCC      |L2.14|
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L2.64|
        DCD      0xe0082000

        AREA ||i.L1CACHE_CleanDCacheByRange||, CODE, READONLY, ALIGN=1

L1CACHE_CleanDCacheByRange PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r0
        MOV      r5,r1
        ADDS     r6,r4,r5
        MOV      r7,r5
        CMP      r6,#0x20000000
        BCS      |L3.26|
        MOV      r1,r7
        MOV      r0,r4
        BL       L1CACHE_CleanCodeCacheByRange
        B        |L3.46|
|L3.26|
        CMP      r4,#0x20000000
        BCS      |L3.46|
        MVN      r0,#0xe0000000
        SUBS     r7,r0,r4
        MOV      r1,r7
        MOV      r0,r4
        BL       L1CACHE_CleanCodeCacheByRange
|L3.46|
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.L1CACHE_CleanInvalidateCodeCache||, CODE, READONLY, ALIGN=2

L1CACHE_CleanInvalidateCodeCache PROC
        LDR      r0,|L4.40|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0x8f000000
        LDR      r1,|L4.40|
        STR      r0,[r1,#0]
        NOP      
|L4.14|
        LDR      r0,|L4.40|
        LDR      r0,[r0,#0]
        AND      r0,r0,#0x80000000
        CMP      r0,#0
        BNE      |L4.14|
        LDR      r0,|L4.40|
        LDR      r0,[r0,#0]
        BIC      r0,r0,#0xf000000
        LDR      r1,|L4.40|
        STR      r0,[r1,#0]
        BX       lr
        ENDP

|L4.40|
        DCD      0xe0082000

        AREA ||i.L1CACHE_CleanInvalidateCodeCacheByRange||, CODE, READONLY, ALIGN=2

L1CACHE_CleanInvalidateCodeCacheByRange PROC
        PUSH     {r4-r6,lr}
        MOV      r2,r1
        ADDS     r3,r0,r2
        MOVS     r4,#0
        BIC      r1,r0,#0xf
        B        |L5.52|
|L5.14|
        LDR      r5,|L5.60|
        LDR      r5,[r5,#4]
        ORR      r4,r5,#0x7000000
        LDR      r5,|L5.60|
        STR      r4,[r5,#4]
        BIC      r5,r1,#3
        ADDS     r5,r5,#1
        LDR      r6,|L5.60|
        STR      r5,[r6,#8]
        NOP      
|L5.38|
        LDR      r5,|L5.60|
        LDR      r5,[r5,#8]
        AND      r5,r5,#1
        CMP      r5,#0
        BNE      |L5.38|
        ADDS     r1,r1,#0x10
|L5.52|
        CMP      r1,r3
        BCC      |L5.14|
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L5.60|
        DCD      0xe0082000

        AREA ||i.L1CACHE_CleanInvalidateDCacheByRange||, CODE, READONLY, ALIGN=1

L1CACHE_CleanInvalidateDCacheByRange PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r0
        MOV      r5,r1
        ADDS     r6,r4,r5
        MOV      r7,r5
        CMP      r6,#0x20000000
        BCS      |L6.26|
        MOV      r1,r7
        MOV      r0,r4
        BL       L1CACHE_CleanInvalidateCodeCacheByRange
        B        |L6.46|
|L6.26|
        CMP      r4,#0x20000000
        BCS      |L6.46|
        MVN      r0,#0xe0000000
        SUBS     r7,r0,r4
        MOV      r1,r7
        MOV      r0,r4
        BL       L1CACHE_CleanInvalidateCodeCacheByRange
|L6.46|
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.L1CACHE_DisableCodeCache||, CODE, READONLY, ALIGN=2

L1CACHE_DisableCodeCache PROC
        PUSH     {lr}
        BL       L1CACHE_CleanCodeCache
        LDR      r0,|L7.20|
        LDR      r0,[r0,#0]
        BIC      r0,r0,#1
        LDR      r1,|L7.20|
        STR      r0,[r1,#0]
        POP      {pc}
        ENDP

|L7.20|
        DCD      0xe0082000

        AREA ||i.L1CACHE_EnableCodeCache||, CODE, READONLY, ALIGN=2

L1CACHE_EnableCodeCache PROC
        PUSH     {lr}
        BL       L1CACHE_InvalidateCodeCache
        LDR      r0,|L8.20|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#1
        LDR      r1,|L8.20|
        STR      r0,[r1,#0]
        POP      {pc}
        ENDP

|L8.20|
        DCD      0xe0082000

        AREA ||i.L1CACHE_InvalidateCodeCache||, CODE, READONLY, ALIGN=2

L1CACHE_InvalidateCodeCache PROC
        LDR      r0,|L9.40|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0x85000000
        LDR      r1,|L9.40|
        STR      r0,[r1,#0]
        NOP      
|L9.14|
        LDR      r0,|L9.40|
        LDR      r0,[r0,#0]
        AND      r0,r0,#0x80000000
        CMP      r0,#0
        BNE      |L9.14|
        LDR      r0,|L9.40|
        LDR      r0,[r0,#0]
        BIC      r0,r0,#0x5000000
        LDR      r1,|L9.40|
        STR      r0,[r1,#0]
        BX       lr
        ENDP

|L9.40|
        DCD      0xe0082000

        AREA ||i.L1CACHE_InvalidateCodeCacheByRange||, CODE, READONLY, ALIGN=2

L1CACHE_InvalidateCodeCacheByRange PROC
        PUSH     {r4-r6,lr}
        MOV      r2,r1
        ADDS     r3,r0,r2
        MOVS     r4,#0
        BIC      r1,r0,#0xf
        B        |L10.56|
|L10.14|
        LDR      r5,|L10.64|
        LDR      r5,[r5,#4]
        BIC      r5,r5,#0x3000000
        ORR      r4,r5,#0x5000000
        LDR      r5,|L10.64|
        STR      r4,[r5,#4]
        BIC      r5,r1,#3
        ADDS     r5,r5,#1
        LDR      r6,|L10.64|
        STR      r5,[r6,#8]
        NOP      
|L10.42|
        LDR      r5,|L10.64|
        LDR      r5,[r5,#8]
        AND      r5,r5,#1
        CMP      r5,#0
        BNE      |L10.42|
        ADDS     r1,r1,#0x10
|L10.56|
        CMP      r1,r3
        BCC      |L10.14|
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L10.64|
        DCD      0xe0082000

        AREA ||i.L1CACHE_InvalidateICacheByRange||, CODE, READONLY, ALIGN=1

L1CACHE_InvalidateICacheByRange PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r0
        MOV      r5,r1
        ADDS     r6,r4,r5
        MOV      r7,r5
        CMP      r6,#0x20000000
        BCS      |L11.26|
        MOV      r1,r7
        MOV      r0,r4
        BL       L1CACHE_InvalidateCodeCacheByRange
        B        |L11.46|
|L11.26|
        CMP      r4,#0x20000000
        BCS      |L11.46|
        MVN      r0,#0xe0000000
        SUBS     r7,r0,r4
        MOV      r1,r7
        MOV      r0,r4
        BL       L1CACHE_InvalidateCodeCacheByRange
|L11.46|
        POP      {r4-r7,pc}
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_cache.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_cache_c_79f048e6____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_fsl_cache_c_79f048e6____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_cache_c_79f048e6____REVSH|
#line 483
|__asm___11_fsl_cache_c_79f048e6____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_cache_c_79f048e6____RRX|
#line 670
|__asm___11_fsl_cache_c_79f048e6____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT L1CACHE_CleanCodeCache [CODE]
        EXPORT L1CACHE_CleanCodeCacheByRange [CODE]
        EXPORT L1CACHE_CleanDCacheByRange [CODE]
        EXPORT L1CACHE_CleanInvalidateCodeCache [CODE]
        EXPORT L1CACHE_CleanInvalidateCodeCacheByRange [CODE]
        EXPORT L1CACHE_CleanInvalidateDCacheByRange [CODE]
        EXPORT L1CACHE_DisableCodeCache [CODE]
        EXPORT L1CACHE_EnableCodeCache [CODE]
        EXPORT L1CACHE_InvalidateCodeCache [CODE]
        EXPORT L1CACHE_InvalidateCodeCacheByRange [CODE]
        EXPORT L1CACHE_InvalidateICacheByRange [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
