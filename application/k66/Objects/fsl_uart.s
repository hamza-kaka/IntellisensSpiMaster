; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_uart.o --depend=.\objects\fsl_uart.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_uart.crf ..\..\devices\MK66F18\drivers\fsl_uart.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.UART0_DriverIRQHandler||, CODE, READONLY, ALIGN=2

UART0_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.32|
        LDR      r1,[r0,#0]  ; s_uartHandle
        LDR      r0,|L1.36|
        LDR      r2,|L1.40|
        LDR      r2,[r2,#0]  ; s_uartIsr
        BLX      r2
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L1.32|
        DCD      s_uartHandle
|L1.36|
        DCD      0x4006a000
|L1.40|
        DCD      s_uartIsr

        AREA ||i.UART0_RX_TX_DriverIRQHandler||, CODE, READONLY, ALIGN=1

UART0_RX_TX_DriverIRQHandler PROC
        PUSH     {r4,lr}
        BL       UART0_DriverIRQHandler
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP


        AREA ||i.UART1_DriverIRQHandler||, CODE, READONLY, ALIGN=2

UART1_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L3.32|
        LDR      r1,[r0,#4]  ; s_uartHandle
        LDR      r0,|L3.36|
        LDR      r2,|L3.40|
        LDR      r2,[r2,#0]  ; s_uartIsr
        BLX      r2
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L3.32|
        DCD      s_uartHandle
|L3.36|
        DCD      0x4006b000
|L3.40|
        DCD      s_uartIsr

        AREA ||i.UART1_RX_TX_DriverIRQHandler||, CODE, READONLY, ALIGN=1

UART1_RX_TX_DriverIRQHandler PROC
        PUSH     {r4,lr}
        BL       UART1_DriverIRQHandler
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP


        AREA ||i.UART2_DriverIRQHandler||, CODE, READONLY, ALIGN=2

UART2_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L5.32|
        LDR      r1,[r0,#8]  ; s_uartHandle
        LDR      r0,|L5.36|
        LDR      r2,|L5.40|
        LDR      r2,[r2,#0]  ; s_uartIsr
        BLX      r2
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L5.32|
        DCD      s_uartHandle
|L5.36|
        DCD      0x4006c000
|L5.40|
        DCD      s_uartIsr

        AREA ||i.UART2_RX_TX_DriverIRQHandler||, CODE, READONLY, ALIGN=1

UART2_RX_TX_DriverIRQHandler PROC
        PUSH     {r4,lr}
        BL       UART2_DriverIRQHandler
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP


        AREA ||i.UART3_DriverIRQHandler||, CODE, READONLY, ALIGN=2

UART3_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L7.32|
        LDR      r1,[r0,#0xc]  ; s_uartHandle
        LDR      r0,|L7.36|
        LDR      r2,|L7.40|
        LDR      r2,[r2,#0]  ; s_uartIsr
        BLX      r2
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L7.32|
        DCD      s_uartHandle
|L7.36|
        DCD      0x4006d000
|L7.40|
        DCD      s_uartIsr

        AREA ||i.UART3_RX_TX_DriverIRQHandler||, CODE, READONLY, ALIGN=1

UART3_RX_TX_DriverIRQHandler PROC
        PUSH     {r4,lr}
        BL       UART3_DriverIRQHandler
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP


        AREA ||i.UART4_DriverIRQHandler||, CODE, READONLY, ALIGN=2

UART4_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L9.32|
        LDR      r1,[r0,#0x10]  ; s_uartHandle
        LDR      r0,|L9.36|
        LDR      r2,|L9.40|
        LDR      r2,[r2,#0]  ; s_uartIsr
        BLX      r2
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L9.32|
        DCD      s_uartHandle
|L9.36|
        DCD      0x400ea000
|L9.40|
        DCD      s_uartIsr

        AREA ||i.UART4_RX_TX_DriverIRQHandler||, CODE, READONLY, ALIGN=1

UART4_RX_TX_DriverIRQHandler PROC
        PUSH     {r4,lr}
        BL       UART4_DriverIRQHandler
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP


        AREA ||i.UART_ClearStatusFlags||, CODE, READONLY, ALIGN=1

UART_ClearStatusFlags PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r0
        MOV      r5,r1
        LDRB     r7,[r4,#5]
        BIC      r7,r7,#0xc0
        UBFX     r0,r5,#8,#8
        ORRS     r0,r0,r7
        STRB     r0,[r4,#5]
        LSRS     r0,r5,#24
        STRB     r0,[r4,#0x12]
        AND      r0,r5,#0x17
        CBZ      r0,|L11.34|
        LDRB     r0,[r4,#4]
        LDRB     r0,[r4,#7]
|L11.34|
        AND      r0,r5,#8
        CBZ      r0,|L11.52|
        LDRB     r0,[r4,#4]
        LDRB     r0,[r4,#7]
        LDRB     r0,[r4,#0x11]
        ORR      r0,r0,#0x40
        STRB     r0,[r4,#0x11]
|L11.52|
        MOV      r0,r4
        BL       UART_GetStatusFlags
        ANDS     r0,r0,r5
        CBZ      r0,|L11.68|
        MOV      r6,#0x3ee
        B        |L11.70|
|L11.68|
        MOVS     r6,#0
|L11.70|
        MOV      r0,r6
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.UART_Deinit||, CODE, READONLY, ALIGN=2

UART_Deinit PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        NOP      
|L12.6|
        LDRB     r0,[r4,#0x14]
        CMP      r0,#0
        BNE      |L12.6|
        NOP      
|L12.14|
        LDRB     r0,[r4,#4]
        AND      r0,r0,#0x40
        CMP      r0,#0
        BEQ      |L12.14|
        MOVS     r0,#0
        STRB     r0,[r4,#3]
        MOV      r0,r4
        BL       UART_GetInstance
        LDR      r1,|L12.60|
        LDR      r5,[r1,r0,LSL #2]
        LDR      r1,|L12.64|
        ADD      r0,r1,r5,LSR #16
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,r5
        BICS     r1,r1,r2
        STR      r1,[r0,#0]
        NOP      
        POP      {r4-r6,pc}
        ENDP

|L12.60|
        DCD      s_uartClock
|L12.64|
        DCD      0x40047000

        AREA ||i.UART_DisableInterrupts||, CODE, READONLY, ALIGN=2

UART_DisableInterrupts PROC
        LDR      r2,|L13.36|
        ANDS     r1,r1,r2
        LDRB     r2,[r0,#0]
        BICS     r2,r2,r1
        STRB     r2,[r0,#0]
        LDRB     r2,[r0,#3]
        BIC      r2,r2,r1,LSR #8
        STRB     r2,[r0,#3]
        LDRB     r2,[r0,#6]
        BIC      r2,r2,r1,LSR #16
        STRB     r2,[r0,#6]
        LDRB     r2,[r0,#0x11]
        BIC      r2,r2,r1,LSR #24
        STRB     r2,[r0,#0x11]
        BX       lr
        ENDP

|L13.36|
        DCD      0x070ff0c0

        AREA ||i.UART_EnableInterrupts||, CODE, READONLY, ALIGN=2

UART_EnableInterrupts PROC
        LDR      r2,|L14.36|
        ANDS     r1,r1,r2
        LDRB     r2,[r0,#0]
        ORRS     r2,r2,r1
        STRB     r2,[r0,#0]
        LDRB     r2,[r0,#3]
        ORR      r2,r2,r1,LSR #8
        STRB     r2,[r0,#3]
        LDRB     r2,[r0,#6]
        ORR      r2,r2,r1,LSR #16
        STRB     r2,[r0,#6]
        LDRB     r2,[r0,#0x11]
        ORR      r2,r2,r1,LSR #24
        STRB     r2,[r0,#0x11]
        BX       lr
        ENDP

|L14.36|
        DCD      0x070ff0c0

        AREA ||i.UART_GetDefaultConfig||, CODE, READONLY, ALIGN=2

UART_GetDefaultConfig PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L15.8|
        B        |L15.20|
|L15.8|
        MOV      r2,#0x18b
        ADR      r1,|L15.64|
        ADR      r0,|L15.108|
        BL       __aeabi_assert
|L15.20|
        MOVS     r0,#0
        STR      r0,[r4,#0]
        STR      r0,[r4,#4]
        STR      r0,[r4,#8]
        STR      r0,[r4,#0xc]
        MOV      r0,#0x1c200
        STR      r0,[r4,#0]
        MOVS     r0,#0
        STRB     r0,[r4,#4]
        STRB     r0,[r4,#5]
        STRB     r0,[r4,#6]
        MOVS     r0,#1
        STRB     r0,[r4,#7]
        MOVS     r0,#0
        STRB     r0,[r4,#8]
        STRB     r0,[r4,#9]
        STRB     r0,[r4,#0xa]
        STRB     r0,[r4,#0xb]
        STRB     r0,[r4,#0xc]
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L15.64|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L15.108|
        DCB      "config",0
        DCB      0

        AREA ||i.UART_GetEnabledInterrupts||, CODE, READONLY, ALIGN=2

UART_GetEnabledInterrupts PROC
        MOV      r1,r0
        LDRB     r0,[r1,#0]
        LDRB     r3,[r1,#3]
        ORR      r0,r0,r3,LSL #8
        LDRB     r3,[r1,#6]
        ORR      r2,r0,r3,LSL #16
        LDRB     r0,[r1,#0x11]
        ORR      r2,r2,r0,LSL #24
        LDR      r3,|L16.32|
        AND      r0,r2,r3
        BX       lr
        ENDP

        DCW      0x0000
|L16.32|
        DCD      0x070ff0c0

        AREA ||i.UART_GetInstance||, CODE, READONLY, ALIGN=2

UART_GetInstance PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r6,#5
        MOVS     r4,#0
        B        |L17.24|
|L17.10|
        LDR      r0,|L17.52|
        LDR      r0,[r0,r4,LSL #2]
        CMP      r0,r5
        BNE      |L17.22|
        B        |L17.28|
|L17.22|
        ADDS     r4,r4,#1
|L17.24|
        CMP      r4,r6
        BCC      |L17.10|
|L17.28|
        NOP      
        CMP      r4,r6
        BCS      |L17.36|
        B        |L17.46|
|L17.36|
        MOVS     r2,#0x8d
        ADR      r1,|L17.56|
        ADR      r0,|L17.100|
        BL       __aeabi_assert
|L17.46|
        MOV      r0,r4
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L17.52|
        DCD      s_uartBases
|L17.56|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L17.100|
        DCB      "instance < uartArrayCount",0
        DCB      0
        DCB      0

        AREA ||i.UART_GetStatusFlags||, CODE, READONLY, ALIGN=1

UART_GetStatusFlags PROC
        MOV      r1,r0
        LDRB     r2,[r1,#4]
        LDRB     r3,[r1,#5]
        ORR      r0,r2,r3,LSL #8
        LDRB     r2,[r1,#0xc]
        ORR      r0,r0,r2,LSL #16
        LDRB     r2,[r1,#0x12]
        ORR      r0,r0,r2,LSL #24
        BX       lr
        ENDP


        AREA ||i.UART_Init||, CODE, READONLY, ALIGN=2

UART_Init PROC
        PUSH     {r3-r11,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r8,r2
        CBZ      r5,|L19.14|
        B        |L19.24|
|L19.14|
        MOVS     r2,#0xd4
        ADR      r1,|L19.464|
        ADR      r0,|L19.508|
        BL       __aeabi_assert
|L19.24|
        LDR      r0,[r5,#0]
        CBZ      r0,|L19.30|
        B        |L19.40|
|L19.30|
        MOVS     r2,#0xd5
        ADR      r1,|L19.464|
        ADR      r0,|L19.516|
        BL       __aeabi_assert
|L19.40|
        LDR      r0,|L19.540|
        CMP      r4,r0
        BNE      |L19.50|
        MOVS     r0,#8
        B        |L19.94|
|L19.50|
        LDR      r0,|L19.544|
        CMP      r4,r0
        BNE      |L19.60|
        MOVS     r0,#8
        B        |L19.94|
|L19.60|
        LDR      r0,|L19.548|
        CMP      r4,r0
        BNE      |L19.70|
        MOVS     r0,#1
        B        |L19.94|
|L19.70|
        LDR      r0,|L19.552|
        CMP      r4,r0
        BNE      |L19.80|
        MOVS     r0,#1
        B        |L19.94|
|L19.80|
        LDR      r0,|L19.556|
        CMP      r4,r0
        BNE      |L19.90|
        MOVS     r0,#1
        B        |L19.94|
|L19.90|
        MOV      r0,#0xffffffff
|L19.94|
        LDRB     r1,[r5,#6]
        CMP      r0,r1
        BLT      |L19.102|
        B        |L19.112|
|L19.102|
        MOVS     r2,#0xd7
        ADR      r1,|L19.464|
        ADR      r0,|L19.560|
        BL       __aeabi_assert
|L19.112|
        LDR      r0,|L19.540|
        CMP      r4,r0
        BNE      |L19.122|
        MOVS     r0,#8
        B        |L19.166|
|L19.122|
        LDR      r0,|L19.544|
        CMP      r4,r0
        BNE      |L19.132|
        MOVS     r0,#8
        B        |L19.166|
|L19.132|
        LDR      r0,|L19.548|
        CMP      r4,r0
        BNE      |L19.142|
        MOVS     r0,#1
        B        |L19.166|
|L19.142|
        LDR      r0,|L19.552|
        CMP      r4,r0
        BNE      |L19.152|
        MOVS     r0,#1
        B        |L19.166|
|L19.152|
        LDR      r0,|L19.556|
        CMP      r4,r0
        BNE      |L19.162|
        MOVS     r0,#1
        B        |L19.166|
|L19.162|
        MOV      r0,#0xffffffff
|L19.166|
        LDRB     r1,[r5,#7]
        CMP      r0,r1
        BLT      |L19.174|
        B        |L19.184|
|L19.174|
        MOVS     r2,#0xd8
        ADR      r1,|L19.464|
        ADR      r0,|L19.624|
        BL       __aeabi_assert
|L19.184|
        MOVS     r7,#0
        MOVS     r6,#0
        MOVS     r0,#0
        STR      r0,[sp,#0]
        LDR      r0,[r5,#0]
        LSLS     r0,r0,#4
        UDIV     r0,r8,r0
        UXTH     r7,r0
        CBNZ     r7,|L19.206|
        MOVS     r7,#1
|L19.206|
        MOV      r9,#0
        LSL      r0,r8,#1
        LDR      r1,[r5,#0]
        UDIV     r0,r0,r1
        MOVS     r1,#0x20
        MLS      r0,r1,r7,r0
        UXTH     r10,r0
        LSL      r0,r8,#1
        ADD      r1,r10,r7,LSL #5
        UDIV     r9,r0,r1
        LDR      r0,[r5,#0]
        CMP      r0,r9
        BCS      |L19.256|
        LDR      r0,[r5,#0]
        SUB      r0,r9,r0
        B        |L19.262|
|L19.256|
        LDR      r0,[r5,#0]
        SUB      r0,r0,r9
|L19.262|
        STR      r0,[sp,#0]
        MOVS     r1,#0x64
        LDR      r0,[r5,#0]
        UDIV     r0,r0,r1
        ADD      r1,r0,r0,LSL #1
        LDR      r0,[sp,#0]
        CMP      r1,r0
        BCS      |L19.290|
        MOV      r0,#0x3f5
|L19.286|
        POP      {r3-r11,pc}
|L19.290|
        MOV      r0,r4
        BL       UART_GetInstance
        LDR      r1,|L19.688|
        LDR      r11,[r1,r0,LSL #2]
        LDR      r1,|L19.692|
        ADD      r0,r1,r11,LSR #16
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSL      r2,r2,r11
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        NOP      
        LDRB     r0,[r4,#3]
        BIC      r0,r0,#0xc
        STRB     r0,[r4,#3]
        LDRB     r0,[r4,#0]
        BIC      r0,r0,#0x1f
        ORR      r0,r0,r7,ASR #8
        STRB     r0,[r4,#0]
        STRB     r7,[r4,#1]
        LDRB     r0,[r4,#0xa]
        BFI      r0,r10,#0,#5
        STRB     r0,[r4,#0xa]
        LDRB     r0,[r4,#2]
        BIC      r6,r0,#0x17
        LDRB     r0,[r5,#0xa]
        MOVS     r1,#4
        AND      r0,r1,r0,LSL #2
        ORRS     r6,r6,r0
        LDRB     r0,[r5,#4]
        CBZ      r0,|L19.380|
        LDRB     r0,[r5,#4]
        ORR      r0,r0,#0x10
        ORRS     r6,r6,r0
|L19.380|
        STRB     r6,[r4,#2]
        LDRB     r1,[r5,#5]
        LDRB     r0,[r4,#0]
        BFI      r0,r1,#5,#1
        STRB     r0,[r4,#0]
        LDRB     r0,[r5,#6]
        STRB     r0,[r4,#0x13]
        LDRB     r0,[r5,#7]
        STRB     r0,[r4,#0x15]
        LDRB     r0,[r4,#0x10]
        ORR      r0,r0,#0x88
        STRB     r0,[r4,#0x10]
        LDRB     r0,[r4,#0x11]
        ORR      r0,r0,#0xc0
        STRB     r0,[r4,#0x11]
        LDRB     r0,[r5,#8]
        CBZ      r0,|L19.428|
        LDRB     r0,[r4,#0xd]
        ORR      r0,r0,#8
        STRB     r0,[r4,#0xd]
|L19.428|
        LDRB     r0,[r5,#9]
        CBZ      r0,|L19.440|
        LDRB     r0,[r4,#0xd]
        ORR      r0,r0,#1
        STRB     r0,[r4,#0xd]
|L19.440|
        LDRB     r6,[r4,#3]
        LDRB     r0,[r5,#0xb]
        CBZ      r0,|L19.450|
        ORR      r6,r6,#8
|L19.450|
        LDRB     r0,[r5,#0xc]
        CBZ      r0,|L19.458|
        ORR      r6,r6,#4
|L19.458|
        STRB     r6,[r4,#3]
        MOVS     r0,#0
        B        |L19.286|
        ENDP

|L19.464|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L19.508|
        DCB      "config",0
        DCB      0
|L19.516|
        DCB      "config->baudRate_Bps",0
        DCB      0
        DCB      0
        DCB      0
|L19.540|
        DCD      0x4006a000
|L19.544|
        DCD      0x4006b000
|L19.548|
        DCD      0x4006c000
|L19.552|
        DCD      0x4006d000
|L19.556|
        DCD      0x400ea000
|L19.560|
        DCB      "FSL_FEATURE_UART_FIFO_SIZEn(base) >= config->txFifoWate"
        DCB      "rmark",0
        DCB      0
        DCB      0
        DCB      0
|L19.624|
        DCB      "FSL_FEATURE_UART_FIFO_SIZEn(base) >= config->rxFifoWate"
        DCB      "rmark",0
        DCB      0
        DCB      0
        DCB      0
|L19.688|
        DCD      s_uartClock
|L19.692|
        DCD      0x40047000

        AREA ||i.UART_ReadBlocking||, CODE, READONLY, ALIGN=2

UART_ReadBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r7,r2
        CBZ      r5,|L20.14|
        B        |L20.26|
|L20.14|
        MOV      r2,#0x2ee
        ADR      r1,|L20.112|
        ADR      r0,|L20.156|
        BL       __aeabi_assert
|L20.26|
        B        |L20.100|
|L20.28|
        B        |L20.88|
|L20.30|
        MOV      r0,r6
        BL       UART_GetStatusFlags
        MOV      r4,r0
        AND      r0,r4,#8
        CBZ      r0,|L20.52|
        MOV      r0,#0x3f1
|L20.48|
        POP      {r4-r8,pc}
|L20.52|
        AND      r0,r4,#4
        CBZ      r0,|L20.64|
        MOV      r0,#0x3f2
        B        |L20.48|
|L20.64|
        AND      r0,r4,#2
        CBZ      r0,|L20.76|
        MOV      r0,#0x3f3
        B        |L20.48|
|L20.76|
        AND      r0,r4,#1
        CBZ      r0,|L20.88|
        MOV      r0,#0x3f4
        B        |L20.48|
|L20.88|
        LDRB     r0,[r6,#0x16]
        CMP      r0,#0
        BEQ      |L20.30|
        LDRB     r0,[r6,#7]
        STRB     r0,[r5],#1
|L20.100|
        SUBS     r0,r7,#0
        SUB      r7,r7,#1
        BNE      |L20.28|
        NOP      
        B        |L20.48|
        ENDP

|L20.112|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L20.156|
        DCB      "data",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.UART_ReadNonBlocking||, CODE, READONLY, ALIGN=2

UART_ReadNonBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r7,r2
        CBZ      r5,|L21.14|
        B        |L21.26|
|L21.14|
        MOV      r2,#0x318
        ADR      r1,|L21.44|
        ADR      r0,|L21.88|
        BL       __aeabi_assert
|L21.26|
        MOVS     r4,#0
        B        |L21.36|
|L21.30|
        LDRB     r0,[r6,#7]
        STRB     r0,[r5,r4]
        ADDS     r4,r4,#1
|L21.36|
        CMP      r4,r7
        BCC      |L21.30|
        POP      {r4-r8,pc}
        ENDP

|L21.44|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L21.88|
        DCB      "data",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.UART_SetBaudRate||, CODE, READONLY, ALIGN=2

UART_SetBaudRate PROC
        PUSH     {r4-r12,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r7,r2
        CBZ      r5,|L22.14|
        B        |L22.26|
|L22.14|
        MOV      r2,#0x1b3
        ADR      r1,|L22.152|
        ADR      r0,|L22.196|
        BL       __aeabi_assert
|L22.26|
        MOVS     r6,#0
        MOV      r10,r6
        LSLS     r0,r5,#4
        UDIV     r0,r7,r0
        UXTH     r6,r0
        CBNZ     r6,|L22.42|
        MOVS     r6,#1
|L22.42|
        MOV      r8,#0
        LSLS     r0,r7,#1
        UDIV     r0,r0,r5
        MOVS     r1,#0x20
        MLS      r0,r1,r6,r0
        UXTH     r9,r0
        LSLS     r0,r7,#1
        ADD      r1,r9,r6,LSL #5
        UDIV     r8,r0,r1
        CMP      r8,r5
        BLS      |L22.82|
        SUB      r0,r8,r5
        B        |L22.86|
|L22.82|
        SUB      r0,r5,r8
|L22.86|
        MOV      r10,r0
        MOVS     r0,#0x64
        UDIV     r0,r5,r0
        ADD      r0,r0,r0,LSL #1
        CMP      r0,r10
        BLS      |L22.146|
        LDRB     r11,[r4,#3]
        LDRB     r0,[r4,#3]
        BIC      r0,r0,#0xc
        STRB     r0,[r4,#3]
        LDRB     r0,[r4,#0]
        BIC      r0,r0,#0x1f
        ORR      r0,r0,r6,ASR #8
        STRB     r0,[r4,#0]
        STRB     r6,[r4,#1]
        LDRB     r0,[r4,#0xa]
        BFI      r0,r9,#0,#5
        STRB     r0,[r4,#0xa]
        STRB     r11,[r4,#3]
        MOVS     r0,#0
|L22.142|
        POP      {r4-r12,pc}
|L22.146|
        MOV      r0,#0x3f5
        B        |L22.142|
        ENDP

|L22.152|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L22.196|
        DCB      "baudRate_Bps",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.UART_TransferAbortReceive||, CODE, READONLY, ALIGN=2

UART_TransferAbortReceive PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L23.10|
        B        |L23.22|
|L23.10|
        MOV      r2,#0x491
        ADR      r1,|L23.68|
        ADR      r0,|L23.112|
        BL       __aeabi_assert
|L23.22|
        LDR      r0,[r4,#0x18]
        CBNZ     r0,|L23.54|
        MOV      r1,#0xa3000
        MOV      r0,r5
        BL       UART_DisableInterrupts
        LDRB     r0,[r5,#2]
        AND      r0,r0,#2
        CBZ      r0,|L23.54|
        MOV      r1,#0x10000
        MOV      r0,r5
        BL       UART_DisableInterrupts
|L23.54|
        MOVS     r0,#0
        STR      r0,[r4,#0x10]
        MOVS     r0,#2
        STRB     r0,[r4,#0x2d]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L23.68|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L23.112|
        DCB      "handle",0
        DCB      0

        AREA ||i.UART_TransferAbortSend||, CODE, READONLY, ALIGN=2

UART_TransferAbortSend PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L24.10|
        B        |L24.22|
|L24.10|
        MOV      r2,#0x3ce
        ADR      r1,|L24.44|
        ADR      r0,|L24.88|
        BL       __aeabi_assert
|L24.22|
        MOV      r1,#0xc000
        MOV      r0,r5
        BL       UART_DisableInterrupts
        MOVS     r0,#0
        STR      r0,[r4,#4]
        STRB     r0,[r4,#0x2c]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L24.44|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L24.88|
        DCB      "handle",0
        DCB      0

        AREA ||i.UART_TransferCreateHandle||, CODE, READONLY, ALIGN=2

UART_TransferCreateHandle PROC
        PUSH     {r4-r8,lr}
        MOV      r8,r0
        MOV      r4,r1
        MOV      r6,r2
        MOV      r7,r3
        CBZ      r4,|L25.16|
        B        |L25.28|
|L25.16|
        MOV      r2,#0x335
        ADR      r1,|L25.120|
        ADR      r0,|L25.164|
        BL       __aeabi_assert
|L25.28|
        MOVS     r1,#0x30
        MOV      r0,r4
        BL       __aeabi_memclr4
        MOVS     r0,#2
        STRB     r0,[r4,#0x2d]
        MOVS     r0,#0
        STRB     r0,[r4,#0x2c]
        STR      r6,[r4,#0x24]
        STR      r7,[r4,#0x28]
        MOV      r0,r8
        BL       UART_GetInstance
        MOV      r5,r0
        LDR      r1,|L25.172|
        STR      r4,[r1,r5,LSL #2]
        LDR      r0,|L25.176|
        LDR      r1,|L25.180|
        STR      r0,[r1,#0]  ; s_uartIsr
        LDR      r1,|L25.184|
        LDRSB    r0,[r1,r5]
        CMN      r0,#0x80
        BNE      |L25.84|
        B        |L25.114|
|L25.84|
        MOV      r1,r0
        CMP      r1,#0
        BLT      |L25.110|
        AND      r3,r1,#0x1f
        MOVS     r2,#1
        LSLS     r2,r2,r3
        LSRS     r3,r1,#5
        LSLS     r3,r3,#2
        ADD      r3,r3,#0xe000e000
        STR      r2,[r3,#0x100]
|L25.110|
        NOP      
        NOP      
|L25.114|
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L25.120|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L25.164|
        DCB      "handle",0
        DCB      0
|L25.172|
        DCD      s_uartHandle
|L25.176|
        DCD      UART_TransferHandleIRQ
|L25.180|
        DCD      s_uartIsr
|L25.184|
        DCD      s_uartIRQ

        AREA ||i.UART_TransferGetReceiveCount||, CODE, READONLY, ALIGN=2

UART_TransferGetReceiveCount PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CBZ      r4,|L26.12|
        B        |L26.24|
|L26.12|
        MOV      r2,#0x4b2
        ADR      r1,|L26.72|
        ADR      r0,|L26.116|
        BL       __aeabi_assert
|L26.24|
        CBZ      r5,|L26.28|
        B        |L26.40|
|L26.28|
        MOV      r2,#0x4b3
        ADR      r1,|L26.72|
        ADR      r0,|L26.124|
        BL       __aeabi_assert
|L26.40|
        LDRB     r0,[r4,#0x2d]
        CMP      r0,#2
        BNE      |L26.52|
        MOVS     r0,#6
|L26.50|
        POP      {r4-r6,pc}
|L26.52|
        CBNZ     r5,|L26.58|
        MOVS     r0,#4
        B        |L26.50|
|L26.58|
        LDRD     r1,r0,[r4,#0x10]
        SUBS     r0,r0,r1
        STR      r0,[r5,#0]
        MOVS     r0,#0
        B        |L26.50|
        ENDP

        DCW      0x0000
|L26.72|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L26.116|
        DCB      "handle",0
        DCB      0
|L26.124|
        DCB      "count",0
        DCB      0
        DCB      0

        AREA ||i.UART_TransferGetRxRingBufferLength||, CODE, READONLY, ALIGN=2

UART_TransferGetRxRingBufferLength PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        CBZ      r4,|L27.8|
        B        |L27.18|
|L27.8|
        MOVS     r2,#0x9a
        ADR      r1,|L27.48|
        ADR      r0,|L27.92|
        BL       __aeabi_assert
|L27.18|
        LDRH     r0,[r4,#0x22]
        LDRH     r1,[r4,#0x20]
        CMP      r0,r1
        BLE      |L27.38|
        LDRH     r0,[r4,#0x20]
        LDR      r1,[r4,#0x1c]
        ADD      r0,r0,r1
        LDRH     r1,[r4,#0x22]
        SUBS     r5,r0,r1
        B        |L27.44|
|L27.38|
        LDRH     r0,[r4,#0x20]
        LDRH     r1,[r4,#0x22]
        SUBS     r5,r0,r1
|L27.44|
        MOV      r0,r5
        POP      {r4-r6,pc}
        ENDP

|L27.48|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L27.92|
        DCB      "handle",0
        DCB      0

        AREA ||i.UART_TransferGetSendCount||, CODE, READONLY, ALIGN=2

UART_TransferGetSendCount PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CBZ      r4,|L28.12|
        B        |L28.24|
|L28.12|
        MOV      r2,#0x3e5
        ADR      r1,|L28.64|
        ADR      r0,|L28.108|
        BL       __aeabi_assert
|L28.24|
        CBZ      r5,|L28.28|
        B        |L28.40|
|L28.28|
        MOV      r2,#0x3e6
        ADR      r1,|L28.64|
        ADR      r0,|L28.116|
        BL       __aeabi_assert
|L28.40|
        LDRB     r0,[r4,#0x2c]
        CBNZ     r0,|L28.50|
        MOVS     r0,#6
|L28.48|
        POP      {r4-r6,pc}
|L28.50|
        LDRD     r1,r0,[r4,#4]
        SUBS     r0,r0,r1
        STR      r0,[r5,#0]
        MOVS     r0,#0
        B        |L28.48|
        ENDP

        DCW      0x0000
|L28.64|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L28.108|
        DCB      "handle",0
        DCB      0
|L28.116|
        DCB      "count",0
        DCB      0
        DCB      0

        AREA ||i.UART_TransferHandleErrorIRQ||, CODE, READONLY, ALIGN=1

UART_TransferHandleErrorIRQ PROC
        BX       lr
        ENDP


        AREA ||i.UART_TransferHandleIRQ||, CODE, READONLY, ALIGN=2

UART_TransferHandleIRQ PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L30.12|
        B        |L30.24|
|L30.12|
        MOV      r2,#0x4ce
        ADR      r1,|L30.828|
        ADR      r0,|L30.872|
        BL       __aeabi_assert
|L30.24|
        MOV      r0,r5
        BL       UART_GetStatusFlags
        MOV      r8,r0
        AND      r0,r8,#2
        CBZ      r0,|L30.88|
        B        |L30.42|
|L30.40|
        LDRB     r0,[r5,#7]
|L30.42|
        LDRB     r0,[r5,#4]
        AND      r0,r0,#0x20
        CMP      r0,#0
        BNE      |L30.40|
        LDRB     r0,[r5,#0x11]
        ORR      r0,r0,#0x40
        STRB     r0,[r5,#0x11]
        MOVS     r0,#4
        STRB     r0,[r4,#0x2d]
        MOVS     r0,#0
        STR      r0,[r4,#0x10]
        LDR      r0,[r4,#0x24]
        CBZ      r0,|L30.88|
        MOV      r2,#0x3f3
        MOV      r1,r4
        MOV      r0,r5
        LDRD     r12,r3,[r4,#0x24]
        BLX      r12
|L30.88|
        AND      r0,r8,#1
        CBZ      r0,|L30.144|
        B        |L30.98|
|L30.96|
        LDRB     r0,[r5,#7]
|L30.98|
        LDRB     r0,[r5,#4]
        AND      r0,r0,#0x20
        CMP      r0,#0
        BNE      |L30.96|
        LDRB     r0,[r5,#0x11]
        ORR      r0,r0,#0x40
        STRB     r0,[r5,#0x11]
        MOVS     r0,#5
        STRB     r0,[r4,#0x2d]
        MOVS     r0,#0
        STR      r0,[r4,#0x10]
        LDR      r0,[r4,#0x24]
        CBZ      r0,|L30.144|
        MOV      r2,#0x3f4
        MOV      r1,r4
        MOV      r0,r5
        LDRD     r12,r3,[r4,#0x24]
        BLX      r12
|L30.144|
        AND      r0,r8,#8
        CBZ      r0,|L30.190|
        B        |L30.154|
|L30.152|
        LDRB     r0,[r5,#7]
|L30.154|
        LDRB     r0,[r5,#4]
        AND      r0,r0,#0x20
        CMP      r0,#0
        BNE      |L30.152|
        LDRB     r0,[r5,#0x11]
        ORR      r0,r0,#0x40
        STRB     r0,[r5,#0x11]
        LDR      r0,[r4,#0x24]
        CBZ      r0,|L30.190|
        MOV      r2,#0x3f1
        MOV      r1,r4
        MOV      r0,r5
        LDRD     r12,r3,[r4,#0x24]
        BLX      r12
|L30.190|
        AND      r0,r8,#0x10
        CMP      r0,#0
        BEQ      |L30.374|
        LDRB     r0,[r5,#3]
        AND      r0,r0,#0x10
        CMP      r0,#0
        BEQ      |L30.374|
        LDRB     r6,[r5,#0x16]
        B        |L30.308|
|L30.212|
        LDR      r0,[r4,#0x10]
        CMP      r0,r6
        BCS      |L30.222|
        LDR      r0,[r4,#0x10]
        B        |L30.224|
|L30.222|
        MOV      r0,r6
|L30.224|
        UXTB     r7,r0
        LDR      r1,[r4,#0xc]
        MOV      r2,r7
        MOV      r0,r5
        BL       UART_ReadNonBlocking
        LDR      r0,[r4,#0xc]
        ADD      r0,r0,r7
        STR      r0,[r4,#0xc]
        LDR      r0,[r4,#0x10]
        SUBS     r0,r0,r7
        STR      r0,[r4,#0x10]
        SUBS     r0,r6,r7
        UXTB     r6,r0
        LDR      r0,[r4,#0x10]
        CBNZ     r0,|L30.308|
        MOVS     r0,#2
        STRB     r0,[r4,#0x2d]
        MOV      r1,#0xa2000
        MOV      r0,r5
        BL       UART_DisableInterrupts
        LDRB     r0,[r5,#2]
        AND      r0,r0,#2
        CBZ      r0,|L30.290|
        MOV      r1,#0x10000
        MOV      r0,r5
        BL       UART_DisableInterrupts
|L30.290|
        LDR      r0,[r4,#0x24]
        CBZ      r0,|L30.308|
        MOV      r2,#0x3eb
        MOV      r1,r4
        MOV      r0,r5
        LDRD     r12,r3,[r4,#0x24]
        BLX      r12
|L30.308|
        CBZ      r6,|L30.316|
        LDR      r0,[r4,#0x10]
        CMP      r0,#0
        BNE      |L30.212|
|L30.316|
        B        |L30.320|
|L30.318|
        LDRB     r0,[r5,#7]
|L30.320|
        LDRB     r0,[r5,#4]
        AND      r0,r0,#0x10
        CMP      r0,#0
        BNE      |L30.318|
        LDRB     r0,[r5,#0x11]
        ORR      r0,r0,#0x40
        STRB     r0,[r5,#0x11]
        LDR      r0,[r4,#0x10]
        CBNZ     r0,|L30.352|
        MOV      r1,#0x1000
        MOV      r0,r5
        BL       UART_DisableInterrupts
|L30.352|
        LDR      r0,[r4,#0x24]
        CBZ      r0,|L30.374|
        LDR      r0,[r4,#0x10]
        CBZ      r0,|L30.374|
        MOV      r2,#0x3f6
        MOV      r1,r4
        MOV      r0,r5
        LDRD     r12,r3,[r4,#0x24]
        BLX      r12
|L30.374|
        AND      r0,r8,#0x20
        CMP      r0,#0
        BEQ      |L30.610|
        LDRB     r0,[r5,#3]
        AND      r0,r0,#0x20
        CMP      r0,#0
        BEQ      |L30.610|
        LDRB     r6,[r5,#0x16]
        B        |L30.464|
|L30.396|
        LDR      r0,[r4,#0x10]
        CMP      r0,r6
        BCS      |L30.406|
        LDR      r0,[r4,#0x10]
        B        |L30.408|
|L30.406|
        MOV      r0,r6
|L30.408|
        UXTB     r7,r0
        LDR      r1,[r4,#0xc]
        MOV      r2,r7
        MOV      r0,r5
        BL       UART_ReadNonBlocking
        LDR      r0,[r4,#0xc]
        ADD      r0,r0,r7
        STR      r0,[r4,#0xc]
        LDR      r0,[r4,#0x10]
        SUBS     r0,r0,r7
        STR      r0,[r4,#0x10]
        SUBS     r0,r6,r7
        UXTB     r6,r0
        LDR      r0,[r4,#0x10]
        CBNZ     r0,|L30.464|
        MOVS     r0,#2
        STRB     r0,[r4,#0x2d]
        LDR      r0,[r4,#0x24]
        CBZ      r0,|L30.464|
        MOV      r2,#0x3eb
        MOV      r1,r4
        MOV      r0,r5
        LDRD     r12,r3,[r4,#0x24]
        BLX      r12
|L30.464|
        CBZ      r6,|L30.472|
        LDR      r0,[r4,#0x10]
        CMP      r0,#0
        BNE      |L30.396|
|L30.472|
        LDR      r0,[r4,#0x18]
        CBZ      r0,|L30.576|
        B        |L30.564|
|L30.478|
        MOV      r0,r4
        BL       UART_TransferIsRxRingBufferFull
        CBZ      r0,|L30.504|
        LDR      r0,[r4,#0x24]
        CBZ      r0,|L30.504|
        MOV      r2,#0x3f0
        MOV      r1,r4
        MOV      r0,r5
        LDRD     r12,r3,[r4,#0x24]
        BLX      r12
|L30.504|
        MOV      r0,r4
        BL       UART_TransferIsRxRingBufferFull
        CBZ      r0,|L30.534|
        LDRH     r0,[r4,#0x22]
        ADDS     r0,r0,#1
        LDR      r1,[r4,#0x1c]
        CMP      r0,r1
        BNE      |L30.528|
        MOVS     r0,#0
        STRH     r0,[r4,#0x22]
        B        |L30.534|
|L30.528|
        LDRH     r0,[r4,#0x22]
        ADDS     r0,r0,#1
        STRH     r0,[r4,#0x22]
|L30.534|
        LDRB     r0,[r5,#7]
        LDRH     r2,[r4,#0x20]
        LDR      r1,[r4,#0x18]
        STRB     r0,[r1,r2]
        LDRH     r0,[r4,#0x20]
        ADDS     r0,r0,#1
        LDR      r1,[r4,#0x1c]
        CMP      r0,r1
        BNE      |L30.558|
        MOVS     r0,#0
        STRH     r0,[r4,#0x20]
        B        |L30.564|
|L30.558|
        LDRH     r0,[r4,#0x20]
        ADDS     r0,r0,#1
        STRH     r0,[r4,#0x20]
|L30.564|
        SUBS     r0,r6,#0
        SUB      r1,r6,#1
        UXTB     r6,r1
        BNE      |L30.478|
        B        |L30.610|
|L30.576|
        B        |L30.578|
|L30.578|
        LDR      r0,[r4,#0x10]
        CBNZ     r0,|L30.610|
        MOV      r1,#0xa2000
        MOV      r0,r5
        BL       UART_DisableInterrupts
        LDRB     r0,[r5,#2]
        AND      r0,r0,#2
        CBZ      r0,|L30.610|
        MOV      r1,#0x10000
        MOV      r0,r5
        BL       UART_DisableInterrupts
|L30.610|
        LDRB     r0,[r4,#0x2d]
        CMP      r0,#4
        BEQ      |L30.626|
        LDRB     r0,[r4,#0x2d]
        CMP      r0,#5
        BNE      |L30.658|
|L30.626|
        LDR      r0,[r4,#0x18]
        CBNZ     r0,|L30.658|
        MOV      r1,#0xa3000
        MOV      r0,r5
        BL       UART_DisableInterrupts
        LDRB     r0,[r5,#2]
        AND      r0,r0,#2
        CBZ      r0,|L30.658|
        MOV      r1,#0x10000
        MOV      r0,r5
        BL       UART_DisableInterrupts
|L30.658|
        AND      r0,r8,#0x80
        CBZ      r0,|L30.788|
        LDRB     r0,[r5,#3]
        AND      r0,r0,#0x80
        CBZ      r0,|L30.788|
        LDR      r0,|L30.880|
        CMP      r5,r0
        BNE      |L30.682|
        MOVS     r0,#8
        B        |L30.726|
|L30.682|
        LDR      r0,|L30.884|
        CMP      r5,r0
        BNE      |L30.692|
        MOVS     r0,#8
        B        |L30.726|
|L30.692|
        LDR      r0,|L30.888|
        CMP      r5,r0
        BNE      |L30.702|
        MOVS     r0,#1
        B        |L30.726|
|L30.702|
        LDR      r0,|L30.892|
        CMP      r5,r0
        BNE      |L30.712|
        MOVS     r0,#1
        B        |L30.726|
|L30.712|
        LDR      r0,|L30.896|
        CMP      r5,r0
        BNE      |L30.722|
        MOVS     r0,#1
        B        |L30.726|
|L30.722|
        MOV      r0,#0xffffffff
|L30.726|
        LDRB     r1,[r5,#0x14]
        SUBS     r0,r0,r1
        UXTB     r6,r0
        B        |L30.814|
|L30.734|
        LDR      r0,[r4,#4]
        CMP      r0,r6
        BCS      |L30.744|
        LDR      r0,[r4,#4]
        B        |L30.746|
|L30.744|
        MOV      r0,r6
|L30.746|
        UXTB     r7,r0
        LDR      r1,[r4,#0]
        MOV      r2,r7
        MOV      r0,r5
        BL       UART_WriteNonBlocking
        LDR      r0,[r4,#0]
        ADD      r0,r0,r7
        STR      r0,[r4,#0]
        LDR      r0,[r4,#4]
        SUBS     r0,r0,r7
        STR      r0,[r4,#4]
        SUBS     r0,r6,r7
        UXTB     r6,r0
        LDR      r0,[r4,#4]
        CBNZ     r0,|L30.814|
        MOVS     r0,#0
        STRB     r0,[r4,#0x2c]
        LDRB     r0,[r5,#3]
        B        |L30.790|
|L30.788|
        B        |L30.822|
|L30.790|
        BIC      r0,r0,#0x80
        STRB     r0,[r5,#3]
        LDR      r0,[r4,#0x24]
        CBZ      r0,|L30.814|
        MOV      r2,#0x3ea
        MOV      r1,r4
        MOV      r0,r5
        LDRD     r12,r3,[r4,#0x24]
        BLX      r12
|L30.814|
        CBZ      r6,|L30.822|
        LDR      r0,[r4,#4]
        CMP      r0,#0
        BNE      |L30.734|
|L30.822|
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L30.828|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L30.872|
        DCB      "handle",0
        DCB      0
|L30.880|
        DCD      0x4006a000
|L30.884|
        DCD      0x4006b000
|L30.888|
        DCD      0x4006c000
|L30.892|
        DCD      0x4006d000
|L30.896|
        DCD      0x400ea000

        AREA ||i.UART_TransferIsRxRingBufferFull||, CODE, READONLY, ALIGN=2

UART_TransferIsRxRingBufferFull PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        CBZ      r4,|L31.8|
        B        |L31.18|
|L31.8|
        MOVS     r2,#0xac
        ADR      r1,|L31.44|
        ADR      r0,|L31.88|
        BL       __aeabi_assert
|L31.18|
        MOV      r0,r4
        BL       UART_TransferGetRxRingBufferLength
        LDR      r1,[r4,#0x1c]
        SUBS     r1,r1,#1
        CMP      r0,r1
        BNE      |L31.36|
        MOVS     r5,#1
        B        |L31.38|
|L31.36|
        MOVS     r5,#0
|L31.38|
        MOV      r0,r5
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L31.44|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L31.88|
        DCB      "handle",0
        DCB      0

        AREA ||i.UART_TransferReceiveNonBlocking||, CODE, READONLY, ALIGN=2

UART_TransferReceiveNonBlocking PROC
        PUSH     {r0-r12,lr}
        MOV      r4,r1
        MOV      r6,r2
        MOV      r9,r3
        CBZ      r4,|L32.14|
        B        |L32.26|
|L32.14|
        MOV      r2,#0x411
        ADR      r1,|L32.312|
        ADR      r0,|L32.356|
        BL       __aeabi_assert
|L32.26|
        CBZ      r6,|L32.30|
        B        |L32.42|
|L32.30|
        MOV      r2,#0x412
        ADR      r1,|L32.312|
        ADR      r0,|L32.364|
        BL       __aeabi_assert
|L32.42|
        LDR      r0,[r6,#0]
        CBZ      r0,|L32.48|
        B        |L32.60|
|L32.48|
        MOV      r2,#0x413
        ADR      r1,|L32.312|
        ADR      r0,|L32.372|
        BL       __aeabi_assert
|L32.60|
        LDR      r0,[r6,#4]
        CBZ      r0,|L32.66|
        B        |L32.78|
|L32.66|
        MOV      r2,#0x414
        ADR      r1,|L32.312|
        ADR      r0,|L32.384|
        BL       __aeabi_assert
|L32.78|
        MOVS     r7,#0
        LDRB     r0,[r4,#0x2d]
        CMP      r0,#3
        BNE      |L32.94|
        MOV      r11,#0x3e9
        B        |L32.302|
|L32.94|
        LDR      r5,[r6,#4]
        MOV      r8,#0
        LDR      r0,[r4,#0x18]
        CMP      r0,#0
        BEQ      |L32.242|
        MOV      r1,#0x2000
        LDR      r0,[sp,#0]
        BL       UART_DisableInterrupts
        MOV      r0,r4
        BL       UART_TransferGetRxRingBufferLength
        MOV      r7,r0
        CBZ      r7,|L32.192|
        CMP      r5,r7
        BCS      |L32.134|
        MOV      r0,r5
        B        |L32.136|
|L32.134|
        MOV      r0,r7
|L32.136|
        MOV      r7,r0
        SUBS     r5,r5,r7
        MOV      r10,#0
        B        |L32.188|
|L32.146|
        LDRH     r1,[r4,#0x22]
        LDR      r0,[r4,#0x18]
        LDRB     r2,[r0,r1]
        MOV      r0,r8
        ADD      r8,r8,#1
        LDR      r3,[r6,#0]
        STRB     r2,[r3,r0]
        LDRH     r0,[r4,#0x22]
        ADDS     r0,r0,#1
        LDR      r1,[r4,#0x1c]
        CMP      r0,r1
        BNE      |L32.178|
        MOVS     r0,#0
        STRH     r0,[r4,#0x22]
        B        |L32.184|
|L32.178|
        LDRH     r0,[r4,#0x22]
        ADDS     r0,r0,#1
        STRH     r0,[r4,#0x22]
|L32.184|
        ADD      r10,r10,#1
|L32.188|
        CMP      r10,r7
        BCC      |L32.146|
|L32.192|
        CBZ      r5,|L32.210|
        LDR      r0,[r6,#0]
        ADD      r0,r0,r8
        STR      r0,[r4,#0xc]
        STR      r5,[r4,#0x10]
        STR      r5,[r4,#0x14]
        MOVS     r0,#3
        STRB     r0,[r4,#0x2d]
|L32.210|
        MOV      r1,#0x2000
        LDR      r0,[sp,#0]
        BL       UART_EnableInterrupts
        CBNZ     r5,|L32.288|
        LDR      r0,[r4,#0x24]
        CBZ      r0,|L32.288|
        MOV      r2,#0x3eb
        MOV      r1,r4
        LDRD     r12,r3,[r4,#0x24]
        LDR      r0,[sp,#0]
        BLX      r12
        B        |L32.288|
|L32.242|
        LDR      r0,[r6,#0]
        ADD      r0,r0,r8
        STR      r0,[r4,#0xc]
        STR      r5,[r4,#0x10]
        STR      r5,[r4,#0x14]
        MOVS     r0,#3
        STRB     r0,[r4,#0x2d]
        MOV      r1,#0xa3000
        LDR      r0,[sp,#0]
        BL       UART_EnableInterrupts
        LDR      r0,[sp,#0]
        LDRB     r0,[r0,#2]
        AND      r0,r0,#2
        CBZ      r0,|L32.288|
        MOV      r1,#0x10000
        LDR      r0,[sp,#0]
        BL       UART_EnableInterrupts
|L32.288|
        CMP      r9,#0
        BEQ      |L32.298|
        STR      r8,[r9,#0]
|L32.298|
        MOV      r11,#0
|L32.302|
        MOV      r0,r11
        ADD      sp,sp,#0x10
        POP      {r4-r12,pc}
        ENDP

        DCW      0x0000
|L32.312|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L32.356|
        DCB      "handle",0
        DCB      0
|L32.364|
        DCB      "xfer",0
        DCB      0
        DCB      0
        DCB      0
|L32.372|
        DCB      "xfer->data",0
        DCB      0
|L32.384|
        DCB      "xfer->dataSize",0
        DCB      0

        AREA ||i.UART_TransferSendNonBlocking||, CODE, READONLY, ALIGN=2

UART_TransferSendNonBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        MOV      r4,r1
        MOV      r5,r2
        CBZ      r4,|L33.14|
        B        |L33.26|
|L33.14|
        MOV      r2,#0x3a7
        ADR      r1,|L33.128|
        ADR      r0,|L33.172|
        BL       __aeabi_assert
|L33.26|
        CBZ      r5,|L33.30|
        B        |L33.42|
|L33.30|
        MOV      r2,#0x3a8
        ADR      r1,|L33.128|
        ADR      r0,|L33.180|
        BL       __aeabi_assert
|L33.42|
        LDR      r0,[r5,#4]
        CBZ      r0,|L33.48|
        B        |L33.60|
|L33.48|
        MOV      r2,#0x3a9
        ADR      r1,|L33.128|
        ADR      r0,|L33.188|
        BL       __aeabi_assert
|L33.60|
        LDR      r0,[r5,#0]
        CBZ      r0,|L33.66|
        B        |L33.78|
|L33.66|
        MOV      r2,#0x3aa
        ADR      r1,|L33.128|
        ADR      r0,|L33.204|
        BL       __aeabi_assert
|L33.78|
        LDRB     r0,[r4,#0x2c]
        CMP      r0,#1
        BNE      |L33.92|
        MOV      r6,#0x3e8
        B        |L33.120|
|L33.92|
        LDR      r0,[r5,#0]
        STR      r0,[r4,#0]
        LDR      r0,[r5,#4]
        STR      r0,[r4,#4]
        LDR      r0,[r5,#4]
        STR      r0,[r4,#8]
        MOVS     r0,#1
        STRB     r0,[r4,#0x2c]
        LSLS     r1,r0,#15
        MOV      r0,r7
        BL       UART_EnableInterrupts
        MOVS     r6,#0
|L33.120|
        MOV      r0,r6
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L33.128|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L33.172|
        DCB      "handle",0
        DCB      0
|L33.180|
        DCB      "xfer",0
        DCB      0
        DCB      0
        DCB      0
|L33.188|
        DCB      "xfer->dataSize",0
        DCB      0
|L33.204|
        DCB      "xfer->data",0
        DCB      0

        AREA ||i.UART_TransferStartRingBuffer||, CODE, READONLY, ALIGN=2

UART_TransferStartRingBuffer PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        MOV      r7,r3
        CBZ      r4,|L34.16|
        B        |L34.28|
|L34.16|
        MOV      r2,#0x362
        ADR      r1,|L34.88|
        ADR      r0,|L34.132|
        BL       __aeabi_assert
|L34.28|
        CBZ      r5,|L34.32|
        B        |L34.44|
|L34.32|
        MOV      r2,#0x363
        ADR      r1,|L34.88|
        ADR      r0,|L34.140|
        BL       __aeabi_assert
|L34.44|
        STR      r5,[r4,#0x18]
        STR      r7,[r4,#0x1c]
        MOVS     r0,#0
        STRH     r0,[r4,#0x20]
        STRH     r0,[r4,#0x22]
        MOV      r1,#0xa2000
        MOV      r0,r6
        BL       UART_EnableInterrupts
        LDRB     r0,[r6,#2]
        AND      r0,r0,#2
        CBZ      r0,|L34.82|
        MOV      r1,#0x10000
        MOV      r0,r6
        BL       UART_EnableInterrupts
|L34.82|
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L34.88|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L34.132|
        DCB      "handle",0
        DCB      0
|L34.140|
        DCB      "ringBuffer",0
        DCB      0

        AREA ||i.UART_TransferStopRingBuffer||, CODE, READONLY, ALIGN=2

UART_TransferStopRingBuffer PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L35.10|
        B        |L35.22|
|L35.10|
        MOV      r2,#0x37f
        ADR      r1,|L35.72|
        ADR      r0,|L35.116|
        BL       __aeabi_assert
|L35.22|
        LDRB     r0,[r4,#0x2d]
        CMP      r0,#2
        BNE      |L35.58|
        MOV      r1,#0xa2000
        MOV      r0,r5
        BL       UART_DisableInterrupts
        LDRB     r0,[r5,#2]
        AND      r0,r0,#2
        CBZ      r0,|L35.58|
        MOV      r1,#0x10000
        MOV      r0,r5
        BL       UART_DisableInterrupts
|L35.58|
        MOVS     r0,#0
        STR      r0,[r4,#0x18]
        STR      r0,[r4,#0x1c]
        STRH     r0,[r4,#0x20]
        STRH     r0,[r4,#0x22]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L35.72|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L35.116|
        DCB      "handle",0
        DCB      0

        AREA ||i.UART_WriteBlocking||, CODE, READONLY, ALIGN=1

UART_WriteBlocking PROC
        PUSH     {r4,lr}
        B        |L36.22|
|L36.4|
        NOP      
|L36.6|
        LDRB     r3,[r0,#4]
        AND      r3,r3,#0x80
        CMP      r3,#0
        BEQ      |L36.6|
        LDRB     r3,[r1],#1
        STRB     r3,[r0,#7]
|L36.22|
        SUBS     r3,r2,#0
        SUB      r2,r2,#1
        BNE      |L36.4|
        POP      {r4,pc}
        ENDP


        AREA ||i.UART_WriteNonBlocking||, CODE, READONLY, ALIGN=2

UART_WriteNonBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r7,r2
        CBZ      r5,|L37.14|
        B        |L37.26|
|L37.14|
        MOV      r2,#0x2d1
        ADR      r1,|L37.44|
        ADR      r0,|L37.88|
        BL       __aeabi_assert
|L37.26|
        MOVS     r4,#0
        B        |L37.36|
|L37.30|
        LDRB     r0,[r5,r4]
        STRB     r0,[r6,#7]
        ADDS     r4,r4,#1
|L37.36|
        CMP      r4,r7
        BCC      |L37.30|
        POP      {r4-r8,pc}
        ENDP

|L37.44|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c",0
        DCB      0
        DCB      0
        DCB      0
|L37.88|
        DCB      "data",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

s_uartHandle
        %        20

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

s_uartBases
        DCD      0x4006a000
        DCD      0x4006b000
        DCD      0x4006c000
        DCD      0x4006d000
        DCD      0x400ea000
s_uartIRQ
        DCB      0x1f,0x21,0x23,0x25
        DCB      0x42,0x00,0x00,0x00
s_uartClock
        DCD      0x1034000a
        DCD      0x1034000b
        DCD      0x1034000c
        DCD      0x1034000d
        DCD      0x1028000a

        AREA ||.data||, DATA, ALIGN=2

s_uartIsr
        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_uart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_uart_c_d7943478____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_fsl_uart_c_d7943478____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_uart_c_d7943478____REVSH|
#line 483
|__asm___10_fsl_uart_c_d7943478____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_fsl_uart_c_d7943478____RRX|
#line 670
|__asm___10_fsl_uart_c_d7943478____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT UART0_DriverIRQHandler [CODE]
        EXPORT UART0_RX_TX_DriverIRQHandler [CODE]
        EXPORT UART1_DriverIRQHandler [CODE]
        EXPORT UART1_RX_TX_DriverIRQHandler [CODE]
        EXPORT UART2_DriverIRQHandler [CODE]
        EXPORT UART2_RX_TX_DriverIRQHandler [CODE]
        EXPORT UART3_DriverIRQHandler [CODE]
        EXPORT UART3_RX_TX_DriverIRQHandler [CODE]
        EXPORT UART4_DriverIRQHandler [CODE]
        EXPORT UART4_RX_TX_DriverIRQHandler [CODE]
        EXPORT UART_ClearStatusFlags [CODE]
        EXPORT UART_Deinit [CODE]
        EXPORT UART_DisableInterrupts [CODE]
        EXPORT UART_EnableInterrupts [CODE]
        EXPORT UART_GetDefaultConfig [CODE]
        EXPORT UART_GetEnabledInterrupts [CODE]
        EXPORT UART_GetInstance [CODE]
        EXPORT UART_GetStatusFlags [CODE]
        EXPORT UART_Init [CODE]
        EXPORT UART_ReadBlocking [CODE]
        EXPORT UART_SetBaudRate [CODE]
        EXPORT UART_TransferAbortReceive [CODE]
        EXPORT UART_TransferAbortSend [CODE]
        EXPORT UART_TransferCreateHandle [CODE]
        EXPORT UART_TransferGetReceiveCount [CODE]
        EXPORT UART_TransferGetRxRingBufferLength [CODE]
        EXPORT UART_TransferGetSendCount [CODE]
        EXPORT UART_TransferHandleErrorIRQ [CODE]
        EXPORT UART_TransferHandleIRQ [CODE]
        EXPORT UART_TransferReceiveNonBlocking [CODE]
        EXPORT UART_TransferSendNonBlocking [CODE]
        EXPORT UART_TransferStartRingBuffer [CODE]
        EXPORT UART_TransferStopRingBuffer [CODE]
        EXPORT UART_WriteBlocking [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_assert [CODE]
        IMPORT __aeabi_memclr4 [CODE]

        KEEP UART_ReadNonBlocking
        KEEP UART_TransferIsRxRingBufferFull
        KEEP UART_WriteNonBlocking
        KEEP s_uartHandle
        KEEP s_uartBases
        KEEP s_uartIRQ
        KEEP s_uartClock
        KEEP s_uartIsr

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
