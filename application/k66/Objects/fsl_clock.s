; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_clock.o --depend=.\objects\fsl_clock.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_clock.crf ..\..\devices\MK66F18\drivers\fsl_clock.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.CLOCK_BootToBlpeMode||, CODE, READONLY, ALIGN=2

CLOCK_BootToBlpeMode PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        MOV      r0,r4
        BL       CLOCK_SetExternalRefClkConfig
        LDR      r0,|L1.92|
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xc4
        ORR      r0,r0,#0x80
        LDR      r1,|L1.92|
        STRB     r0,[r1,#0]
        MOV      r0,r1
        LDRB     r0,[r0,#0xc]
        AND      r0,r0,#3
        CBNZ     r0,|L1.60|
        MOV      r0,r1
        LDRB     r0,[r0,#1]
        AND      r0,r0,#4
        CBZ      r0,|L1.60|
        NOP      
|L1.48|
        LDR      r0,|L1.92|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L1.48|
|L1.60|
        NOP      
|L1.62|
        LDR      r0,|L1.92|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#0x1c
        CMP      r0,#8
        BNE      |L1.62|
        LDR      r0,|L1.92|
        LDRB     r0,[r0,#1]
        ORR      r0,r0,#2
        LDR      r1,|L1.92|
        STRB     r0,[r1,#1]
        MOVS     r0,#0
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L1.92|
        DCD      0x40064000

        AREA ||i.CLOCK_BootToBlpiMode||, CODE, READONLY, ALIGN=2

CLOCK_BootToBlpiMode PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r6,r1
        MOV      r5,r2
        MOV      r2,r4
        MOV      r1,r6
        MOV      r0,r5
        BL       CLOCK_SetInternalRefClkConfig
        LDR      r0,|L2.64|
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xc0
        ORR      r0,r0,#0x40
        LDR      r1,|L2.64|
        STRB     r0,[r1,#0]
        NOP      
|L2.36|
        LDR      r0,|L2.64|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#1
        BNE      |L2.36|
        LDR      r0,|L2.64|
        LDRB     r0,[r0,#1]
        ORR      r0,r0,#2
        LDR      r1,|L2.64|
        STRB     r0,[r1,#1]
        MOVS     r0,#0
        POP      {r4-r6,pc}
        ENDP

|L2.64|
        DCD      0x40064000

        AREA ||i.CLOCK_BootToFeeMode||, CODE, READONLY, ALIGN=1

CLOCK_BootToFeeMode PROC
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        MOV      r4,r1
        MOV      r5,r2
        MOV      r6,r3
        LDR      r8,[sp,#0x18]
        MOV      r0,r7
        BL       CLOCK_SetExternalRefClkConfig
        MOV      r3,r8
        MOV      r2,r6
        MOV      r1,r5
        MOV      r0,r4
        BL       CLOCK_SetFeeMode
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.CLOCK_BootToFeiMode||, CODE, READONLY, ALIGN=1

CLOCK_BootToFeiMode PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r2,r6
        MOV      r1,r5
        MOV      r0,r4
        BL       CLOCK_SetFeiMode
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.CLOCK_BootToPeeMode||, CODE, READONLY, ALIGN=2

CLOCK_BootToPeeMode PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CMP      r4,#1
        BEQ      |L5.30|
        CBZ      r5,|L5.16|
        B        |L5.28|
|L5.16|
        MOV      r2,#0x988
        ADR      r1,|L5.76|
        ADR      r0,|L5.120|
        BL       __aeabi_assert
|L5.28|
        NOP      
|L5.30|
        MOV      r0,r6
        BL       CLOCK_SetExternalRefClkConfig
        MOV      r1,r5
        MOV      r0,r4
        BL       CLOCK_SetPbeMode
        LDR      r0,|L5.128|
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xc0
        LDR      r1,|L5.128|
        STRB     r0,[r1,#0]
        NOP      
|L5.58|
        LDR      r0,|L5.128|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#3
        BNE      |L5.58|
        MOVS     r0,#0
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L5.76|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L5.120|
        DCB      "config",0
        DCB      0
|L5.128|
        DCD      0x40064000

        AREA ||i.CLOCK_CalcPllDiv||, CODE, READONLY, ALIGN=2

CLOCK_CalcPllDiv PROC
        PUSH     {r3-r11,lr}
        MOV      r5,r0
        MOV      r4,r1
        MOV      r7,r2
        MOV      r12,r3
        MOVS     r3,#0
        MOV      r8,#0xffffffff
        LDR      r0,|L6.204|
        CMP      r5,r0
        BCC      |L6.30|
        LSLS     r0,r0,#4
        CMP      r5,r0
        BLS      |L6.36|
|L6.30|
        MOVS     r0,#0
|L6.32|
        POP      {r3-r11,pc}
|L6.36|
        LDR      r0,|L6.204|
        UDIV     r0,r5,r0
        UXTB     r2,r0
        STR      r2,[sp,#0]
        LDR      r0,|L6.208|
        ADD      r0,r0,r5
        SUBS     r0,r0,#1
        LDR      lr,|L6.208|
        UDIV     r0,r0,lr
        AND      r11,r0,#0xff
        LSLS     r4,r4,#1
        LDR      r2,[sp,#0]
        B        |L6.162|
|L6.70|
        UDIV     r6,r5,r2
        UDIV     r0,r4,r6
        UXTB     r1,r0
        CMP      r1,#0xf
        BCC      |L6.88|
        CMP      r1,#0x2f
        BLS      |L6.90|
|L6.88|
        B        |L6.158|
|L6.90|
        MUL      r3,r1,r6
        CMP      r1,#0x10
        BLT      |L6.132|
        CMP      r3,r4
        BNE      |L6.118|
        SUBS     r0,r2,#1
        STRB     r0,[r7,#0]
        SUB      r0,r1,#0x10
        STRB     r0,[r12,#0]
        LSRS     r0,r3,#1
        B        |L6.32|
|L6.118|
        SUBS     r0,r4,r3
        CMP      r0,r8
        BCS      |L6.132|
        SUB      r8,r4,r3
        MOV      r9,r2
        MOV      r10,r1
|L6.132|
        ADDS     r0,r1,#1
        UXTB     r1,r0
        CMP      r1,#0x2f
        BHI      |L6.156|
        ADD      r3,r3,r6
        SUBS     r0,r3,r4
        CMP      r0,r8
        BCS      |L6.156|
        SUB      r8,r3,r4
        MOV      r9,r2
        MOV      r10,r1
|L6.156|
        NOP      
|L6.158|
        SUBS     r0,r2,#1
        UXTB     r2,r0
|L6.162|
        CMP      r2,r11
        BGE      |L6.70|
        CMP      r8,#0xffffffff
        BEQ      |L6.198|
        SUB      r0,r9,#1
        STRB     r0,[r7,#0]
        SUB      r0,r10,#0x10
        STRB     r0,[r12,#0]
        UDIV     r0,r5,r9
        MUL      r3,r0,r10
        LSRS     r0,r3,#1
        B        |L6.32|
|L6.198|
        MOVS     r0,#0
        B        |L6.32|
        ENDP

        DCW      0x0000
|L6.204|
        DCD      0x007a1200
|L6.208|
        DCD      0x00f42400

        AREA ||i.CLOCK_ClearStatusFlags||, CODE, READONLY, ALIGN=2

CLOCK_ClearStatusFlags PROC
        AND      r2,r0,#1
        CBZ      r2,|L7.18|
        LDR      r2,|L7.56|
        LDRB     r2,[r2,#8]
        BIC      r2,r2,#0x20
        LDR      r3,|L7.56|
        STRB     r2,[r3,#8]
|L7.18|
        AND      r2,r0,#0x10
        CBZ      r2,|L7.30|
        LDR      r2,|L7.56|
        LDRB     r1,[r2,#0xd]
        STRB     r1,[r2,#0xd]
|L7.30|
        AND      r2,r0,#0x20
        CBZ      r2,|L7.42|
        MOVS     r2,#0x80
        LDR      r3,|L7.56|
        STRB     r2,[r3,#6]
|L7.42|
        AND      r2,r0,#0x200
        CBZ      r2,|L7.54|
        LDR      r2,|L7.56|
        LDRB     r1,[r2,#0xe]
        STRB     r1,[r2,#0xe]
|L7.54|
        BX       lr
        ENDP

|L7.56|
        DCD      0x40064000

        AREA ||i.CLOCK_DeinitOsc0||, CODE, READONLY, ALIGN=2

CLOCK_DeinitOsc0 PROC
        MOVS     r0,#0
        LDR      r1,|L8.20|
        STRB     r0,[r1,#0]
        LDR      r0,|L8.24|
        LDRB     r0,[r0,#1]
        BIC      r0,r0,#0x3c
        LDR      r1,|L8.24|
        STRB     r0,[r1,#1]
        BX       lr
        ENDP

|L8.20|
        DCD      0x40065000
|L8.24|
        DCD      0x40064000

        AREA ||i.CLOCK_DisableUsbhs0Clock||, CODE, READONLY, ALIGN=2

CLOCK_DisableUsbhs0Clock PROC
        LDR      r0,|L9.32|
        LDR      r0,[r0,#0]
        BIC      r0,r0,#0x40
        LDR      r1,|L9.32|
        SUBS     r1,r1,#0xa0
        STR      r0,[r1,#0xa0]
        LDR      r0,|L9.36|
        LDR      r0,[r0,#0x30]
        BIC      r0,r0,#2
        LDR      r1,|L9.36|
        STR      r0,[r1,#0x30]
        BX       lr
        ENDP

        DCW      0x0000
|L9.32|
        DCD      0x400a20a0
|L9.36|
        DCD      0x40048000

        AREA ||i.CLOCK_DisableUsbhs0PfdClock||, CODE, READONLY, ALIGN=2

CLOCK_DisableUsbhs0PfdClock PROC
        LDR      r0,|L10.24|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#2
        LDR      r1,|L10.28|
        STR      r0,[r1,#0x100]
        MOVS     r0,#0
        LDR      r1,|L10.32|
        STR      r0,[r1,#0]  ; s_extPllFreq
        BX       lr
        ENDP

        DCW      0x0000
|L10.24|
        DCD      0x400a2100
|L10.28|
        DCD      0x400a2000
|L10.32|
        DCD      s_extPllFreq

        AREA ||i.CLOCK_DisableUsbhs0PhyPllClock||, CODE, READONLY, ALIGN=2

CLOCK_DisableUsbhs0PhyPllClock PROC
        LDR      r0,|L11.52|
        LDR      r0,[r0,#0x30]
        ORR      r0,r0,#0x40000000
        LDR      r1,|L11.52|
        STR      r0,[r1,#0x30]
        LDR      r0,|L11.52|
        ADDS     r0,r0,#0xa0
        LDR      r0,[r0,#0]
        BIC      r0,r0,#0x1000
        STR      r0,[r1,#0xa0]
        LDR      r0,|L11.56|
        LDR      r0,[r0,#4]
        BIC      r0,r0,#2
        LDR      r1,|L11.56|
        STR      r0,[r1,#4]
        MOV      r0,r1
        LDR      r0,[r0,#0x30]
        BIC      r0,r0,#4
        STR      r0,[r1,#0x30]
        BX       lr
        ENDP

        DCW      0x0000
|L11.52|
        DCD      0x400a2000
|L11.56|
        DCD      0x40048000

        AREA ||i.CLOCK_EnablePll0||, CODE, READONLY, ALIGN=2

CLOCK_EnablePll0 PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        CBZ      r4,|L12.8|
        B        |L12.20|
|L12.8|
        MOV      r2,#0x4d7
        ADR      r1,|L12.80|
        ADR      r0,|L12.124|
        BL       __aeabi_assert
|L12.20|
        MOVS     r5,#0
        LDRB     r0,[r4,#1]
        AND      r0,r0,#7
        ORRS     r5,r5,r0
        LDR      r0,|L12.132|
        STRB     r5,[r0,#4]
        LDRB     r1,[r4,#2]
        LDRB     r0,[r0,#5]
        BFI      r0,r1,#0,#5
        LDR      r1,|L12.132|
        STRB     r0,[r1,#5]
        MOV      r0,r1
        LDRB     r0,[r0,#4]
        LDRB     r1,[r4,#0]
        ORR      r1,r1,#0x40
        ORRS     r0,r0,r1
        LDR      r1,|L12.132|
        STRB     r0,[r1,#4]
        NOP      
|L12.64|
        LDR      r0,|L12.132|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#0x40
        CMP      r0,#0
        BEQ      |L12.64|
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L12.80|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L12.124|
        DCB      "config",0
        DCB      0
|L12.132|
        DCD      0x40064000

        AREA ||i.CLOCK_EnableUsbfs0Clock||, CODE, READONLY, ALIGN=2

CLOCK_EnableUsbfs0Clock PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CMP      r4,#0x60000
        BEQ      |L13.14|
        B        |L13.26|
|L13.14|
        MOV      r2,#0x256
        ADR      r1,|L13.188|
        ADR      r0,|L13.232|
        BL       __aeabi_assert
|L13.26|
        MOVS     r6,#1
        LDR      r0,|L13.260|
        LDR      r2,|L13.264|
        ADD      r1,r2,r0,LSR #16
        LDR      r2,[r1,#0]
        MOVS     r3,#1
        LSLS     r3,r3,r0
        BICS     r2,r2,r3
        STR      r2,[r1,#0]
        NOP      
        CBNZ     r4,|L13.64|
        LDR      r0,|L13.268|
        LDR      r0,[r0,#4]
        BIC      r0,r0,#0x40000
        LDR      r1,|L13.268|
        STR      r0,[r1,#4]
        B        |L13.136|
|L13.64|
        LDR      r0,|L13.272|
        ADD      r0,r0,r5
        CBZ      r0,|L13.108|
        LDR      r1,|L13.276|
        ADD      r0,r0,r1
        CBZ      r0,|L13.100|
        ADD      r0,r0,r1
        CBZ      r0,|L13.92|
        ADD      r0,r0,r1
        CBNZ     r0,|L13.116|
        MOVS     r0,#9
        LDR      r1,|L13.268|
        STR      r0,[r1,#0x48]
        B        |L13.120|
|L13.92|
        MOVS     r0,#2
        LDR      r1,|L13.268|
        STR      r0,[r1,#0x48]
        B        |L13.120|
|L13.100|
        MOVS     r0,#5
        LDR      r1,|L13.268|
        STR      r0,[r1,#0x48]
        B        |L13.120|
|L13.108|
        MOVS     r0,#0
        LDR      r1,|L13.268|
        STR      r0,[r1,#0x48]
        B        |L13.120|
|L13.116|
        MOVS     r6,#0
        NOP      
|L13.120|
        NOP      
        LDR      r0,|L13.268|
        LDR      r0,[r0,#4]
        BIC      r0,r0,#0x70000
        ORRS     r0,r0,r4
        LDR      r1,|L13.268|
        STR      r0,[r1,#4]
|L13.136|
        LDR      r0,|L13.260|
        LDR      r2,|L13.264|
        ADD      r1,r2,r0,LSR #16
        LDR      r2,[r1,#0]
        MOVS     r3,#1
        LSLS     r3,r3,r0
        ORRS     r2,r2,r3
        STR      r2,[r1,#0]
        NOP      
        CMP      r4,#0x70000
        BNE      |L13.182|
        MOVS     r0,#3
        LDR      r1,|L13.280|
        STRB     r0,[r1,#0]
        LDR      r0,|L13.284|
        LDRB     r0,[r0,#0x140]
        ORR      r0,r0,#0x80
        SUBS     r1,r1,#4
        STRB     r0,[r1,#0]
|L13.182|
        MOV      r0,r6
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L13.188|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L13.232|
        DCB      "kCLOCK_UsbSrcUsbPfd != src",0
        DCB      0
|L13.260|
        DCD      0x10340012
|L13.264|
        DCD      0x40047000
|L13.268|
        DCD      0x40048000
|L13.272|
        DCD      0xfd239400
|L13.276|
        DCD      0xfe91ca00
|L13.280|
        DCD      0x40072144
|L13.284|
        DCD      0x40072000

        AREA ||i.CLOCK_EnableUsbhs0Clock||, CODE, READONLY, ALIGN=2

CLOCK_EnableUsbhs0Clock PROC
        MOV      r2,r0
        NOP      
        NOP      
        LDR      r0,|L14.60|
        LDR      r0,[r0,#0x30]
        ORR      r0,r0,#2
        LDR      r3,|L14.60|
        STR      r0,[r3,#0x30]
        LDR      r0,|L14.64|
        LDR      r0,[r0,#8]
        BIC      r0,r0,#0x700000
        ORR      r0,r0,#0x600000
        ORR      r0,r0,#0x100
        LDR      r3,|L14.64|
        STR      r0,[r3,#8]
        LDR      r0,|L14.68|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0x40
        LDR      r3,|L14.68|
        SUBS     r3,r3,#0xa0
        STR      r0,[r3,#0xa0]
        MOVS     r0,#1
        BX       lr
        ENDP

        DCW      0x0000
|L14.60|
        DCD      0x40048000
|L14.64|
        DCD      0x40047000
|L14.68|
        DCD      0x400a20a0

        AREA ||i.CLOCK_EnableUsbhs0PfdClock||, CODE, READONLY, ALIGN=2

CLOCK_EnableUsbhs0PfdClock PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CMP      r4,#0x23
        BHI      |L15.16|
        CMP      r4,#0x12
        BCC      |L15.16|
        B        |L15.28|
|L15.16|
        MOV      r2,#0x306
        ADR      r1,|L15.144|
        ADR      r0,|L15.188|
        BL       __aeabi_assert
|L15.28|
        LDR      r0,|L15.220|
        UDIV     r0,r0,r4
        MOV      r1,#0x3e8
        MUL      r6,r0,r1
        MOV      r0,#0x3f0
        AND      r0,r0,r4,LSL #4
        MOVS     r1,#0xc
        AND      r1,r1,r5,LSL #2
        ORRS     r0,r0,r1
        LDR      r1,|L15.224|
        LDR      r1,[r1,#0]
        BIC      r1,r1,#0x3fc
        ORRS     r0,r0,r1
        LDR      r1,|L15.228|
        STR      r0,[r1,#0x100]
        MOV      r0,r1
        LDR      r0,[r0,#0x100]
        BIC      r0,r0,#2
        STR      r0,[r1,#0x100]
        NOP      
|L15.90|
        LDR      r0,|L15.224|
        LDR      r0,[r0,#0]
        AND      r0,r0,#0x80000000
        CMP      r0,#0
        BEQ      |L15.90|
        CBNZ     r5,|L15.114|
        LDR      r0,|L15.232|
        LDR      r0,[r0,#0]  ; g_xtal0Freq
        LDR      r1,|L15.236|
        STR      r0,[r1,#0]  ; s_extPllFreq
        B        |L15.142|
|L15.114|
        CMP      r5,#1
        BNE      |L15.126|
        LSRS     r0,r6,#2
        LDR      r1,|L15.236|
        STR      r0,[r1,#0]  ; s_extPllFreq
        B        |L15.142|
|L15.126|
        CMP      r5,#2
        BNE      |L15.138|
        LSRS     r0,r6,#1
        LDR      r1,|L15.236|
        STR      r0,[r1,#0]  ; s_extPllFreq
        B        |L15.142|
|L15.138|
        LDR      r0,|L15.236|
        STR      r6,[r0,#0]  ; s_extPllFreq
|L15.142|
        POP      {r4-r6,pc}
        ENDP

|L15.144|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L15.188|
        DCB      "(frac <= 35U) && (frac >= 18U)",0
        DCB      0
|L15.220|
        DCD      0x0083d600
|L15.224|
        DCD      0x400a2100
|L15.228|
        DCD      0x400a2000
|L15.232|
        DCD      g_xtal0Freq
|L15.236|
        DCD      s_extPllFreq

        AREA ||i.CLOCK_EnableUsbhs0PhyPllClock||, CODE, READONLY, ALIGN=2

CLOCK_EnableUsbhs0PhyPllClock PROC
        PUSH     {r3-r7,lr}
        MOV      r5,r0
        MOV      r4,r1
        MOVS     r6,#0
        LDR      r0,|L16.248|
        LDRB     r0,[r0,#0]
        AND      r0,r0,#2
        CBZ      r0,|L16.20|
        B        |L16.32|
|L16.20|
        MOV      r2,#0x2bb
        ADR      r1,|L16.252|
        ADR      r0,|L16.296|
        BL       __aeabi_assert
|L16.32|
        LDR      r0,|L16.248|
        LDRB     r0,[r0,#1]
        AND      r0,r0,#1
        CBNZ     r0,|L16.44|
        B        |L16.56|
|L16.44|
        MOV      r2,#0x2bc
        ADR      r1,|L16.252|
        ADR      r0,|L16.328|
        BL       __aeabi_assert
|L16.56|
        LDR      r0,|L16.360|
        LDRB     r0,[r0,#0]
        AND      r0,r0,#0x80
        CBZ      r0,|L16.68|
        B        |L16.80|
|L16.68|
        MOV      r2,#0x2bd
        ADR      r1,|L16.252|
        ADR      r0,|L16.364|
        BL       __aeabi_assert
|L16.80|
        LDR      r0,|L16.396|
        CMP      r4,r0
        BNE      |L16.90|
        MOVS     r6,#0
        B        |L16.114|
|L16.90|
        LDR      r0,|L16.400|
        CMP      r4,r0
        BNE      |L16.100|
        MOVS     r6,#1
        B        |L16.114|
|L16.100|
        LDR      r0,|L16.404|
        CMP      r4,r0
        BNE      |L16.110|
        MOVS     r6,#2
        B        |L16.114|
|L16.110|
        MOVS     r0,#0
|L16.112|
        POP      {r3-r7,pc}
|L16.114|
        NOP      
        LDR      r0,|L16.408|
        LDR      r0,[r0,#0x30]
        ORR      r0,r0,#4
        LDR      r1,|L16.408|
        STR      r0,[r1,#0x30]
        MOV      r0,r1
        LDR      r0,[r0,#4]
        ORR      r0,r0,#2
        STR      r0,[r1,#4]
        LDR      r0,|L16.412|
        STR      r0,[sp,#0]
        B        |L16.146|
|L16.144|
        NOP      
|L16.146|
        LDR      r0,[sp,#0]
        SUBS     r1,r0,#1
        STR      r1,[sp,#0]
        CMP      r0,#0
        BNE      |L16.144|
        MOVS     r0,#1
        LDR      r1,|L16.416|
        STR      r0,[r1,#0]
        LDR      r0,|L16.420|
        LDR      r0,[r0,#0x30]
        BIC      r0,r0,#0x80000000
        LDR      r1,|L16.420|
        STR      r0,[r1,#0x30]
        MOV      r0,r1
        LDR      r0,[r0,#0xa0]
        ORR      r0,r0,#0x1000
        STR      r0,[r1,#0xa0]
        LDR      r0,|L16.416|
        SUBS     r0,r0,#0x90
        LDR      r0,[r0,#0]
        BIC      r0,r0,#3
        ORRS     r0,r0,r6
        STR      r0,[r1,#0xa0]
        MOV      r0,r1
        LDR      r0,[r0,#0xa0]
        BIC      r0,r0,#0x10000
        STR      r0,[r1,#0xa0]
        MOV      r0,r1
        LDR      r0,[r0,#0x30]
        BIC      r0,r0,#0x40000000
        STR      r0,[r1,#0x30]
        NOP      
|L16.230|
        LDR      r0,|L16.416|
        SUBS     r0,r0,#0x90
        LDR      r0,[r0,#0]
        AND      r0,r0,#0x80000000
        CMP      r0,#0
        BEQ      |L16.230|
        MOVS     r0,#1
        B        |L16.112|
        ENDP

|L16.248|
        DCD      0x40064000
|L16.252|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L16.296|
        DCB      "MCG->C1 & MCG_C1_IRCLKEN_MASK",0
        DCB      0
        DCB      0
|L16.328|
        DCB      "!(MCG->C2 & MCG_C2_IRCS_MASK)",0
        DCB      0
        DCB      0
|L16.360|
        DCD      0x40065000
|L16.364|
        DCB      "OSC0->CR & OSC_CR_ERCLKEN_MASK",0
        DCB      0
|L16.396|
        DCD      0x016e3600
|L16.400|
        DCD      0x00f42400
|L16.404|
        DCD      0x00b71b00
|L16.408|
        DCD      0x40048000
|L16.412|
        DCD      0x0007a120
|L16.416|
        DCD      0x400a2130
|L16.420|
        DCD      0x400a2000

        AREA ||i.CLOCK_ExternalModeToFbeModeQuick||, CODE, READONLY, ALIGN=2

CLOCK_ExternalModeToFbeModeQuick PROC
        LDR      r0,|L17.68|
        LDRB     r0,[r0,#1]
        BIC      r0,r0,#2
        LDR      r1,|L17.68|
        STRB     r0,[r1,#1]
        MOV      r0,r1
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xc0
        ORR      r0,r0,#0x80
        STRB     r0,[r1,#0]
        NOP      
|L17.28|
        LDR      r0,|L17.68|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#2
        BNE      |L17.28|
        LDR      r0,|L17.68|
        LDRB     r0,[r0,#5]
        BIC      r0,r0,#0x40
        LDR      r1,|L17.68|
        STRB     r0,[r1,#5]
        NOP      
|L17.54|
        LDR      r0,|L17.68|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#0x20
        CMP      r0,#0
        BNE      |L17.54|
        BX       lr
        ENDP

|L17.68|
        DCD      0x40064000

        AREA ||i.CLOCK_FllStableDelay||, CODE, READONLY, ALIGN=1

CLOCK_FllStableDelay PROC
        PUSH     {r3,lr}
        MOV      r0,#0x7530
        STR      r0,[sp,#0]
        B        |L18.12|
|L18.10|
        NOP      
|L18.12|
        LDR      r0,[sp,#0]
        SUBS     r1,r0,#1
        STR      r1,[sp,#0]
        CMP      r0,#0
        BNE      |L18.10|
        POP      {r3,pc}
        ENDP


        AREA ||i.CLOCK_GetBusClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetBusClkFreq PROC
        PUSH     {r4,lr}
        BL       CLOCK_GetOutClkFreq
        LDR      r1,|L19.24|
        LDR      r1,[r1,#0x44]
        UBFX     r1,r1,#24,#4
        ADDS     r1,r1,#1
        UDIV     r0,r0,r1
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L19.24|
        DCD      0x40048000

        AREA ||i.CLOCK_GetCoreSysClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetCoreSysClkFreq PROC
        PUSH     {r4,lr}
        BL       CLOCK_GetOutClkFreq
        LDR      r1,|L20.24|
        LDR      r1,[r1,#0x44]
        MOVS     r2,#1
        ADD      r1,r2,r1,LSR #28
        UDIV     r0,r0,r1
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L20.24|
        DCD      0x40048000

        AREA ||i.CLOCK_GetEr32kClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetEr32kClkFreq PROC
        PUSH     {r4,lr}
        LDR      r0,|L21.88|
        LDR      r0,[r0,#0]
        UBFX     r0,r0,#18,#2
        CBZ      r0,|L21.22|
        CMP      r0,#2
        BEQ      |L21.44|
        CMP      r0,#3
        BNE      |L21.76|
        B        |L21.70|
|L21.22|
        BL       CLOCK_GetOsc0ErClkDivFreq
        CMP      r0,#0x8000
        BNE      |L21.38|
        MOV      r0,#0x8000
        B        |L21.40|
|L21.38|
        MOVS     r0,#0
|L21.40|
        MOV      r4,r0
        B        |L21.80|
|L21.44|
        LDR      r0,|L21.92|
        LDR      r0,[r0,#0]  ; g_xtal32Freq
        CBZ      r0,|L21.52|
        B        |L21.64|
|L21.52|
        MOV      r2,#0x193
        ADR      r1,|L21.96|
        ADR      r0,|L21.140|
        BL       __aeabi_assert
|L21.64|
        LDR      r0,|L21.92|
        LDR      r4,[r0,#0]  ; g_xtal32Freq
        B        |L21.80|
|L21.70|
        MOV      r4,#0x3e8
        B        |L21.80|
|L21.76|
        MOVS     r4,#0
        NOP      
|L21.80|
        NOP      
        MOV      r0,r4
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L21.88|
        DCD      0x40047000
|L21.92|
        DCD      g_xtal32Freq
|L21.96|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L21.140|
        DCB      "g_xtal32Freq",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.CLOCK_GetExtPllFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetExtPllFreq PROC
        LDR      r0,|L22.8|
        LDR      r0,[r0,#0]  ; s_extPllFreq
        BX       lr
        ENDP

        DCW      0x0000
|L22.8|
        DCD      s_extPllFreq

        AREA ||i.CLOCK_GetFixedFreqClkFreq||, CODE, READONLY, ALIGN=1

CLOCK_GetFixedFreqClkFreq PROC
        PUSH     {r4,lr}
        BL       CLOCK_GetFllRefClkFreq
        MOV      r4,r0
        BL       CLOCK_GetOutClkFreq
        CMP      r4,r0,LSR #3
        BHI      |L23.24|
        CBZ      r4,|L23.24|
        MOV      r0,r4
|L23.22|
        POP      {r4,pc}
|L23.24|
        MOVS     r0,#0
        B        |L23.22|
        ENDP


        AREA ||i.CLOCK_GetFlashClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetFlashClkFreq PROC
        PUSH     {r4,lr}
        BL       CLOCK_GetOutClkFreq
        LDR      r1,|L24.24|
        LDR      r1,[r1,#0x44]
        UBFX     r1,r1,#16,#4
        ADDS     r1,r1,#1
        UDIV     r0,r0,r1
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L24.24|
        DCD      0x40048000

        AREA ||i.CLOCK_GetFlexBusClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetFlexBusClkFreq PROC
        PUSH     {r4,lr}
        BL       CLOCK_GetOutClkFreq
        LDR      r1,|L25.24|
        LDR      r1,[r1,#0x44]
        UBFX     r1,r1,#20,#4
        ADDS     r1,r1,#1
        UDIV     r0,r0,r1
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L25.24|
        DCD      0x40048000

        AREA ||i.CLOCK_GetFllExtRefClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetFllExtRefClkFreq PROC
        PUSH     {r4-r8,lr}
        BL       CLOCK_GetMcgExtClkFreq
        MOV      r4,r0
        CBNZ     r4,|L26.18|
        MOV      r0,r4
|L26.14|
        POP      {r4-r8,pc}
|L26.18|
        LDR      r0,|L26.108|
        LDRB     r0,[r0,#0]
        UBFX     r5,r0,#3,#3
        LSRS     r4,r4,r5
        LDR      r0,|L26.108|
        LDRB     r0,[r0,#1]
        UBFX     r7,r0,#4,#2
        LDR      r0,|L26.108|
        LDRB     r0,[r0,#0xc]
        AND      r6,r0,#3
        CBZ      r7,|L26.48|
        CBZ      r6,|L26.52|
|L26.48|
        CMP      r6,#2
        BNE      |L26.104|
|L26.52|
        CMP      r5,#8
        BCS      |L26.98|
        TBB      [pc,r5]
        DCB      0x04,0x05,0x06,0x07
        DCB      0x08,0x09,0x0b,0x0f
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        LSRS     r4,r4,#5
        B        |L26.102|
        MOVS     r0,#0x14
        UDIV     r4,r4,r0
        B        |L26.102|
        MOVS     r0,#0xc
        UDIV     r4,r4,r0
        B        |L26.102|
|L26.98|
        MOVS     r4,#0
        NOP      
|L26.102|
        NOP      
|L26.104|
        MOV      r0,r4
        B        |L26.14|
        ENDP

|L26.108|
        DCD      0x40064000

        AREA ||i.CLOCK_GetFllFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetFllFreq PROC
        PUSH     {r4-r6,lr}
        LDR      r0,|L27.68|
        LDRB     r0,[r0,#1]
        AND      r0,r0,#2
        CBNZ     r0,|L27.22|
        LDR      r0,|L27.68|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#0x20
        CBZ      r0,|L27.26|
|L27.22|
        MOVS     r0,#0
|L27.24|
        POP      {r4-r6,pc}
|L27.26|
        BL       CLOCK_GetFllRefClkFreq
        MOV      r4,r0
        CBNZ     r4,|L27.38|
        MOV      r0,r4
        B        |L27.24|
|L27.38|
        LDR      r0,|L27.68|
        LDRB     r0,[r0,#3]
        UBFX     r5,r0,#5,#2
        LDR      r0,|L27.68|
        LDRB     r0,[r0,#3]
        LSRS     r6,r0,#7
        LDR      r0,|L27.72|
        ADD      r0,r0,r5,LSL #2
        LDRH     r0,[r0,r6,LSL #1]
        MULS     r0,r4,r0
        B        |L27.24|
        ENDP

        DCW      0x0000
|L27.68|
        DCD      0x40064000
|L27.72|
        DCD      fllFactorTable

        AREA ||i.CLOCK_GetFllRefClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetFllRefClkFreq PROC
        PUSH     {r4,lr}
        LDR      r0,|L28.24|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#4,#1
        CBNZ     r0,|L28.18|
        BL       CLOCK_GetFllExtRefClkFreq
|L28.16|
        POP      {r4,pc}
|L28.18|
        LDR      r0,|L28.28|
        LDR      r0,[r0,#0]  ; s_slowIrcFreq
        B        |L28.16|
        ENDP

|L28.24|
        DCD      0x40064000
|L28.28|
        DCD      s_slowIrcFreq

        AREA ||i.CLOCK_GetFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetFreq PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        CMP      r5,#0x14
        BCS      |L29.188|
        TBB      [pc,r5]
        DCB      0x0a,0x0b,0x15,0x1f
        DCB      0x29,0x58,0x33,0x37
        DCB      0x3b,0x58,0x3f,0x43
        DCB      0x47,0x4b,0x4f,0x58
        DCB      0x58,0x58,0x53,0x55
        NOP      
        BL       CLOCK_GetOutClkFreq
        LDR      r1,|L29.200|
        LDR      r1,[r1,#0x44]
        MOVS     r2,#1
        ADD      r1,r2,r1,LSR #28
        UDIV     r4,r0,r1
        B        |L29.192|
        BL       CLOCK_GetOutClkFreq
        LDR      r1,|L29.200|
        LDR      r1,[r1,#0x44]
        UBFX     r1,r1,#24,#4
        ADDS     r1,r1,#1
        UDIV     r4,r0,r1
        B        |L29.192|
        BL       CLOCK_GetOutClkFreq
        LDR      r1,|L29.200|
        LDR      r1,[r1,#0x44]
        UBFX     r1,r1,#20,#4
        ADDS     r1,r1,#1
        UDIV     r4,r0,r1
        B        |L29.192|
        BL       CLOCK_GetOutClkFreq
        LDR      r1,|L29.200|
        LDR      r1,[r1,#0x44]
        UBFX     r1,r1,#16,#4
        ADDS     r1,r1,#1
        UDIV     r4,r0,r1
        B        |L29.192|
        BL       CLOCK_GetPllFllSelClkFreq
        MOV      r4,r0
        B        |L29.192|
        BL       CLOCK_GetEr32kClkFreq
        MOV      r4,r0
        B        |L29.192|
        BL       CLOCK_GetOsc0ErClkDivFreq
        MOV      r4,r0
        B        |L29.192|
        BL       CLOCK_GetOsc0ErClkUndivFreq
        MOV      r4,r0
        B        |L29.192|
        BL       CLOCK_GetFixedFreqClkFreq
        MOV      r4,r0
        B        |L29.192|
        BL       CLOCK_GetInternalRefClkFreq
        MOV      r4,r0
        B        |L29.192|
        BL       CLOCK_GetFllFreq
        MOV      r4,r0
        B        |L29.192|
        BL       CLOCK_GetPll0Freq
        MOV      r4,r0
        B        |L29.192|
        LDR      r4,|L29.204|
        B        |L29.192|
        MOV      r4,#0x3e8
        B        |L29.192|
|L29.188|
        MOVS     r4,#0
        NOP      
|L29.192|
        NOP      
        MOV      r0,r4
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L29.200|
        DCD      0x40048000
|L29.204|
        DCD      0x02dc6c00

        AREA ||i.CLOCK_GetInternalRefClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetInternalRefClkFreq PROC
        PUSH     {r4,lr}
        LDR      r0,|L30.24|
        LDRB     r0,[r0,#0]
        AND      r0,r0,#2
        CBNZ     r0,|L30.16|
        MOVS     r0,#0
|L30.14|
        POP      {r4,pc}
|L30.16|
        BL       CLOCK_GetInternalRefClkSelectFreq
        B        |L30.14|
        ENDP

        DCW      0x0000
|L30.24|
        DCD      0x40064000

        AREA ||i.CLOCK_GetInternalRefClkSelectFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetInternalRefClkSelectFreq PROC
        LDR      r0,|L31.32|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#1
        CBNZ     r0,|L31.16|
        LDR      r0,|L31.36|
        LDR      r0,[r0,#0]  ; s_slowIrcFreq
|L31.14|
        BX       lr
|L31.16|
        LDR      r0,|L31.32|
        LDRB     r0,[r0,#8]
        UBFX     r1,r0,#1,#3
        LDR      r0,|L31.40|
        LDR      r0,[r0,#0]  ; s_fastIrcFreq
        LSRS     r0,r0,r1
        B        |L31.14|
        ENDP

|L31.32|
        DCD      0x40064000
|L31.36|
        DCD      s_slowIrcFreq
|L31.40|
        DCD      s_fastIrcFreq

        AREA ||i.CLOCK_GetMcgExtClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetMcgExtClkFreq PROC
        PUSH     {r4,lr}
        LDR      r0,|L32.84|
        LDRB     r0,[r0,#0xc]
        AND      r0,r0,#3
        CBZ      r0,|L32.22|
        CMP      r0,#1
        BEQ      |L32.46|
        CMP      r0,#2
        BNE      |L32.74|
        B        |L32.70|
|L32.22|
        LDR      r0,|L32.88|
        LDR      r0,[r0,#0]  ; g_xtal0Freq
        CBZ      r0,|L32.30|
        B        |L32.40|
|L32.30|
        MOVS     r2,#0xde
        ADR      r1,|L32.92|
        ADR      r0,|L32.136|
        BL       __aeabi_assert
|L32.40|
        LDR      r0,|L32.88|
        LDR      r4,[r0,#0]  ; g_xtal0Freq
        B        |L32.78|
|L32.46|
        LDR      r0,|L32.156|
        LDR      r0,[r0,#0]  ; g_xtal32Freq
        CBZ      r0,|L32.54|
        B        |L32.64|
|L32.54|
        MOVS     r2,#0xe3
        ADR      r1,|L32.92|
        ADR      r0,|L32.160|
        BL       __aeabi_assert
|L32.64|
        LDR      r0,|L32.156|
        LDR      r4,[r0,#0]  ; g_xtal32Freq
        B        |L32.78|
|L32.70|
        LDR      r4,|L32.180|
        B        |L32.78|
|L32.74|
        MOVS     r4,#0
        NOP      
|L32.78|
        NOP      
        MOV      r0,r4
        POP      {r4,pc}
        ENDP

|L32.84|
        DCD      0x40064000
|L32.88|
        DCD      g_xtal0Freq
|L32.92|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L32.136|
        DCB      "0U != g_xtal0Freq",0
        DCB      0
        DCB      0
|L32.156|
        DCD      g_xtal32Freq
|L32.160|
        DCB      "0U != g_xtal32Freq",0
        DCB      0
|L32.180|
        DCD      0x02dc6c00

        AREA ||i.CLOCK_GetMode||, CODE, READONLY, ALIGN=2

CLOCK_GetMode PROC
        PUSH     {r4,r5,lr}
        MOVS     r0,#8
        LDR      r5,|L33.92|
        LDRB     r5,[r5,#6]
        UBFX     r1,r5,#2,#2
        LDR      r5,|L33.92|
        LDRB     r5,[r5,#6]
        UBFX     r3,r5,#4,#1
        LDR      r5,|L33.92|
        LDRB     r5,[r5,#1]
        UBFX     r2,r5,#1,#1
        LDR      r5,|L33.92|
        LDRB     r5,[r5,#6]
        UBFX     r4,r5,#5,#1
        CBNZ     r1,|L33.48|
        CBNZ     r3,|L33.44|
        MOVS     r0,#3
        B        |L33.82|
|L33.44|
        MOVS     r0,#0
        B        |L33.82|
|L33.48|
        CMP      r1,#1
        BNE      |L33.62|
        CBZ      r2,|L33.58|
        MOVS     r0,#2
        B        |L33.82|
|L33.58|
        MOVS     r0,#1
        B        |L33.82|
|L33.62|
        CMP      r1,#2
        BNE      |L33.82|
        CBZ      r2,|L33.72|
        MOVS     r0,#5
        B        |L33.82|
|L33.72|
        CMP      r4,#1
        BNE      |L33.80|
        MOVS     r0,#6
        B        |L33.82|
|L33.80|
        MOVS     r0,#4
|L33.82|
        CMP      r1,#3
        BNE      |L33.88|
        MOVS     r0,#7
|L33.88|
        POP      {r4,r5,pc}
        ENDP

        DCW      0x0000
|L33.92|
        DCD      0x40064000

        AREA ||i.CLOCK_GetOsc0ErClkDivFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetOsc0ErClkDivFreq PROC
        PUSH     {r4,lr}
        LDR      r0,|L34.52|
        LDRB     r0,[r0,#0]
        AND      r0,r0,#0x80
        CBZ      r0,|L34.46|
        LDR      r0,|L34.56|
        LDR      r0,[r0,#0]  ; g_xtal0Freq
        CBZ      r0,|L34.20|
        B        |L34.32|
|L34.20|
        MOV      r2,#0x17a
        ADR      r1,|L34.60|
        ADR      r0,|L34.104|
        BL       __aeabi_assert
|L34.32|
        LDR      r0,|L34.52|
        LDRB     r0,[r0,#2]
        LSRS     r1,r0,#6
        LDR      r0,|L34.56|
        LDR      r0,[r0,#0]  ; g_xtal0Freq
        LSRS     r0,r0,r1
|L34.44|
        POP      {r4,pc}
|L34.46|
        MOVS     r0,#0
        B        |L34.44|
        ENDP

        DCW      0x0000
|L34.52|
        DCD      0x40065000
|L34.56|
        DCD      g_xtal0Freq
|L34.60|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L34.104|
        DCB      "g_xtal0Freq",0

        AREA ||i.CLOCK_GetOsc0ErClkFreq||, CODE, READONLY, ALIGN=1

CLOCK_GetOsc0ErClkFreq PROC
        PUSH     {r4,lr}
        BL       CLOCK_GetOsc0ErClkDivFreq
        POP      {r4,pc}
        ENDP


        AREA ||i.CLOCK_GetOsc0ErClkUndivFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetOsc0ErClkUndivFreq PROC
        PUSH     {r4,lr}
        LDR      r0,|L36.44|
        LDRB     r0,[r0,#0]
        AND      r0,r0,#0x80
        CBZ      r0,|L36.38|
        LDR      r0,|L36.48|
        LDR      r0,[r0,#0]  ; g_xtal0Freq
        CBZ      r0,|L36.20|
        B        |L36.32|
|L36.20|
        MOV      r2,#0x167
        ADR      r1,|L36.52|
        ADR      r0,|L36.96|
        BL       __aeabi_assert
|L36.32|
        LDR      r0,|L36.48|
        LDR      r0,[r0,#0]  ; g_xtal0Freq
|L36.36|
        POP      {r4,pc}
|L36.38|
        MOVS     r0,#0
        B        |L36.36|
        ENDP

        DCW      0x0000
|L36.44|
        DCD      0x40065000
|L36.48|
        DCD      g_xtal0Freq
|L36.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L36.96|
        DCB      "g_xtal0Freq",0

        AREA ||i.CLOCK_GetOscRangeFromFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetOscRangeFromFreq PROC
        MOV      r1,r0
        MOV      r2,#0x9897
        CMP      r1,r2
        BHI      |L37.14|
        MOVS     r0,#0
        B        |L37.26|
|L37.14|
        LDR      r2,|L37.28|
        CMP      r1,r2
        BHI      |L37.24|
        MOVS     r0,#1
        B        |L37.26|
|L37.24|
        MOVS     r0,#2
|L37.26|
        BX       lr
        ENDP

|L37.28|
        DCD      0x007a1200

        AREA ||i.CLOCK_GetOutClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetOutClkFreq PROC
        PUSH     {r4-r6,lr}
        LDR      r1,|L38.84|
        LDRB     r1,[r1,#6]
        UBFX     r4,r1,#2,#2
        LDR      r1,|L38.84|
        LDRB     r1,[r1,#0x12]
        UBFX     r5,r1,#4,#1
        CBZ      r4,|L38.58|
        CMP      r4,#1
        BEQ      |L38.64|
        CMP      r4,#2
        BEQ      |L38.70|
        CMP      r4,#3
        BNE      |L38.76|
        CBZ      r5,|L38.44|
        CMP      r5,#1
        BNE      |L38.50|
        BL       CLOCK_GetExtPllFreq
        B        |L38.54|
|L38.44|
        BL       CLOCK_GetPll0Freq
        B        |L38.54|
|L38.50|
        MOVS     r0,#0
        NOP      
|L38.54|
        NOP      
        B        |L38.80|
|L38.58|
        BL       CLOCK_GetFllFreq
        B        |L38.80|
|L38.64|
        BL       CLOCK_GetInternalRefClkSelectFreq
        B        |L38.80|
|L38.70|
        BL       CLOCK_GetMcgExtClkFreq
        B        |L38.80|
|L38.76|
        MOVS     r0,#0
        NOP      
|L38.80|
        NOP      
        POP      {r4-r6,pc}
        ENDP

|L38.84|
        DCD      0x40064000

        AREA ||i.CLOCK_GetPlatClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetPlatClkFreq PROC
        PUSH     {r4,lr}
        BL       CLOCK_GetOutClkFreq
        LDR      r1,|L39.24|
        LDR      r1,[r1,#0x44]
        MOVS     r2,#1
        ADD      r1,r2,r1,LSR #28
        UDIV     r0,r0,r1
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L39.24|
        DCD      0x40048000

        AREA ||i.CLOCK_GetPll0Freq||, CODE, READONLY, ALIGN=2

CLOCK_GetPll0Freq PROC
        PUSH     {r4,lr}
        LDR      r0,|L40.72|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#0x40
        CBNZ     r0,|L40.16|
        MOVS     r0,#0
|L40.14|
        POP      {r4,pc}
|L40.16|
        BL       CLOCK_GetPll0RefFreq
        MOV      r4,r0
        CBZ      r4,|L40.26|
        B        |L40.38|
|L40.26|
        MOV      r2,#0x3c1
        ADR      r1,|L40.76|
        ADR      r0,|L40.120|
        BL       __aeabi_assert
|L40.38|
        LDR      r0,|L40.72|
        LDRB     r0,[r0,#4]
        AND      r0,r0,#7
        ADDS     r0,r0,#1
        UDIV     r4,r4,r0
        LDR      r0,|L40.72|
        LDRB     r0,[r0,#5]
        AND      r0,r0,#0x1f
        ADDS     r0,r0,#0x10
        MULS     r4,r0,r4
        LSRS     r4,r4,#1
        MOV      r0,r4
        B        |L40.14|
        ENDP

        DCW      0x0000
|L40.72|
        DCD      0x40064000
|L40.76|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L40.120|
        DCB      "mcgpll0clk",0
        DCB      0

        AREA ||i.CLOCK_GetPll0RefFreq||, CODE, READONLY, ALIGN=1

CLOCK_GetPll0RefFreq PROC
        PUSH     {r4,lr}
        BL       CLOCK_GetMcgExtClkFreq
        POP      {r4,pc}
        ENDP


        AREA ||i.CLOCK_GetPllFllSelClkFreq||, CODE, READONLY, ALIGN=2

CLOCK_GetPllFllSelClkFreq PROC
        PUSH     {r4,lr}
        LDR      r0,|L42.88|
        LDR      r0,[r0,#4]
        UBFX     r0,r0,#16,#2
        CBZ      r0,|L42.26|
        CMP      r0,#1
        BEQ      |L42.34|
        CMP      r0,#2
        BEQ      |L42.42|
        CMP      r0,#3
        BNE      |L42.54|
        B        |L42.50|
|L42.26|
        BL       CLOCK_GetFllFreq
        MOV      r4,r0
        B        |L42.58|
|L42.34|
        BL       CLOCK_GetPll0Freq
        MOV      r4,r0
        B        |L42.58|
|L42.42|
        BL       CLOCK_GetExtPllFreq
        MOV      r4,r0
        B        |L42.58|
|L42.50|
        LDR      r4,|L42.92|
        B        |L42.58|
|L42.54|
        MOVS     r4,#0
        NOP      
|L42.58|
        NOP      
        LDR      r0,|L42.88|
        LDR      r0,[r0,#0x64]
        AND      r0,r0,#1
        ADDS     r0,r0,#1
        MULS     r0,r4,r0
        LDR      r1,|L42.88|
        LDR      r1,[r1,#0x64]
        UBFX     r1,r1,#1,#3
        ADDS     r1,r1,#1
        UDIV     r0,r0,r1
        POP      {r4,pc}
        ENDP

|L42.88|
        DCD      0x40048000
|L42.92|
        DCD      0x02dc6c00

        AREA ||i.CLOCK_GetStatusFlags||, CODE, READONLY, ALIGN=2

CLOCK_GetStatusFlags PROC
        MOVS     r0,#0
        LDR      r2,|L43.80|
        LDRB     r1,[r2,#6]
        LDRB     r2,[r2,#8]
        AND      r2,r2,#1
        CBZ      r2,|L43.18|
        ORR      r0,r0,#1
|L43.18|
        AND      r2,r1,#2
        CBZ      r2,|L43.28|
        ORR      r0,r0,#2
|L43.28|
        LDR      r2,|L43.80|
        LDRB     r2,[r2,#0xd]
        AND      r2,r2,#1
        CBZ      r2,|L43.42|
        ORR      r0,r0,#0x10
|L43.42|
        AND      r2,r1,#0x80
        CBZ      r2,|L43.52|
        ORR      r0,r0,#0x20
|L43.52|
        AND      r2,r1,#0x40
        CBZ      r2,|L43.62|
        ORR      r0,r0,#0x40
|L43.62|
        LDR      r2,|L43.80|
        LDRB     r2,[r2,#0xe]
        AND      r2,r2,#1
        CBZ      r2,|L43.76|
        ORR      r0,r0,#0x200
|L43.76|
        BX       lr
        ENDP

        DCW      0x0000
|L43.80|
        DCD      0x40064000

        AREA ||i.CLOCK_InitOsc0||, CODE, READONLY, ALIGN=2

CLOCK_InitOsc0 PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        LDR      r0,[r4,#0]
        BL       CLOCK_GetOscRangeFromFreq
        MOV      r5,r0
        LDR      r0,|L44.108|
        LDRB     r2,[r4,#4]
        LDRB     r1,[r0,#0]
        BIC      r1,r1,#0xf
        ORRS     r1,r1,r2
        STRB     r1,[r0,#0]
        NOP      
        LDR      r0,|L44.112|
        LDRB     r0,[r0,#1]
        BIC      r0,r0,#0x3c
        MOVS     r1,#0x30
        AND      r1,r1,r5,LSL #4
        ORRS     r0,r0,r1
        LDRB     r1,[r4,#5]
        ORRS     r0,r0,r1
        LDR      r1,|L44.112|
        STRB     r0,[r1,#1]
        LDR      r0,|L44.108|
        LDRB     r1,[r0,#0]
        BIC      r1,r1,#0xa0
        LDRB     r2,[r4,#6]
        ORRS     r1,r1,r2
        STRB     r1,[r0,#0]
        LDRB     r2,[r4,#7]
        MOVS     r3,#0xc0
        AND      r2,r3,r2,LSL #6
        STRB     r2,[r0,#2]
        NOP      
        LDRB     r0,[r4,#5]
        CBZ      r0,|L44.106|
        LDR      r0,|L44.108|
        LDRB     r0,[r0,#0]
        AND      r0,r0,#0x80
        CBZ      r0,|L44.106|
        NOP      
|L44.94|
        LDR      r0,|L44.112|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L44.94|
|L44.106|
        POP      {r4-r6,pc}
        ENDP

|L44.108|
        DCD      0x40065000
|L44.112|
        DCD      0x40064000

        AREA ||i.CLOCK_InternalModeToFbiModeQuick||, CODE, READONLY, ALIGN=2

CLOCK_InternalModeToFbiModeQuick PROC
        LDR      r0,|L45.44|
        LDRB     r0,[r0,#1]
        BIC      r0,r0,#2
        LDR      r1,|L45.44|
        STRB     r0,[r1,#1]
        MOV      r0,r1
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xc0
        ORR      r0,r0,#0x40
        STRB     r0,[r1,#0]
        NOP      
|L45.28|
        LDR      r0,|L45.44|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#1
        BNE      |L45.28|
        MOVS     r0,#0
        BX       lr
        ENDP

|L45.44|
        DCD      0x40064000

        AREA ||i.CLOCK_SetBlpeMode||, CODE, READONLY, ALIGN=2

CLOCK_SetBlpeMode PROC
        LDR      r0,|L46.16|
        LDRB     r0,[r0,#1]
        ORR      r0,r0,#2
        LDR      r1,|L46.16|
        STRB     r0,[r1,#1]
        MOVS     r0,#0
        BX       lr
        ENDP

|L46.16|
        DCD      0x40064000

        AREA ||i.CLOCK_SetBlpiMode||, CODE, READONLY, ALIGN=2

CLOCK_SetBlpiMode PROC
        LDR      r0,|L47.16|
        LDRB     r0,[r0,#1]
        ORR      r0,r0,#2
        LDR      r1,|L47.16|
        STRB     r0,[r1,#1]
        MOVS     r0,#0
        BX       lr
        ENDP

|L47.16|
        DCD      0x40064000

        AREA ||i.CLOCK_SetExtPllFreq||, CODE, READONLY, ALIGN=2

CLOCK_SetExtPllFreq PROC
        LDR      r1,|L48.8|
        STR      r0,[r1,#0]  ; s_extPllFreq
        BX       lr
        ENDP

        DCW      0x0000
|L48.8|
        DCD      s_extPllFreq

        AREA ||i.CLOCK_SetExtPllMonitorMode||, CODE, READONLY, ALIGN=2

CLOCK_SetExtPllMonitorMode PROC
        MOV      r1,r0
        LDR      r2,|L49.32|
        LDRB     r0,[r2,#0xe]
        BIC      r0,r0,#0x30
        CBZ      r1,|L49.24|
        CMP      r1,#2
        BNE      |L49.20|
        ORR      r0,r0,#0x10
|L49.20|
        ORR      r0,r0,#0x20
|L49.24|
        LDR      r2,|L49.32|
        STRB     r0,[r2,#0xe]
        BX       lr
        ENDP

        DCW      0x0000
|L49.32|
        DCD      0x40064000

        AREA ||i.CLOCK_SetExternalRefClkConfig||, CODE, READONLY, ALIGN=2

CLOCK_SetExternalRefClkConfig PROC
        PUSH     {r4,lr}
        MOV      r1,r0
        LDR      r0,|L50.56|
        LDRB     r0,[r0,#0xc]
        AND      r0,r0,#3
        CMP      r0,r1
        BEQ      |L50.20|
        MOVS     r2,#1
        B        |L50.22|
|L50.20|
        MOVS     r2,#0
|L50.22|
        LDR      r0,|L50.56|
        LDRB     r0,[r0,#0xc]
        BFI      r0,r1,#0,#2
        LDR      r4,|L50.56|
        STRB     r0,[r4,#0xc]
        CBZ      r2,|L50.52|
        MOV      r3,#0x5dc
        B        |L50.44|
|L50.42|
        NOP      
|L50.44|
        SUBS     r0,r3,#0
        SUB      r3,r3,#1
        BNE      |L50.42|
|L50.52|
        MOVS     r0,#0
        POP      {r4,pc}
        ENDP

|L50.56|
        DCD      0x40064000

        AREA ||i.CLOCK_SetFbeMode||, CODE, READONLY, ALIGN=2

CLOCK_SetFbeMode PROC
        PUSH     {r4-r10,lr}
        MOV      r6,r0
        MOV      r7,r1
        MOV      r8,r2
        MOV      r4,r3
        MOV      r9,#0
        LDR      r0,|L51.208|
        LDRB     r0,[r0,#5]
        BIC      r0,r0,#0x40
        LDR      r1,|L51.208|
        STRB     r0,[r1,#5]
        NOP      
|L51.30|
        LDR      r0,|L51.208|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#0x20
        CMP      r0,#0
        BNE      |L51.30|
        LDR      r0,|L51.208|
        LDRB     r0,[r0,#1]
        BIC      r0,r0,#2
        LDR      r1,|L51.208|
        STRB     r0,[r1,#1]
        MOV      r0,r1
        LDRB     r5,[r0,#3]
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#4,#1
        CBZ      r0,|L51.80|
        MOV      r9,#1
        MOV      r0,r1
        LDRB     r0,[r0,#3]
        EOR      r0,r0,#0x20
        STRB     r0,[r1,#3]
|L51.80|
        LDR      r0,|L51.208|
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xfc
        MOVS     r1,#0x38
        AND      r1,r1,r6,LSL #3
        ORR      r1,r1,#0x80
        ORRS     r0,r0,r1
        LDR      r1,|L51.208|
        STRB     r0,[r1,#0]
        MOV      r0,r1
        LDRB     r0,[r0,#0xc]
        AND      r0,r0,#3
        CBNZ     r0,|L51.138|
        MOV      r0,r1
        LDRB     r0,[r0,#1]
        AND      r0,r0,#4
        CBZ      r0,|L51.138|
        NOP      
|L51.126|
        LDR      r0,|L51.208|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L51.126|
|L51.138|
        NOP      
|L51.140|
        LDR      r0,|L51.208|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#4,#1
        CMP      r0,#0
        BNE      |L51.140|
        CMP      r9,#0
        BEQ      |L51.162|
        LDR      r0,|L51.208|
        STRB     r5,[r0,#3]
|L51.162|
        MOVS     r0,#0x80
        AND      r0,r0,r7,LSL #7
        MOVS     r1,#0x60
        AND      r1,r1,r8,LSL #5
        ORRS     r0,r0,r1
        BIC      r1,r5,#0xe0
        ORR      r5,r0,r1
        NOP      
|L51.186|
        LDR      r0,|L51.208|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#2
        BNE      |L51.186|
        CBZ      r4,|L51.202|
        BLX      r4
|L51.202|
        MOVS     r0,#0
        POP      {r4-r10,pc}
        ENDP

|L51.208|
        DCD      0x40064000

        AREA ||i.CLOCK_SetFbiMode||, CODE, READONLY, ALIGN=2

CLOCK_SetFbiMode PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r4,r2
        MOV      r8,#0
        LDR      r0,|L52.140|
        LDRB     r7,[r0,#3]
        LDRB     r0,[r0,#1]
        BIC      r0,r0,#2
        LDR      r1,|L52.140|
        STRB     r0,[r1,#1]
        MOV      r0,r1
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#4,#1
        CBNZ     r0,|L52.52|
        MOV      r8,#1
        MOV      r0,r1
        LDRB     r0,[r0,#3]
        EOR      r0,r0,#0x20
        STRB     r0,[r1,#3]
|L52.52|
        LDR      r0,|L52.140|
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xc4
        ORR      r0,r0,#0x44
        LDR      r1,|L52.140|
        STRB     r0,[r1,#0]
        NOP      
|L52.70|
        LDR      r0,|L52.140|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#4,#1
        CMP      r0,#0
        BEQ      |L52.70|
        CMP      r8,#0
        BEQ      |L52.92|
        LDR      r0,|L52.140|
        STRB     r7,[r0,#3]
|L52.92|
        NOP      
|L52.94|
        LDR      r0,|L52.140|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#1
        BNE      |L52.94|
        MOVS     r0,#0x80
        AND      r0,r0,r5,LSL #7
        MOVS     r1,#0x60
        AND      r1,r1,r6,LSL #5
        ORRS     r0,r0,r1
        BIC      r1,r7,#0xe0
        ORRS     r0,r0,r1
        LDR      r1,|L52.140|
        STRB     r0,[r1,#3]
        CBZ      r4,|L52.134|
        BLX      r4
|L52.134|
        MOVS     r0,#0
        POP      {r4-r8,pc}
        ENDP

|L52.140|
        DCD      0x40064000

        AREA ||i.CLOCK_SetFeeMode||, CODE, READONLY, ALIGN=2

CLOCK_SetFeeMode PROC
        PUSH     {r4-r10,lr}
        MOV      r6,r0
        MOV      r7,r1
        MOV      r8,r2
        MOV      r5,r3
        MOV      r9,#0
        LDR      r0,|L53.180|
        LDRB     r4,[r0,#3]
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#4,#1
        CBZ      r0,|L53.44|
        MOV      r9,#1
        LDR      r0,|L53.180|
        LDRB     r0,[r0,#3]
        EOR      r0,r0,#0x20
        LDR      r1,|L53.180|
        STRB     r0,[r1,#3]
|L53.44|
        LDR      r0,|L53.180|
        LDRB     r0,[r0,#0]
        BIC      r1,r0,#0xfc
        MOVS     r0,#0x38
        AND      r0,r0,r6,LSL #3
        ORRS     r1,r1,r0
        LDR      r0,|L53.180|
        STRB     r1,[r0,#0]
        LDRB     r0,[r0,#0xc]
        AND      r0,r0,#3
        CBNZ     r0,|L53.96|
        LDR      r0,|L53.180|
        LDRB     r0,[r0,#1]
        AND      r0,r0,#4
        CBZ      r0,|L53.96|
        NOP      
|L53.84|
        LDR      r0,|L53.180|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L53.84|
|L53.96|
        NOP      
|L53.98|
        LDR      r0,|L53.180|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#4,#1
        CMP      r0,#0
        BNE      |L53.98|
        CMP      r9,#0
        BEQ      |L53.120|
        LDR      r0,|L53.180|
        STRB     r4,[r0,#3]
|L53.120|
        MOVS     r0,#0x80
        AND      r0,r0,r7,LSL #7
        MOVS     r1,#0x60
        AND      r1,r1,r8,LSL #5
        ORRS     r0,r0,r1
        BIC      r1,r4,#0xe0
        ORR      r4,r0,r1
        LDR      r0,|L53.180|
        STRB     r4,[r0,#3]
        NOP      
|L53.148|
        LDR      r0,|L53.180|
        LDRB     r0,[r0,#3]
        CMP      r0,r4
        BNE      |L53.148|
        NOP      
|L53.158|
        LDR      r0,|L53.180|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#0
        BNE      |L53.158|
        CBZ      r5,|L53.174|
        BLX      r5
|L53.174|
        MOVS     r0,#0
        POP      {r4-r10,pc}
        ENDP

|L53.180|
        DCD      0x40064000

        AREA ||i.CLOCK_SetFeiMode||, CODE, READONLY, ALIGN=2

CLOCK_SetFeiMode PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r4,r2
        MOV      r8,#0
        LDR      r0,|L54.128|
        LDRB     r7,[r0,#3]
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#4,#1
        CBNZ     r0,|L54.42|
        MOV      r8,#1
        LDR      r0,|L54.128|
        LDRB     r0,[r0,#3]
        EOR      r0,r0,#0x20
        LDR      r1,|L54.128|
        STRB     r0,[r1,#3]
|L54.42|
        LDR      r0,|L54.128|
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xc4
        ADDS     r0,r0,#4
        LDR      r1,|L54.128|
        STRB     r0,[r1,#0]
        NOP      
|L54.58|
        LDR      r0,|L54.128|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#4,#1
        CMP      r0,#0
        BEQ      |L54.58|
        CMP      r8,#0
        BEQ      |L54.80|
        LDR      r0,|L54.128|
        STRB     r7,[r0,#3]
|L54.80|
        MOVS     r0,#0x80
        AND      r0,r0,r5,LSL #7
        MOVS     r1,#0x60
        AND      r1,r1,r6,LSL #5
        ORRS     r0,r0,r1
        BIC      r1,r7,#0xe0
        ORRS     r0,r0,r1
        LDR      r1,|L54.128|
        STRB     r0,[r1,#3]
        NOP      
|L54.106|
        LDR      r0,|L54.128|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#0
        BNE      |L54.106|
        CBZ      r4,|L54.122|
        BLX      r4
|L54.122|
        MOVS     r0,#0
        POP      {r4-r8,pc}
        ENDP

|L54.128|
        DCD      0x40064000

        AREA ||i.CLOCK_SetInternalRefClkConfig||, CODE, READONLY, ALIGN=2

CLOCK_SetInternalRefClkConfig PROC
        PUSH     {r4-r7,lr}
        MOV      r3,r0
        LDR      r0,|L55.148|
        LDRB     r0,[r0,#6]
        UBFX     r4,r0,#2,#2
        LDR      r0,|L55.148|
        LDRB     r0,[r0,#6]
        AND      r5,r0,#1
        LDR      r0,|L55.148|
        LDRB     r0,[r0,#8]
        UBFX     r6,r0,#1,#3
        CMP      r2,r6
        BEQ      |L55.96|
        LDR      r0,|L55.148|
        LDRB     r0,[r0,#0]
        AND      r0,r0,#2
        CBNZ     r0,|L55.46|
        CMP      r4,#1
        BNE      |L55.76|
|L55.46|
        CMP      r5,#1
        BNE      |L55.76|
        LDR      r0,|L55.148|
        LDRB     r0,[r0,#1]
        BIC      r0,r0,#1
        LDR      r7,|L55.148|
        STRB     r0,[r7,#1]
        NOP      
|L55.64|
        LDR      r0,|L55.148|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#1
        CMP      r0,#0
        BNE      |L55.64|
|L55.76|
        LDR      r0,|L55.148|
        LDRB     r0,[r0,#8]
        BIC      r0,r0,#0x2f
        MOVS     r7,#0xe
        AND      r7,r7,r2,LSL #1
        ORRS     r0,r0,r7
        LDR      r7,|L55.148|
        STRB     r0,[r7,#8]
|L55.96|
        LDR      r0,|L55.148|
        LDRB     r0,[r0,#1]
        BFI      r0,r1,#0,#1
        LDR      r7,|L55.148|
        STRB     r0,[r7,#1]
        MOV      r0,r7
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#3
        ORRS     r0,r0,r3
        STRB     r0,[r7,#0]
        CMP      r4,#1
        BEQ      |L55.130|
        AND      r0,r3,#2
        CBZ      r0,|L55.144|
|L55.130|
        NOP      
|L55.132|
        LDR      r0,|L55.148|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#1
        CMP      r0,r1
        BNE      |L55.132|
|L55.144|
        MOVS     r0,#0
        POP      {r4-r7,pc}
        ENDP

|L55.148|
        DCD      0x40064000

        AREA ||i.CLOCK_SetMcgConfig||, CODE, READONLY, ALIGN=2

CLOCK_SetMcgConfig PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOVS     r7,#0
        LDRB     r6,[r4,#0xb]
        LDR      r0,|L56.344|
        LDRB     r0,[r0,#0xc]
        AND      r0,r0,#3
        LDRB     r1,[r4,#7]
        CMP      r0,r1
        BEQ      |L56.54|
        LDR      r0,|L56.344|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#4,#1
        CBNZ     r0,|L56.48|
        BL       CLOCK_ExternalModeToFbeModeQuick
        LDRB     r1,[r4,#5]
        LDRB     r0,[r4,#6]
        MOVS     r2,#0
        BL       CLOCK_SetFeiMode
|L56.48|
        LDRB     r0,[r4,#7]
        BL       CLOCK_SetExternalRefClkConfig
|L56.54|
        LDR      r0,|L56.344|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#1
        BNE      |L56.88|
        LDR      r0,|L56.344|
        LDRB     r0,[r0,#1]
        BIC      r0,r0,#2
        LDR      r1,|L56.344|
        STRB     r0,[r1,#1]
        LDRB     r1,[r4,#5]
        LDRB     r0,[r4,#6]
        LDR      r2,|L56.348|
        BL       CLOCK_SetFeiMode
|L56.88|
        LDRB     r2,[r4,#3]
        LDRB     r1,[r4,#2]
        LDRB     r0,[r4,#1]
        BL       CLOCK_SetInternalRefClkConfig
        BL       CLOCK_GetMode
        MOV      r5,r0
        NOP      
|L56.106|
        LDR      r0,|L56.352|
        ADD      r0,r0,r5,LSL #3
        LDRB     r1,[r4,#0]
        LDRB     r5,[r0,r1]
        CMP      r5,#8
        BCS      |L56.292|
        TBB      [pc,r5]
        DCB      0x04,0x13,0x22,0x0b
        DCB      0x1a,0x26,0x2a,0x50
        LDRB     r1,[r4,#5]
        LDRB     r0,[r4,#6]
        LDR      r2,|L56.348|
        BL       CLOCK_SetFeiMode
        MOV      r7,r0
        B        |L56.294|
        LDRB     r2,[r4,#5]
        LDRB     r1,[r4,#6]
        LDRB     r0,[r4,#4]
        LDR      r3,|L56.348|
        BL       CLOCK_SetFeeMode
        MOV      r7,r0
        B        |L56.294|
        LDRB     r1,[r4,#5]
        LDRB     r0,[r4,#6]
        MOVS     r2,#0
        BL       CLOCK_SetFbiMode
        MOV      r7,r0
        B        |L56.294|
        LDRB     r2,[r4,#5]
        LDRB     r1,[r4,#6]
        LDRB     r0,[r4,#4]
        MOVS     r3,#0
        BL       CLOCK_SetFbeMode
        MOV      r7,r0
        B        |L56.294|
        BL       CLOCK_SetBlpiMode
        MOV      r7,r0
        B        |L56.294|
        BL       CLOCK_SetBlpeMode
        MOV      r7,r0
        B        |L56.294|
        LDRB     r0,[r4,#0]
        CMP      r0,#7
        BEQ      |L56.220|
        LDRB     r0,[r4,#0]
        CMP      r0,#6
        BNE      |L56.252|
|L56.220|
        CBNZ     r6,|L56.236|
        ADD      r1,r4,#8
        MOV      r0,r6
        BL       CLOCK_SetPbeMode
        MOV      r7,r0
        B        |L56.282|
|L56.236|
        CMP      r6,#1
        BNE      |L56.282|
        MOVS     r1,#0
        MOV      r0,r6
        BL       CLOCK_SetPbeMode
        MOV      r7,r0
        B        |L56.282|
|L56.252|
        LDR      r0,|L56.344|
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xc0
        ORR      r0,r0,#0x80
        LDR      r1,|L56.344|
        STRB     r0,[r1,#0]
        NOP      
|L56.270|
        LDR      r0,|L56.344|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#2
        BNE      |L56.270|
|L56.282|
        B        |L56.294|
        BL       CLOCK_SetPeeMode
        MOV      r7,r0
        B        |L56.294|
|L56.292|
        NOP      
|L56.294|
        NOP      
        CBZ      r7,|L56.304|
        MOV      r0,r7
|L56.300|
        POP      {r4-r8,pc}
|L56.304|
        LDRB     r0,[r4,#0]
        CMP      r0,r5
        BNE      |L56.106|
        LDRB     r0,[r4,#8]
        AND      r0,r0,#0x40
        CBZ      r0,|L56.328|
        ADD      r0,r4,#8
        BL       CLOCK_EnablePll0
        B        |L56.340|
|L56.328|
        LDR      r0,|L56.344|
        LDRB     r0,[r0,#4]
        BIC      r0,r0,#0x40
        LDR      r1,|L56.344|
        STRB     r0,[r1,#4]
|L56.340|
        MOVS     r0,#0
        B        |L56.300|
        ENDP

|L56.344|
        DCD      0x40064000
|L56.348|
        DCD      CLOCK_FllStableDelay
|L56.352|
        DCD      mcgModeMatrix

        AREA ||i.CLOCK_SetOsc0MonitorMode||, CODE, READONLY, ALIGN=2

CLOCK_SetOsc0MonitorMode PROC
        LDR      r1,|L57.72|
        LDRB     r1,[r1,#8]
        BIC      r1,r1,#0x20
        LDR      r2,|L57.72|
        STRB     r1,[r2,#8]
        CBNZ     r0,|L57.26|
        MOV      r1,r2
        LDRB     r1,[r1,#5]
        BIC      r1,r1,#0x20
        STRB     r1,[r2,#5]
        B        |L57.68|
|L57.26|
        CMP      r0,#1
        BNE      |L57.44|
        LDR      r1,|L57.72|
        LDRB     r1,[r1,#1]
        BIC      r1,r1,#0x80
        LDR      r2,|L57.72|
        STRB     r1,[r2,#1]
        B        |L57.56|
|L57.44|
        LDR      r1,|L57.72|
        LDRB     r1,[r1,#1]
        ORR      r1,r1,#0x80
        LDR      r2,|L57.72|
        STRB     r1,[r2,#1]
|L57.56|
        LDR      r1,|L57.72|
        LDRB     r1,[r1,#5]
        ORR      r1,r1,#0x20
        LDR      r2,|L57.72|
        STRB     r1,[r2,#5]
|L57.68|
        BX       lr
        ENDP

        DCW      0x0000
|L57.72|
        DCD      0x40064000

        AREA ||i.CLOCK_SetPbeMode||, CODE, READONLY, ALIGN=2

CLOCK_SetPbeMode PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CMP      r4,#1
        BEQ      |L58.28|
        CBZ      r5,|L58.14|
        B        |L58.26|
|L58.14|
        MOV      r2,#0x865
        ADR      r1,|L58.156|
        ADR      r0,|L58.200|
        BL       __aeabi_assert
|L58.26|
        NOP      
|L58.28|
        LDR      r0,|L58.208|
        LDRB     r0,[r0,#1]
        BIC      r0,r0,#2
        LDR      r1,|L58.208|
        STRB     r0,[r1,#1]
        MOV      r0,r1
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xc4
        ORR      r0,r0,#0x80
        STRB     r0,[r1,#0]
        NOP      
|L58.56|
        LDR      r0,|L58.208|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#0x1c
        CMP      r0,#8
        BNE      |L58.56|
        LDR      r0,|L58.208|
        LDRB     r0,[r0,#5]
        BIC      r0,r0,#0x40
        LDR      r1,|L58.208|
        STRB     r0,[r1,#5]
        NOP      
|L58.82|
        LDR      r0,|L58.208|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#0x20
        CMP      r0,#0
        BNE      |L58.82|
        CBNZ     r4,|L58.102|
        MOV      r0,r5
        BL       CLOCK_EnablePll0
|L58.102|
        LDR      r0,|L58.208|
        LDRB     r0,[r0,#5]
        ORR      r0,r0,#0x40
        LDR      r1,|L58.208|
        STRB     r0,[r1,#5]
        MOV      r0,r1
        LDRB     r0,[r0,#0x10]
        BFI      r0,r4,#4,#1
        STRB     r0,[r1,#0x10]
        NOP      
|L58.126|
        LDR      r0,|L58.208|
        LDRB     r0,[r0,#0x12]
        UBFX     r0,r0,#4,#1
        CMP      r0,r4
        BNE      |L58.126|
        NOP      
|L58.140|
        LDR      r0,|L58.208|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#0x20
        CMP      r0,#0
        BEQ      |L58.140|
        MOVS     r0,#0
        POP      {r4-r6,pc}
        ENDP

|L58.156|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L58.200|
        DCB      "config",0
        DCB      0
|L58.208|
        DCD      0x40064000

        AREA ||i.CLOCK_SetPeeMode||, CODE, READONLY, ALIGN=2

CLOCK_SetPeeMode PROC
        LDR      r0,|L59.32|
        LDRB     r0,[r0,#0]
        BIC      r0,r0,#0xc0
        LDR      r1,|L59.32|
        STRB     r0,[r1,#0]
        NOP      
|L59.14|
        LDR      r0,|L59.32|
        LDRB     r0,[r0,#6]
        UBFX     r0,r0,#2,#2
        CMP      r0,#3
        BNE      |L59.14|
        MOVS     r0,#0
        BX       lr
        ENDP

        DCW      0x0000
|L59.32|
        DCD      0x40064000

        AREA ||i.CLOCK_SetPll0MonitorMode||, CODE, READONLY, ALIGN=2

CLOCK_SetPll0MonitorMode PROC
        MOV      r1,r0
        MOVS     r2,#0x80
        LDR      r3,|L60.60|
        STRB     r2,[r3,#6]
        CBNZ     r1,|L60.22|
        MOV      r2,r3
        LDRB     r2,[r2,#5]
        BIC      r2,r2,#0x80
        STRB     r2,[r3,#5]
        B        |L60.58|
|L60.22|
        LDR      r2,|L60.60|
        LDRB     r0,[r2,#0xd]
        BIC      r0,r0,#1
        CMP      r1,#1
        BNE      |L60.40|
        BIC      r0,r0,#0x40
        B        |L60.44|
|L60.40|
        ORR      r0,r0,#0x40
|L60.44|
        LDR      r2,|L60.60|
        STRB     r0,[r2,#0xd]
        LDRB     r2,[r2,#5]
        ORR      r2,r2,#0x80
        LDR      r3,|L60.60|
        STRB     r2,[r3,#5]
|L60.58|
        BX       lr
        ENDP

|L60.60|
        DCD      0x40064000

        AREA ||i.CLOCK_SetPllClkSel||, CODE, READONLY, ALIGN=2

CLOCK_SetPllClkSel PROC
        LDR      r1,|L61.28|
        LDRB     r1,[r1,#0x10]
        BFI      r1,r0,#4,#1
        LDR      r2,|L61.28|
        STRB     r1,[r2,#0x10]
        NOP      
|L61.14|
        LDR      r1,|L61.28|
        LDRB     r1,[r1,#0x12]
        UBFX     r1,r1,#4,#1
        CMP      r1,r0
        BNE      |L61.14|
        BX       lr
        ENDP

|L61.28|
        DCD      0x40064000

        AREA ||i.CLOCK_SetRtcOscMonitorMode||, CODE, READONLY, ALIGN=2

CLOCK_SetRtcOscMonitorMode PROC
        MOV      r1,r0
        LDR      r2,|L62.32|
        LDRB     r0,[r2,#0xd]
        BIC      r0,r0,#0xa0
        CBZ      r1,|L62.24|
        CMP      r1,#2
        BNE      |L62.20|
        ORR      r0,r0,#0x80
|L62.20|
        ORR      r0,r0,#0x20
|L62.24|
        LDR      r2,|L62.32|
        STRB     r0,[r2,#0xd]
        BX       lr
        ENDP

        DCW      0x0000
|L62.32|
        DCD      0x40064000

        AREA ||i.CLOCK_SetSimConfig||, CODE, READONLY, ALIGN=2

CLOCK_SetSimConfig PROC
        PUSH     {r4,r5,lr}
        LDR      r2,|L63.64|
        LDR      r1,[r0,#4]
        STR      r1,[r2,#0x44]
        LDRB     r1,[r0,#0]
        LDRB     r3,[r0,#1]
        LDRB     r2,[r0,#2]
        LDR      r4,|L63.64|
        LDR      r4,[r4,#4]
        BFI      r4,r1,#16,#2
        LDR      r5,|L63.64|
        STR      r4,[r5,#4]
        MOVS     r4,#0xe
        AND      r4,r4,r3,LSL #1
        AND      r5,r2,#1
        ORRS     r4,r4,r5
        LDR      r5,|L63.64|
        STR      r4,[r5,#0x64]
        NOP      
        LDRB     r1,[r0,#3]
        LDR      r2,|L63.68|
        LDR      r2,[r2,#0]
        BFI      r2,r1,#18,#2
        LDR      r3,|L63.68|
        STR      r2,[r3,#0]
        NOP      
        POP      {r4,r5,pc}
        ENDP

        DCW      0x0000
|L63.64|
        DCD      0x40048000
|L63.68|
        DCD      0x40047000

        AREA ||i.CLOCK_TrimInternalRefClk||, CODE, READONLY, ALIGN=2

CLOCK_TrimInternalRefClk PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r0
        LDR      r0,|L64.200|
        CMP      r4,r0
        BHI      |L64.16|
        ASRS     r0,r0,#1
        CMP      r4,r0
        BCS      |L64.22|
|L64.16|
        MOV      r0,#0x7d2
|L64.20|
        POP      {r4-r7,pc}
|L64.22|
        LDR      r0,|L64.204|
        LDR      r0,[r0,r3,LSL #3]
        CMP      r0,r1
        BHI      |L64.44|
        LDR      r0,|L64.204|
        ADD      r0,r0,r3,LSL #3
        LDR      r0,[r0,#4]
        CMP      r0,r1
        BCS      |L64.50|
|L64.44|
        MOV      r0,#0x7d3
        B        |L64.20|
|L64.50|
        LDR      r0,|L64.208|
        LDRB     r0,[r0,#6]
        AND      r0,r0,#0x10
        CMP      r0,#0x10
        BNE      |L64.68|
        MOV      r0,#0x7d4
        B        |L64.20|
|L64.68|
        UDIV     r7,r4,r1
        RSB      r0,r7,r7,LSL #3
        ADD      r5,r0,r0,LSL #1
        CMP      r3,#1
        BNE      |L64.86|
        LSLS     r5,r5,#7
|L64.86|
        LDR      r12,|L64.208|
        STRB     r5,[r12,#0xb]
        LSRS     r0,r5,#8
        STRB     r0,[r12,#0xa]
        MOV      r0,r12
        LDRB     r6,[r0,#8]
        BIC      r6,r6,#0x41
        MOVS     r0,#0x40
        AND      r0,r0,r3,LSL #6
        ORR      r0,r0,#0x20
        ORRS     r6,r6,r0
        ORR      r0,r6,#0x80
        STRB     r0,[r12,#8]
        NOP      
|L64.130|
        LDR      r0,|L64.208|
        LDRB     r0,[r0,#8]
        AND      r0,r0,#0x80
        CMP      r0,#0
        BNE      |L64.130|
        LDR      r0,|L64.208|
        LDRB     r0,[r0,#8]
        AND      r0,r0,#0x20
        CBZ      r0,|L64.162|
        LDR      r0,|L64.208|
        STRB     r6,[r0,#8]
        MOV      r0,#0x7d5
        B        |L64.20|
|L64.162|
        UDIV     r0,r4,r7
        STR      r0,[r2,#0]
        CMP      r3,#1
        BNE      |L64.184|
        LDR      r12,|L64.212|
        LDR      r0,[r2,#0]
        STR      r0,[r12,#0]  ; s_fastIrcFreq
        B        |L64.194|
|L64.184|
        LDR      r12,|L64.216|
        LDR      r0,[r2,#0]
        STR      r0,[r12,#0]  ; s_slowIrcFreq
|L64.194|
        MOVS     r0,#0
        B        |L64.20|
        ENDP

        DCW      0x0000
|L64.200|
        DCD      0x00f42400
|L64.204|
        DCD      trimRange
|L64.208|
        DCD      0x40064000
|L64.212|
        DCD      s_fastIrcFreq
|L64.216|
        DCD      s_slowIrcFreq

        AREA ||i.SDK_DelayAtLeastUs||, CODE, READONLY, ALIGN=2

SDK_DelayAtLeastUs PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        CBZ      r6,|L65.10|
        B        |L65.22|
|L65.10|
        MOV      r2,#0xa37
        ADR      r1,|L65.164|
        ADR      r0,|L65.208|
        BL       __aeabi_assert
|L65.22|
        NOP      
        MOVS     r7,#0xb4
        LDR      r0,|L65.224|
        LDR      r0,[r0,#0]
        AND      r0,r0,#0x1000000
        CMP      r0,#0x1000000
        BEQ      |L65.52|
        LDR      r0,|L65.224|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0x1000000
        LDR      r1,|L65.224|
        STR      r0,[r1,#0]
|L65.52|
        LDR      r0,|L65.228|
        LDR      r0,[r0,#0]
        AND      r0,r0,#0x2000000
        CMP      r0,#0x2000000
        BEQ      |L65.68|
        B        |L65.80|
|L65.68|
        MOV      r2,#0xa42
        ADR      r1,|L65.164|
        ADR      r0,|L65.232|
        BL       __aeabi_assert
|L65.80|
        LDR      r0,|L65.228|
        LDR      r0,[r0,#0]
        AND      r0,r0,#1
        CBNZ     r0,|L65.102|
        LDR      r0,|L65.228|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#1
        LDR      r1,|L65.228|
        STR      r0,[r1,#0]
|L65.102|
        LDR      r0,|L65.228|
        LDR      r4,[r0,#4]
        MOVS     r5,#0
        UMULL    r1,r0,r7,r6
        ADDS     r4,r1,r4
        ADCS     r5,r5,r0
        MOVS     r0,#0
        RSBS     r1,r4,#0xffffffff
        SBCS     r0,r0,r5
        BCS      |L65.146|
        ADDS     r4,r4,#1
        SBC      r5,r5,#0
        NOP      
|L65.134|
        LDR      r0,|L65.228|
        LDR      r0,[r0,#4]
        SUBS     r0,r4,r0
        SBCS     r0,r5,#0
        BCC      |L65.134|
|L65.146|
        NOP      
|L65.148|
        LDR      r0,|L65.228|
        LDR      r0,[r0,#4]
        MOVS     r1,#0
        SUBS     r0,r0,r4
        SBCS     r1,r1,r5
        BCC      |L65.148|
        POP      {r4-r8,pc}
        ENDP

|L65.164|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c",0
        DCB      0
        DCB      0
|L65.208|
        DCB      "0U != delay_us",0
        DCB      0
|L65.224|
        DCD      0xe000edfc
|L65.228|
        DCD      0xe0001000
|L65.232|
        DCB      "DWT_CTRL_NOCYCCNT_Msk != (DWT->CTRL & DWT_CTRL_NOCYCCNT"
        DCB      "_Msk)",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

mcgModeMatrix
        DCB      0x00,0x01,0x01,0x03
        DCB      0x04,0x04,0x04,0x04
        DCB      0x00,0x01,0x02,0x03
        DCB      0x04,0x04,0x04,0x04
        DCB      0x01,0x01,0x02,0x01
        DCB      0x01,0x01,0x01,0x01
        DCB      0x00,0x01,0x01,0x03
        DCB      0x04,0x04,0x04,0x04
        DCB      0x00,0x01,0x01,0x03
        DCB      0x04,0x05,0x06,0x06
        DCB      0x04,0x04,0x04,0x04
        DCB      0x04,0x05,0x06,0x06
        DCB      0x04,0x04,0x04,0x04
        DCB      0x04,0x05,0x06,0x07
        DCB      0x06,0x06,0x06,0x06
        DCB      0x06,0x06,0x06,0x06
fllFactorTable
        DCW      0x0280,0x02dc
        DCW      0x0500,0x05b8
        DCW      0x0780,0x0895
        DCW      0x0a00,0x0b71
trimRange
        DCD      0x00007a12
        DCD      0x00009897
        DCD      0x002dc6c0
        DCD      0x004c4b40

        AREA ||.data||, DATA, ALIGN=2

s_slowIrcFreq
        DCD      0x00008000
s_fastIrcFreq
        DCD      0x003d0900
s_extPllFreq
        DCD      0x00000000
g_xtal0Freq
        DCD      0x00000000
g_xtal32Freq
        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_clock.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_clock_c_d2c71d91____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_fsl_clock_c_d2c71d91____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_clock_c_d2c71d91____REVSH|
#line 483
|__asm___11_fsl_clock_c_d2c71d91____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_fsl_clock_c_d2c71d91____RRX|
#line 670
|__asm___11_fsl_clock_c_d2c71d91____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT CLOCK_BootToBlpeMode [CODE]
        EXPORT CLOCK_BootToBlpiMode [CODE]
        EXPORT CLOCK_BootToFeeMode [CODE]
        EXPORT CLOCK_BootToFeiMode [CODE]
        EXPORT CLOCK_BootToPeeMode [CODE]
        EXPORT CLOCK_CalcPllDiv [CODE]
        EXPORT CLOCK_ClearStatusFlags [CODE]
        EXPORT CLOCK_DeinitOsc0 [CODE]
        EXPORT CLOCK_DisableUsbhs0Clock [CODE]
        EXPORT CLOCK_DisableUsbhs0PfdClock [CODE]
        EXPORT CLOCK_DisableUsbhs0PhyPllClock [CODE]
        EXPORT CLOCK_EnablePll0 [CODE]
        EXPORT CLOCK_EnableUsbfs0Clock [CODE]
        EXPORT CLOCK_EnableUsbhs0Clock [CODE]
        EXPORT CLOCK_EnableUsbhs0PfdClock [CODE]
        EXPORT CLOCK_EnableUsbhs0PhyPllClock [CODE]
        EXPORT CLOCK_ExternalModeToFbeModeQuick [CODE]
        EXPORT CLOCK_GetBusClkFreq [CODE]
        EXPORT CLOCK_GetCoreSysClkFreq [CODE]
        EXPORT CLOCK_GetEr32kClkFreq [CODE]
        EXPORT CLOCK_GetExtPllFreq [CODE]
        EXPORT CLOCK_GetFixedFreqClkFreq [CODE]
        EXPORT CLOCK_GetFlashClkFreq [CODE]
        EXPORT CLOCK_GetFlexBusClkFreq [CODE]
        EXPORT CLOCK_GetFllFreq [CODE]
        EXPORT CLOCK_GetFreq [CODE]
        EXPORT CLOCK_GetInternalRefClkFreq [CODE]
        EXPORT CLOCK_GetMode [CODE]
        EXPORT CLOCK_GetOsc0ErClkDivFreq [CODE]
        EXPORT CLOCK_GetOsc0ErClkFreq [CODE]
        EXPORT CLOCK_GetOsc0ErClkUndivFreq [CODE]
        EXPORT CLOCK_GetOutClkFreq [CODE]
        EXPORT CLOCK_GetPlatClkFreq [CODE]
        EXPORT CLOCK_GetPll0Freq [CODE]
        EXPORT CLOCK_GetPllFllSelClkFreq [CODE]
        EXPORT CLOCK_GetStatusFlags [CODE]
        EXPORT CLOCK_InitOsc0 [CODE]
        EXPORT CLOCK_InternalModeToFbiModeQuick [CODE]
        EXPORT CLOCK_SetBlpeMode [CODE]
        EXPORT CLOCK_SetBlpiMode [CODE]
        EXPORT CLOCK_SetExtPllFreq [CODE]
        EXPORT CLOCK_SetExtPllMonitorMode [CODE]
        EXPORT CLOCK_SetExternalRefClkConfig [CODE]
        EXPORT CLOCK_SetFbeMode [CODE]
        EXPORT CLOCK_SetFbiMode [CODE]
        EXPORT CLOCK_SetFeeMode [CODE]
        EXPORT CLOCK_SetFeiMode [CODE]
        EXPORT CLOCK_SetInternalRefClkConfig [CODE]
        EXPORT CLOCK_SetMcgConfig [CODE]
        EXPORT CLOCK_SetOsc0MonitorMode [CODE]
        EXPORT CLOCK_SetPbeMode [CODE]
        EXPORT CLOCK_SetPeeMode [CODE]
        EXPORT CLOCK_SetPll0MonitorMode [CODE]
        EXPORT CLOCK_SetPllClkSel [CODE]
        EXPORT CLOCK_SetRtcOscMonitorMode [CODE]
        EXPORT CLOCK_SetSimConfig [CODE]
        EXPORT CLOCK_TrimInternalRefClk [CODE]
        EXPORT SDK_DelayAtLeastUs [CODE,WEAK]
        EXPORT g_xtal0Freq [DATA,SIZE=4]
        EXPORT g_xtal32Freq [DATA,SIZE=4]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_assert [CODE]

        KEEP CLOCK_FllStableDelay
        KEEP CLOCK_GetFllExtRefClkFreq
        KEEP CLOCK_GetFllRefClkFreq
        KEEP CLOCK_GetInternalRefClkSelectFreq
        KEEP CLOCK_GetMcgExtClkFreq
        KEEP CLOCK_GetOscRangeFromFreq
        KEEP CLOCK_GetPll0RefFreq
        KEEP mcgModeMatrix
        KEEP fllFactorTable
        KEEP trimRange
        KEEP s_slowIrcFreq
        KEEP s_fastIrcFreq
        KEEP s_extPllFreq

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
