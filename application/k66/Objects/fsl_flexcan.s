; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_flexcan.o --depend=.\objects\fsl_flexcan.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_flexcan.crf ..\..\devices\MK66F18\drivers\fsl_flexcan.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.CAN0_DriverIRQHandler||, CODE, READONLY, ALIGN=2

CAN0_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L1.52|
        LDR      r0,[r0,#0]  ; s_flexcanHandle
        CBZ      r0,|L1.10|
        B        |L1.22|
|L1.10|
        MOV      r2,#0xc1e
        ADR      r1,|L1.56|
        ADR      r0,|L1.100|
        BL       __aeabi_assert
|L1.22|
        LDR      r0,|L1.52|
        LDR      r1,[r0,#0]  ; s_flexcanHandle
        LDR      r0,|L1.128|
        LDR      r2,|L1.132|
        LDR      r2,[r2,#0]  ; s_flexcanIsr
        BLX      r2
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L1.52|
        DCD      s_flexcanHandle
|L1.56|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L1.100|
        DCB      "NULL != s_flexcanHandle[0]",0
        DCB      0
|L1.128|
        DCD      0x40024000
|L1.132|
        DCD      s_flexcanIsr

        AREA ||i.CAN1_DriverIRQHandler||, CODE, READONLY, ALIGN=2

CAN1_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L2.52|
        LDR      r0,[r0,#4]  ; s_flexcanHandle
        CBZ      r0,|L2.10|
        B        |L2.22|
|L2.10|
        MOV      r2,#0xc2c
        ADR      r1,|L2.56|
        ADR      r0,|L2.100|
        BL       __aeabi_assert
|L2.22|
        LDR      r0,|L2.52|
        LDR      r1,[r0,#4]  ; s_flexcanHandle
        LDR      r0,|L2.128|
        LDR      r2,|L2.132|
        LDR      r2,[r2,#0]  ; s_flexcanIsr
        BLX      r2
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L2.52|
        DCD      s_flexcanHandle
|L2.56|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L2.100|
        DCB      "NULL != s_flexcanHandle[1]",0
        DCB      0
|L2.128|
        DCD      0x400a4000
|L2.132|
        DCD      s_flexcanIsr

        AREA ||i.EnableIRQ||, CODE, READONLY, ALIGN=1

EnableIRQ PROC
        MOV      r1,r0
        CMN      r1,#0x80
        BNE      |L3.12|
        MOVS     r0,#1
|L3.10|
        BX       lr
|L3.12|
        MOV      r0,r1
        CMP      r0,#0
        BLT      |L3.38|
        AND      r3,r0,#0x1f
        MOVS     r2,#1
        LSLS     r2,r2,r3
        LSRS     r3,r0,#5
        LSLS     r3,r3,#2
        ADD      r3,r3,#0xe000e000
        STR      r2,[r3,#0x100]
|L3.38|
        NOP      
        MOVS     r0,#0
        B        |L3.10|
        ENDP


        AREA ||i.FLEXCAN_CalculateImprovedTimingValues||, CODE, READONLY, ALIGN=2

FLEXCAN_CalculateImprovedTimingValues PROC
        PUSH     {r4-r10,lr}
        MOV      r8,r0
        MOV      r7,r1
        MOV      r4,r2
        LDR      r0,|L4.132|
        CMP      r8,r0
        BHI      |L4.18|
        B        |L4.30|
|L4.18|
        MOV      r2,#0x4af
        ADR      r1,|L4.136|
        ADR      r0,|L4.180|
        BL       __aeabi_assert
|L4.30|
        MOVS     r6,#0x19
        B        |L4.124|
|L4.34|
        MUL      r5,r8,r6
        CMP      r5,r7
        BLS      |L4.44|
        B        |L4.122|
|L4.44|
        MOVS     r0,#0
        STRH     r0,[r4,#0]
        B        |L4.114|
|L4.50|
        LDRH     r0,[r4,#0]
        ADDS     r0,r0,#1
        UDIV     r0,r5,r0
        LDRH     r1,[r4,#0]
        ADDS     r1,r1,#1
        MULS     r0,r1,r0
        CMP      r0,r5
        BEQ      |L4.70|
        B        |L4.108|
|L4.70|
        LDRH     r0,[r4,#0]
        ADDS     r0,r0,#1
        UDIV     r9,r5,r0
        UDIV     r0,r7,r9
        MUL      r0,r0,r9
        CMP      r0,r7
        BEQ      |L4.92|
        B        |L4.108|
|L4.92|
        MOV      r2,r4
        MOV      r1,r6
        MOV      r0,r8
        BL       FLEXCAN_GetSegments
        MOVS     r0,#1
|L4.104|
        POP      {r4-r10,pc}
|L4.108|
        LDRH     r0,[r4,#0]
        ADDS     r0,r0,#1
        STRH     r0,[r4,#0]
|L4.114|
        LDRH     r0,[r4,#0]
        CMP      r0,#0xff
        BLS      |L4.50|
        NOP      
|L4.122|
        SUBS     r6,r6,#1
|L4.124|
        CMP      r6,#8
        BCS      |L4.34|
        MOVS     r0,#0
        B        |L4.104|
        ENDP

|L4.132|
        DCD      0x000f4240
|L4.136|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L4.180|
        DCB      "baudRate <= MAX_CAN_BAUDRATE",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.FLEXCAN_ClearMbStatusFlags||, CODE, READONLY, ALIGN=1

FLEXCAN_ClearMbStatusFlags PROC
        STR      r1,[r0,#0x30]
        BX       lr
        ENDP


        AREA ||i.FLEXCAN_ClearStatusFlags||, CODE, READONLY, ALIGN=1

FLEXCAN_ClearStatusFlags PROC
        STR      r1,[r0,#0x20]
        BX       lr
        ENDP


        AREA ||i.FLEXCAN_Deinit||, CODE, READONLY, ALIGN=2

FLEXCAN_Deinit PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r0,r4
        BL       FLEXCAN_Reset
        MOVS     r1,#0
        MOV      r0,r4
        BL       FLEXCAN_Enable
        MOV      r0,r4
        BL       FLEXCAN_GetInstance
        MOV      r5,r0
        LDR      r1,|L7.52|
        LDR      r0,[r1,r5,LSL #2]
        LDR      r2,|L7.56|
        ADD      r1,r2,r0,LSR #16
        LDR      r2,[r1,#0]
        MOVS     r3,#1
        LSLS     r3,r3,r0
        BICS     r2,r2,r3
        STR      r2,[r1,#0]
        NOP      
        POP      {r4-r6,pc}
        ENDP

|L7.52|
        DCD      s_flexcanClock
|L7.56|
        DCD      0x40047000

        AREA ||i.FLEXCAN_DisableMbInterrupts||, CODE, READONLY, ALIGN=1

FLEXCAN_DisableMbInterrupts PROC
        LDR      r2,[r0,#0x28]
        BICS     r2,r2,r1
        STR      r2,[r0,#0x28]
        BX       lr
        ENDP


        AREA ||i.FLEXCAN_Enable||, CODE, READONLY, ALIGN=1

FLEXCAN_Enable PROC
        CBZ      r1,|L9.24|
        LDR      r2,[r0,#0]
        BIC      r2,r2,#0x80000000
        STR      r2,[r0,#0]
        NOP      
|L9.12|
        LDR      r2,[r0,#0]
        AND      r2,r2,#0x100000
        CMP      r2,#0
        BNE      |L9.12|
        B        |L9.44|
|L9.24|
        LDR      r2,[r0,#0]
        ORR      r2,r2,#0x80000000
        STR      r2,[r0,#0]
        NOP      
|L9.34|
        LDR      r2,[r0,#0]
        AND      r2,r2,#0x100000
        CMP      r2,#0
        BEQ      |L9.34|
|L9.44|
        BX       lr
        ENDP


        AREA ||i.FLEXCAN_EnableMbInterrupts||, CODE, READONLY, ALIGN=1

FLEXCAN_EnableMbInterrupts PROC
        LDR      r2,[r0,#0x28]
        ORRS     r2,r2,r1
        STR      r2,[r0,#0x28]
        BX       lr
        ENDP


        AREA ||i.FLEXCAN_EnterFreezeMode||, CODE, READONLY, ALIGN=1

FLEXCAN_EnterFreezeMode PROC
        LDR      r1,[r0,#0]
        ORR      r1,r1,#0x40000000
        STR      r1,[r0,#0]
        LDR      r1,[r0,#0]
        ORR      r1,r1,#0x10000000
        STR      r1,[r0,#0]
        NOP      
|L11.18|
        LDR      r1,[r0,#0]
        AND      r1,r1,#0x1000000
        CMP      r1,#0
        BEQ      |L11.18|
        BX       lr
        ENDP


        AREA ||i.FLEXCAN_ExitFreezeMode||, CODE, READONLY, ALIGN=1

FLEXCAN_ExitFreezeMode PROC
        LDR      r1,[r0,#0]
        BIC      r1,r1,#0x10000000
        STR      r1,[r0,#0]
        LDR      r1,[r0,#0]
        BIC      r1,r1,#0x40000000
        STR      r1,[r0,#0]
        NOP      
|L12.18|
        LDR      r1,[r0,#0]
        AND      r1,r1,#0x1000000
        CMP      r1,#0
        BNE      |L12.18|
        BX       lr
        ENDP


        AREA ||i.FLEXCAN_GetDefaultConfig||, CODE, READONLY, ALIGN=2

FLEXCAN_GetDefaultConfig PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L13.8|
        B        |L13.20|
|L13.8|
        MOV      r2,#0x384
        ADR      r1,|L13.72|
        ADR      r0,|L13.116|
        BL       __aeabi_assert
|L13.20|
        MOVS     r1,#0x14
        MOV      r0,r4
        BL       __aeabi_memclr4
        MOVS     r0,#0
        STRB     r0,[r4,#4]
        LDR      r0,|L13.132|
        STR      r0,[r4,#0]
        MOVS     r0,#0x10
        STRB     r0,[r4,#6]
        MOVS     r0,#0
        STRB     r0,[r4,#7]
        MOVS     r0,#1
        STRB     r0,[r4,#8]
        MOVS     r0,#0
        STRB     r0,[r4,#9]
        STRB     r0,[r4,#5]
        STRB     r0,[r4,#0xa]
        MOVS     r1,#3
        STRB     r1,[r4,#0xf]
        MOVS     r1,#2
        STRB     r1,[r4,#0x10]
        MOVS     r1,#1
        STRB     r1,[r4,#0x11]
        STRB     r1,[r4,#0xe]
        POP      {r4,pc}
        ENDP

|L13.72|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L13.116|
        DCB      "NULL != config",0
        DCB      0
|L13.132|
        DCD      0x000f4240

        AREA ||i.FLEXCAN_GetInstance||, CODE, READONLY, ALIGN=2

FLEXCAN_GetInstance PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r4,#0
        B        |L14.22|
|L14.8|
        LDR      r0,|L14.52|
        LDR      r0,[r0,r4,LSL #2]
        CMP      r0,r5
        BNE      |L14.20|
        B        |L14.26|
|L14.20|
        ADDS     r4,r4,#1
|L14.22|
        CMP      r4,#2
        BCC      |L14.8|
|L14.26|
        NOP      
        CMP      r4,#2
        BCS      |L14.34|
        B        |L14.46|
|L14.34|
        MOV      r2,#0x12d
        ADR      r1,|L14.56|
        ADR      r0,|L14.100|
        BL       __aeabi_assert
|L14.46|
        MOV      r0,r4
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L14.52|
        DCD      s_flexcanBases
|L14.56|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L14.100|
        DCB      "instance < ARRAY_SIZE(s_flexcanBases)",0
        DCB      0
        DCB      0

        AREA ||i.FLEXCAN_GetMbStatusFlags||, CODE, READONLY, ALIGN=1

FLEXCAN_GetMbStatusFlags PROC
        MOV      r2,r0
        LDR      r0,[r2,#0x30]
        ANDS     r0,r0,r1
        BX       lr
        ENDP


        AREA ||i.FLEXCAN_GetSegments||, CODE, READONLY, ALIGN=2

FLEXCAN_GetSegments PROC
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        MOV      r5,r1
        MOV      r4,r2
        LDR      r0,|L16.148|
        CMP      r7,r0
        BCC      |L16.22|
        MOV      r6,#0x2ee
        B        |L16.38|
|L16.22|
        LDR      r0,|L16.152|
        CMP      r7,r0
        BCC      |L16.34|
        MOV      r6,#0x320
        B        |L16.38|
|L16.34|
        MOV      r6,#0x36b
|L16.38|
        MUL      r8,r5,r6
        MOVS     r0,#0
        STRB     r0,[r4,#5]
        MOV      r0,#0x3e8
        UDIV     r0,r8,r0
        SUBS     r0,r0,#2
        STRB     r0,[r4,#3]
        LDRB     r0,[r4,#3]
        CMP      r0,#0xe
        BLS      |L16.72|
        MOVS     r0,#7
        STRB     r0,[r4,#3]
        STRB     r0,[r4,#5]
        B        |L16.88|
|L16.72|
        LDRB     r0,[r4,#3]
        CMP      r0,#7
        BLS      |L16.88|
        LDRB     r0,[r4,#3]
        SUBS     r0,r0,#7
        STRB     r0,[r4,#5]
        MOVS     r0,#7
        STRB     r0,[r4,#3]
|L16.88|
        LDRB     r0,[r4,#3]
        ADDS     r0,r0,#2
        LDRB     r1,[r4,#5]
        ADD      r0,r0,r1
        ADDS     r0,r0,#2
        SUBS     r0,r5,r0
        STRB     r0,[r4,#4]
        LDRB     r0,[r4,#4]
        CMP      r0,#7
        BHI      |L16.110|
        B        |L16.122|
|L16.110|
        MOV      r2,#0x494
        ADR      r1,|L16.156|
        ADR      r0,|L16.200|
        BL       __aeabi_assert
|L16.122|
        ADDS     r0,r5,#4
        MOVS     r1,#5
        UDIV     r0,r0,r1
        SUBS     r0,r0,#1
        STRB     r0,[r4,#2]
        LDRB     r0,[r4,#2]
        CMP      r0,#3
        BLS      |L16.144|
        MOVS     r0,#3
        STRB     r0,[r4,#2]
|L16.144|
        POP      {r4-r8,pc}
        ENDP

|L16.148|
        DCD      0x000f4240
|L16.152|
        DCD      0x000c3500
|L16.156|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L16.200|
        DCB      "pconfig->phaseSeg2 <= MAX_PSEG2",0

        AREA ||i.FLEXCAN_Init||, CODE, READONLY, ALIGN=2

FLEXCAN_Init PROC
        PUSH     {r1-r9,lr}
        MOV      r5,r0
        MOV      r4,r1
        MOV      r7,r2
        CBZ      r4,|L17.14|
        B        |L17.26|
|L17.14|
        MOV      r2,#0x2ad
        ADR      r1,|L17.272|
        ADR      r0,|L17.316|
        BL       __aeabi_assert
|L17.26|
        LDRB     r0,[r4,#6]
        CBZ      r0,|L17.38|
        LDRB     r0,[r4,#6]
        CMP      r0,#0x10
        BGT      |L17.38|
        B        |L17.50|
|L17.38|
        MOV      r2,#0x2ae
        ADR      r1,|L17.272|
        LDR      r0,|L17.332|
        BL       __aeabi_assert
|L17.50|
        MOV      r0,r5
        BL       FLEXCAN_GetInstance
        MOV      r8,r0
        LDR      r1,|L17.336|
        LDR      r0,[r1,r8,LSL #2]
        LDR      r2,|L17.340|
        ADD      r1,r2,r0,LSR #16
        LDR      r2,[r1,#0]
        MOVS     r3,#1
        LSLS     r3,r3,r0
        ORRS     r2,r2,r3
        STR      r2,[r1,#0]
        NOP      
        MOVS     r1,#0
        MOV      r0,r5
        BL       FLEXCAN_Enable
        LDRB     r0,[r4,#4]
        CBNZ     r0,|L17.102|
        LDR      r0,[r5,#4]
        BIC      r0,r0,#0x2000
        B        |L17.108|
|L17.102|
        LDR      r0,[r5,#4]
        ORR      r0,r0,#0x2000
|L17.108|
        STR      r0,[r5,#4]
        MOVS     r1,#1
        MOV      r0,r5
        BL       FLEXCAN_Enable
        MOV      r0,r5
        BL       FLEXCAN_Reset
        LDR      r6,[r5,#0]
        LDRB     r0,[r4,#6]
        SUBS     r0,r0,#1
        MOV      r1,r6
        BFI      r1,r0,#0,#7
        MOV      r6,r1
        LDRB     r0,[r4,#7]
        CMP      r0,#1
        BNE      |L17.152|
        LDR      r0,[r5,#4]
        ORR      r0,r0,#0x1000
        B        |L17.158|
|L17.152|
        LDR      r0,[r5,#4]
        BIC      r0,r0,#0x1000
|L17.158|
        STR      r0,[r5,#4]
        LDRB     r0,[r4,#8]
        CMP      r0,#1
        BNE      |L17.174|
        LDR      r0,[r5,#4]
        ORR      r0,r0,#0x20
        B        |L17.180|
|L17.174|
        LDR      r0,[r5,#4]
        BIC      r0,r0,#0x20
|L17.180|
        STR      r0,[r5,#4]
        LDRB     r0,[r4,#9]
        CMP      r0,#1
        BNE      |L17.194|
        ORR      r0,r6,#0x400000
        B        |L17.198|
|L17.194|
        BIC      r0,r6,#0x400000
|L17.198|
        MOV      r6,r0
        LDRB     r0,[r4,#5]
        CMP      r0,#1
        BNE      |L17.212|
        ORR      r0,r6,#0x80000
        B        |L17.216|
|L17.212|
        BIC      r0,r6,#0x80000
|L17.216|
        MOV      r6,r0
        LDRB     r0,[r4,#0xa]
        CMP      r0,#1
        BNE      |L17.230|
        ORR      r0,r6,#0x10000
        B        |L17.234|
|L17.230|
        BIC      r0,r6,#0x10000
|L17.234|
        MOV      r6,r0
        STR      r6,[r5,#0]
        LDRH     r0,[r4,#0x10]
        STRH     r0,[sp,#0]
        LDR      r0,[r4,#0xc]
        STR      r0,[sp,#4]
        LDRH     r0,[r4,#0x10]
        STRH     r0,[sp,#8]
        LDR      r2,[r4,#0]
        MOV      r1,r7
        MOV      r0,r5
        LDR      r3,[sp,#4]
        BL       FLEXCAN_SetBaudRate
        POP      {r1-r9,pc}
        ENDP

        DCW      0x0000
|L17.272|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L17.316|
        DCB      "NULL != config",0
        DCB      0
|L17.332|
        DCD      ||.conststring||+0x4c
|L17.336|
        DCD      s_flexcanClock
|L17.340|
        DCD      0x40047000

        AREA ||i.FLEXCAN_IsMbIntEnabled||, CODE, READONLY, ALIGN=2

FLEXCAN_IsMbIntEnabled PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CMP      r4,#0x10
        BGE      |L18.12|
        B        |L18.24|
|L18.12|
        MOV      r2,#0x1db
        ADR      r1,|L18.44|
        LDR      r0,|L18.88|
        BL       __aeabi_assert
|L18.24|
        LDR      r0,[r5,#0x28]
        MOVS     r1,#1
        LSLS     r1,r1,r4
        ANDS     r0,r0,r1
        CBZ      r0,|L18.38|
        MOVS     r0,#1
|L18.36|
        POP      {r4-r6,pc}
|L18.38|
        MOVS     r0,#0
        B        |L18.36|
        ENDP

        DCW      0x0000
|L18.44|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L18.88|
        DCD      ||.conststring||

        AREA ||i.FLEXCAN_IsMbOccupied||, CODE, READONLY, ALIGN=1

FLEXCAN_IsMbOccupied PROC
        PUSH     {r4,lr}
        MOV      r2,r0
        LDR      r0,[r2,#0]
        AND      r0,r0,#0x20000000
        CBZ      r0,|L19.38|
        LDR      r0,[r2,#0x34]
        UBFX     r3,r0,#24,#4
        ADDS     r0,r3,#1
        MOVS     r4,#5
        ADD      r3,r4,r0,LSL #1
        CMP      r1,r3
        BGT      |L19.34|
        MOVS     r0,#1
|L19.32|
        POP      {r4,pc}
|L19.34|
        MOVS     r0,#0
        B        |L19.32|
|L19.38|
        MOVS     r0,#0
        B        |L19.32|
        ENDP


        AREA ||i.FLEXCAN_ReadRxFifo||, CODE, READONLY, ALIGN=2

FLEXCAN_ReadRxFifo PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L20.10|
        B        |L20.22|
|L20.10|
        MOV      r2,#0x882
        ADR      r1,|L20.116|
        ADR      r0,|L20.160|
        BL       __aeabi_assert
|L20.22|
        LDR      r0,[r5,#0]
        AND      r0,r0,#0x20000000
        CBZ      r0,|L20.112|
        LDR      r6,[r5,#0x80]
        MOVS     r0,#0x84
        LDR      r0,[r0,r5]
        BIC      r0,r0,#0xe0000000
        STR      r0,[r4,#4]
        LSRS     r1,r6,#21
        LDR      r0,[r4,#0]
        BFI      r0,r1,#21,#1
        STR      r0,[r4,#0]
        LSRS     r1,r6,#20
        LDR      r0,[r4,#0]
        BFI      r0,r1,#20,#1
        STR      r0,[r4,#0]
        LSRS     r1,r6,#16
        LDR      r0,[r4,#0]
        BFI      r0,r1,#16,#4
        STR      r0,[r4,#0]
        LDR      r0,[r4,#0]
        BFI      r0,r6,#0,#16
        STR      r0,[r4,#0]
        MOVS     r0,#0x88
        LDR      r0,[r0,r5]
        STR      r0,[r4,#8]
        MOVS     r0,#0x8c
        LDR      r1,[r0,r5]
        STR      r1,[r4,#0xc]
        LDR      r0,[r5,#0x4c]
        UXTB     r1,r0
        LDR      r0,[r4,#0]
        BFI      r0,r1,#23,#9
        STR      r0,[r4,#0]
        LDR      r0,[r5,#8]
        MOVS     r0,#0
|L20.110|
        POP      {r4-r6,pc}
|L20.112|
        MOVS     r0,#1
        B        |L20.110|
        ENDP

|L20.116|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L20.160|
        DCB      "NULL != rxFrame",0

        AREA ||i.FLEXCAN_ReadRxMb||, CODE, READONLY, ALIGN=2

FLEXCAN_ReadRxMb PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r7,r1
        MOV      r4,r2
        LDR      r0,[r5,#0]
        AND      r0,r0,#0x7f
        CMP      r0,r7
        BCC      |L21.22|
        B        |L21.34|
|L21.22|
        MOV      r2,#0x7dd
        ADR      r1,|L21.204|
        ADR      r0,|L21.248|
        BL       __aeabi_assert
|L21.34|
        CBZ      r4,|L21.38|
        B        |L21.50|
|L21.38|
        MOV      r2,#0x7de
        ADR      r1,|L21.204|
        ADR      r0,|L21.292|
        BL       __aeabi_assert
|L21.50|
        MOV      r1,r7
        MOV      r0,r5
        BL       FLEXCAN_IsMbOccupied
        CBNZ     r0,|L21.62|
        B        |L21.74|
|L21.62|
        MOV      r2,#0x7df
        ADR      r1,|L21.204|
        ADR      r0,|L21.308|
        BL       __aeabi_assert
|L21.74|
        ADD      r0,r5,#0x80
        ADD      r0,r0,r7,LSL #4
        LDR      r6,[r0,#0]
        UBFX     r8,r6,#24,#4
        CMP      r8,#2
        BEQ      |L21.100|
        CMP      r8,#6
        BNE      |L21.198|
|L21.100|
        ADD      r0,r5,#0x80
        ADD      r0,r0,r7,LSL #4
        LDR      r0,[r0,#4]
        BIC      r0,r0,#0xe0000000
        STR      r0,[r4,#4]
        LSRS     r1,r6,#21
        LDR      r0,[r4,#0]
        BFI      r0,r1,#21,#1
        STR      r0,[r4,#0]
        LSRS     r1,r6,#20
        LDR      r0,[r4,#0]
        BFI      r0,r1,#20,#1
        STR      r0,[r4,#0]
        LSRS     r1,r6,#16
        LDR      r0,[r4,#0]
        BFI      r0,r1,#16,#4
        STR      r0,[r4,#0]
        LDR      r0,[r4,#0]
        BFI      r0,r6,#0,#16
        STR      r0,[r4,#0]
        ADD      r0,r5,#0x80
        ADD      r0,r0,r7,LSL #4
        LDR      r0,[r0,#8]
        STR      r0,[r4,#8]
        ADD      r0,r5,#0x80
        ADD      r0,r0,r7,LSL #4
        LDR      r1,[r0,#0xc]
        STR      r1,[r4,#0xc]
        LDR      r0,[r5,#8]
        CMP      r8,#2
        BNE      |L21.192|
        MOVS     r0,#0
|L21.188|
        POP      {r4-r8,pc}
|L21.192|
        MOV      r0,#0x14b9
        B        |L21.188|
|L21.198|
        LDR      r0,[r5,#8]
        MOVS     r0,#1
        B        |L21.188|
        ENDP

|L21.204|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L21.248|
        DCB      "mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK)",0
        DCB      0
        DCB      0
|L21.292|
        DCB      "NULL != rxFrame",0
|L21.308|
        DCB      "false == FLEXCAN_IsMbOccupied(base, mbIdx)",0
        DCB      0

        AREA ||i.FLEXCAN_Reset||, CODE, READONLY, ALIGN=2

FLEXCAN_Reset PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        LDR      r0,[r4,#0]
        AND      r0,r0,#0x80000000
        CBNZ     r0,|L22.14|
        B        |L22.26|
|L22.14|
        MOV      r2,#0x1fe
        ADR      r1,|L22.140|
        ADR      r0,|L22.184|
        BL       __aeabi_assert
|L22.26|
        NOP      
|L22.28|
        LDR      r0,[r4,#0]
        AND      r0,r0,#0x100000
        CMP      r0,#0
        BNE      |L22.28|
        LDR      r0,[r4,#0]
        ORR      r0,r0,#0x2000000
        STR      r0,[r4,#0]
        NOP      
|L22.48|
        LDR      r0,[r4,#0]
        AND      r0,r0,#0x2000000
        CMP      r0,#0
        BNE      |L22.48|
        LDR      r0,[r4,#0]
        LDR      r1,|L22.224|
        ORRS     r0,r0,r1
        STR      r0,[r4,#0]
        MOVS     r0,#0x80
        STR      r0,[r4,#4]
        MOV      r0,#0xb30000
        STR      r0,[r4,#0x34]
        MOVS     r5,#0
        B        |L22.96|
|L22.80|
        MVN      r1,#0xc0000000
        ADD      r0,r4,#0x880
        STR      r1,[r0,r5,LSL #2]
        ADDS     r0,r5,#1
        UXTB     r5,r0
|L22.96|
        CMP      r5,#0x10
        BCC      |L22.80|
        MVN      r0,#0xc0000000
        STR      r0,[r4,#0x10]
        STR      r0,[r4,#0x14]
        STR      r0,[r4,#0x18]
        STR      r0,[r4,#0x48]
        MOVS     r5,#0
        B        |L22.132|
|L22.116|
        MOVS     r1,#0
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#0]
        ADDS     r0,r5,#1
        UXTB     r5,r0
|L22.132|
        CMP      r5,#0x10
        BCC      |L22.116|
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L22.140|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L22.184|
        DCB      "0U == (base->MCR & CAN_MCR_MDIS_MASK)",0
        DCB      0
        DCB      0
|L22.224|
        DCD      0x0028000f

        AREA ||i.FLEXCAN_SetBaudRate||, CODE, READONLY, ALIGN=2

FLEXCAN_SetBaudRate PROC
        PUSH     {r0-r3}
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        MOV      r5,r1
        MOV      r6,r2
        LDRB     r0,[sp,#0x27]
        ADDS     r0,r0,#2
        LDRB     r1,[sp,#0x28]
        ADDS     r1,r1,#1
        ADD      r1,r1,r0
        LDRB     r0,[sp,#0x29]
        ADDS     r0,r0,#1
        ADD      r8,r1,r0
        MUL      r4,r6,r8
        LDR      r0,|L23.116|
        CMP      r6,r0
        BHI      |L23.48|
        B        |L23.60|
|L23.48|
        MOV      r2,#0x251
        ADR      r1,|L23.120|
        ADR      r0,|L23.164|
        BL       __aeabi_assert
|L23.60|
        CMP      r4,r5
        BHI      |L23.66|
        B        |L23.78|
|L23.66|
        MOV      r2,#0x253
        ADR      r1,|L23.120|
        ADR      r0,|L23.192|
        BL       __aeabi_assert
|L23.78|
        CBNZ     r4,|L23.82|
        MOVS     r4,#1
|L23.82|
        UDIV     r0,r5,r4
        SUBS     r4,r0,#1
        CMP      r4,#0xff
        BLS      |L23.94|
        MOVS     r4,#0xff
|L23.94|
        UXTH     r0,r4
        STRH     r0,[sp,#0x24]
        ADD      r1,sp,#0x24
        MOV      r0,r7
        BL       FLEXCAN_SetTimingConfig
        POP      {r4-r8}
        LDR      pc,[sp],#0x14
        ENDP

|L23.116|
        DCD      0x000f4240
|L23.120|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L23.164|
        DCB      "baudRate_Bps <= 1000000U",0
        DCB      0
        DCB      0
        DCB      0
|L23.192|
        DCB      "priDiv <= sourceClock_Hz",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.FLEXCAN_SetRxFifoConfig||, CODE, READONLY, ALIGN=2

FLEXCAN_SetRxFifoConfig PROC
        PUSH     {r4-r10,lr}
        MOV      r4,r0
        MOV      r6,r1
        MOV      r8,r2
        CBNZ     r6,|L24.18|
        CMP      r8,#0
        BNE      |L24.20|
|L24.18|
        B        |L24.32|
|L24.20|
        MOV      r2,#0x657
        ADR      r1,|L24.436|
        ADR      r0,|L24.480|
        BL       __aeabi_assert
|L24.32|
        ADD      r9,r4,#0xe0
        MOVS     r7,#0
        MOV      r10,r7
        MOV      r0,r4
        BL       FLEXCAN_EnterFreezeMode
        CMP      r8,#0
        BEQ      |L24.154|
        LDRB     r0,[r6,#4]
        CMP      r0,#0x80
        BHI      |L24.60|
        B        |L24.72|
|L24.60|
        MOV      r2,#0x662
        ADR      r1,|L24.436|
        ADR      r0,|L24.520|
        BL       __aeabi_assert
|L24.72|
        LDR      r0,[r4,#0]
        AND      r10,r0,#0x7f
        CMP      r10,#0x10
        BCS      |L24.88|
        MOV      r0,r10
        B        |L24.90|
|L24.88|
        MOVS     r0,#0x10
|L24.90|
        MOV      r10,r0
        MOVS     r5,#0
        B        |L24.148|
|L24.96|
        ADDS     r0,r5,#1
        LSLS     r0,r0,#3
        LDRB     r1,[r6,#4]
        CMP      r0,r1
        BCC      |L24.144|
        MOV      r7,r5
        SUB      r0,r10,#8
        MOVS     r1,#2
        MLS      r0,r1,r7,r0
        CBZ      r0,|L24.122|
        B        |L24.134|
|L24.122|
        MOV      r2,#0x670
        ADR      r1,|L24.436|
        ADR      r0,|L24.548|
        BL       __aeabi_assert
|L24.134|
        LDR      r0,[r4,#0x34]
        BFI      r0,r7,#24,#4
        STR      r0,[r4,#0x34]
        B        |L24.152|
|L24.144|
        ADDS     r0,r5,#1
        UXTB     r5,r0
|L24.148|
        CMP      r5,#0xf
        BLS      |L24.96|
|L24.152|
        B        |L24.160|
|L24.154|
        LDR      r0,[r4,#0x34]
        UBFX     r7,r0,#24,#4
|L24.160|
        ADDS     r0,r7,#1
        LSLS     r0,r0,#27
        LSRS     r7,r0,#24
        MOVS     r5,#0
        B        |L24.180|
|L24.170|
        MOVS     r0,#0
        STR      r0,[r9,r5,LSL #2]
        ADDS     r0,r5,#1
        UXTB     r5,r0
|L24.180|
        CMP      r5,r7
        BLT      |L24.170|
        CMP      r8,#0
        BEQ      |L24.346|
        LDRB     r5,[r6,#4]
        B        |L24.206|
|L24.194|
        MOV      r0,#0xffffffff
        STR      r0,[r9,r5,LSL #2]
        ADDS     r0,r5,#1
        UXTB     r5,r0
|L24.206|
        CMP      r5,r7
        BLT      |L24.194|
        MOVS     r5,#0
        B        |L24.228|
|L24.214|
        LDR      r0,[r6,#0]
        LDR      r0,[r0,r5,LSL #2]
        STR      r0,[r9,r5,LSL #2]
        ADDS     r0,r5,#1
        UXTB     r5,r0
|L24.228|
        LDRB     r0,[r6,#4]
        CMP      r0,r5
        BGT      |L24.214|
        LDRB     r0,[r6,#5]
        CBZ      r0,|L24.252|
        CMP      r0,#1
        BEQ      |L24.262|
        CMP      r0,#2
        BEQ      |L24.276|
        CMP      r0,#3
        BNE      |L24.300|
        B        |L24.290|
|L24.252|
        LDR      r0,[r4,#0]
        BIC      r0,r0,#0x300
        STR      r0,[r4,#0]
        B        |L24.312|
|L24.262|
        LDR      r0,[r4,#0]
        BIC      r0,r0,#0x300
        ORR      r0,r0,#0x100
        STR      r0,[r4,#0]
        B        |L24.312|
|L24.276|
        LDR      r0,[r4,#0]
        BIC      r0,r0,#0x300
        ORR      r0,r0,#0x200
        STR      r0,[r4,#0]
        B        |L24.312|
|L24.290|
        LDR      r0,[r4,#0]
        ORR      r0,r0,#0x300
        STR      r0,[r4,#0]
        B        |L24.312|
|L24.300|
        MOV      r2,#0x6a3
        ADR      r1,|L24.436|
        ADR      r0,|L24.588|
        BL       __aeabi_assert
|L24.312|
        NOP      
        LDRB     r0,[r6,#6]
        CMP      r0,#1
        BNE      |L24.328|
        LDR      r0,[r4,#0x34]
        BIC      r0,r0,#0x40000
        B        |L24.334|
|L24.328|
        LDR      r0,[r4,#0x34]
        ORR      r0,r0,#0x40000
|L24.334|
        STR      r0,[r4,#0x34]
        LDR      r0,[r4,#0]
        ORR      r0,r0,#0x20000000
        STR      r0,[r4,#0]
        B        |L24.426|
|L24.346|
        LDR      r0,[r4,#0]
        BIC      r0,r0,#0x20000000
        STR      r0,[r4,#0]
        MOVS     r3,#0
        MOV      r2,r3
        MOV      r1,r3
        MOV      r0,r4
        BL       FLEXCAN_SetRxMbConfig
        MOVS     r3,#0
        MOV      r2,r3
        MOVS     r1,#1
        MOV      r0,r4
        BL       FLEXCAN_SetRxMbConfig
        MOVS     r3,#0
        MOV      r2,r3
        MOVS     r1,#2
        MOV      r0,r4
        BL       FLEXCAN_SetRxMbConfig
        MOVS     r3,#0
        MOV      r2,r3
        MOVS     r1,#3
        MOV      r0,r4
        BL       FLEXCAN_SetRxMbConfig
        MOVS     r3,#0
        MOV      r2,r3
        MOVS     r1,#4
        MOV      r0,r4
        BL       FLEXCAN_SetRxMbConfig
        MOVS     r3,#0
        MOV      r2,r3
        MOVS     r1,#5
        MOV      r0,r4
        BL       FLEXCAN_SetRxMbConfig
|L24.426|
        MOV      r0,r4
        BL       FLEXCAN_ExitFreezeMode
        POP      {r4-r10,pc}
        ENDP

|L24.436|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L24.480|
        DCB      "(NULL != config) || (false == enable)",0
        DCB      0
        DCB      0
|L24.520|
        DCB      "config->idFilterNum <= 128U",0
|L24.548|
        DCB      "((setup_mb - 8U) - (2U * rffn)) > 0U",0
        DCB      0
        DCB      0
        DCB      0
|L24.588|
        DCB      "false",0
        DCB      0
        DCB      0

        AREA ||i.FLEXCAN_SetRxFifoGlobalMask||, CODE, READONLY, ALIGN=1

FLEXCAN_SetRxFifoGlobalMask PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r0,r4
        BL       FLEXCAN_EnterFreezeMode
        STR      r5,[r4,#0x48]
        MOV      r0,r4
        BL       FLEXCAN_ExitFreezeMode
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.FLEXCAN_SetRxIndividualMask||, CODE, READONLY, ALIGN=2

FLEXCAN_SetRxIndividualMask PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        LDR      r0,[r4,#0]
        AND      r0,r0,#0x7f
        CMP      r0,r5
        BCC      |L26.20|
        B        |L26.32|
|L26.20|
        MOV      r2,#0x442
        ADR      r1,|L26.56|
        ADR      r0,|L26.100|
        BL       __aeabi_assert
|L26.32|
        MOV      r0,r4
        BL       FLEXCAN_EnterFreezeMode
        ADD      r0,r4,#0x880
        STR      r6,[r0,r5,LSL #2]
        MOV      r0,r4
        BL       FLEXCAN_ExitFreezeMode
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L26.56|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L26.100|
        DCB      "maskIdx <= (base->MCR & CAN_MCR_MAXMB_MASK)",0

        AREA ||i.FLEXCAN_SetRxMbConfig||, CODE, READONLY, ALIGN=2

FLEXCAN_SetRxMbConfig PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r8,r3
        LDR      r0,[r4,#0]
        AND      r0,r0,#0x7f
        CMP      r0,r5
        BCC      |L27.24|
        B        |L27.36|
|L27.24|
        MOV      r2,#0x5e8
        ADR      r1,|L27.184|
        ADR      r0,|L27.228|
        BL       __aeabi_assert
|L27.36|
        CBNZ     r6,|L27.44|
        CMP      r8,#0
        BNE      |L27.46|
|L27.44|
        B        |L27.58|
|L27.46|
        MOV      r2,#0x5e9
        ADR      r1,|L27.184|
        ADR      r0,|L27.272|
        BL       __aeabi_assert
|L27.58|
        MOV      r1,r5
        MOV      r0,r4
        BL       FLEXCAN_IsMbOccupied
        CBNZ     r0,|L27.70|
        B        |L27.82|
|L27.70|
        MOV      r2,#0x5ea
        ADR      r1,|L27.184|
        ADR      r0,|L27.312|
        BL       __aeabi_assert
|L27.82|
        MOVS     r7,#0
        MOVS     r1,#0
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#0]
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#4]
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#8]
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#0xc]
        CMP      r8,#0
        BEQ      |L27.178|
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        LDR      r1,[r6,#0]
        STR      r1,[r0,#4]
        LDRB     r0,[r6,#4]
        CMP      r0,#1
        BNE      |L27.154|
        ORR      r7,r7,#0x200000
|L27.154|
        LDRB     r0,[r6,#5]
        CMP      r0,#1
        BNE      |L27.164|
        ORR      r7,r7,#0x100000
|L27.164|
        ORR      r7,r7,#0x4000000
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r7,[r0,#0]
|L27.178|
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L27.184|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L27.228|
        DCB      "mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK)",0
        DCB      0
        DCB      0
|L27.272|
        DCB      "((NULL != config) || (false == enable))",0
|L27.312|
        DCB      "false == FLEXCAN_IsMbOccupied(base, mbIdx)",0
        DCB      0

        AREA ||i.FLEXCAN_SetRxMbGlobalMask||, CODE, READONLY, ALIGN=1

FLEXCAN_SetRxMbGlobalMask PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r0,r4
        BL       FLEXCAN_EnterFreezeMode
        STR      r5,[r4,#0x10]
        STR      r5,[r4,#0x14]
        STR      r5,[r4,#0x18]
        MOV      r0,r4
        BL       FLEXCAN_ExitFreezeMode
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.FLEXCAN_SetTimingConfig||, CODE, READONLY, ALIGN=2

FLEXCAN_SetTimingConfig PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L29.10|
        B        |L29.22|
|L29.10|
        MOV      r2,#0x3b6
        ADR      r1,|L29.104|
        ADR      r0,|L29.148|
        BL       __aeabi_assert
|L29.22|
        MOV      r0,r5
        BL       FLEXCAN_EnterFreezeMode
        LDR      r0,[r5,#4]
        MOV      r1,#0xfff8
        ANDS     r0,r0,r1
        STR      r0,[r5,#4]
        LDRB     r0,[r4,#0]
        LSLS     r1,r1,#21
        AND      r0,r1,r0,LSL #24
        LDRB     r1,[r4,#2]
        MOV      r2,#0xc00000
        AND      r1,r2,r1,LSL #22
        ORRS     r0,r0,r1
        LDRB     r1,[r4,#3]
        MOV      r2,#0x380000
        AND      r1,r2,r1,LSL #19
        ORRS     r0,r0,r1
        LDRB     r1,[r4,#4]
        ASRS     r2,r2,#3
        AND      r1,r2,r1,LSL #16
        ORRS     r0,r0,r1
        LDRB     r1,[r4,#5]
        AND      r1,r1,#7
        ORRS     r0,r0,r1
        LDR      r1,[r5,#4]
        ORRS     r0,r0,r1
        STR      r0,[r5,#4]
        MOV      r0,r5
        BL       FLEXCAN_ExitFreezeMode
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L29.104|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L29.148|
        DCB      "NULL != config",0
        DCB      0

        AREA ||i.FLEXCAN_SetTxMbConfig||, CODE, READONLY, ALIGN=2

FLEXCAN_SetTxMbConfig PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        LDR      r0,[r4,#0]
        AND      r0,r0,#0x7f
        CMP      r0,r5
        BCC      |L30.20|
        B        |L30.32|
|L30.20|
        MOV      r2,#0x45d
        ADR      r1,|L30.120|
        ADR      r0,|L30.164|
        BL       __aeabi_assert
|L30.32|
        MOV      r1,r5
        MOV      r0,r4
        BL       FLEXCAN_IsMbOccupied
        CBNZ     r0,|L30.44|
        B        |L30.56|
|L30.44|
        MOV      r2,#0x45e
        ADR      r1,|L30.120|
        ADR      r0,|L30.208|
        BL       __aeabi_assert
|L30.56|
        CBZ      r6,|L30.74|
        MOV      r1,#0x8000000
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#0]
        B        |L30.86|
|L30.74|
        MOVS     r1,#0
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#0]
|L30.86|
        MOVS     r1,#0
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#4]
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#8]
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#0xc]
        POP      {r4-r6,pc}
        ENDP

|L30.120|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L30.164|
        DCB      "mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK)",0
        DCB      0
        DCB      0
|L30.208|
        DCB      "!FLEXCAN_IsMbOccupied(base, mbIdx)",0
        DCB      0

        AREA ||i.FLEXCAN_TransferAbortReceive||, CODE, READONLY, ALIGN=2

FLEXCAN_TransferAbortReceive PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r4,r2
        CBZ      r5,|L31.14|
        B        |L31.26|
|L31.14|
        MOV      r2,#0xb2b
        ADR      r1,|L31.104|
        ADR      r0,|L31.148|
        BL       __aeabi_assert
|L31.26|
        LDR      r0,[r6,#0]
        AND      r0,r0,#0x7f
        CMP      r0,r4
        BCC      |L31.38|
        B        |L31.50|
|L31.38|
        MOV      r2,#0xb2c
        ADR      r1,|L31.104|
        ADR      r0,|L31.164|
        BL       __aeabi_assert
|L31.50|
        MOV      r1,r4
        MOV      r0,r6
        BL       FLEXCAN_IsMbOccupied
        CBNZ     r0,|L31.62|
        B        |L31.74|
|L31.62|
        MOV      r2,#0xb2d
        ADR      r1,|L31.104|
        ADR      r0,|L31.208|
        BL       __aeabi_assert
|L31.74|
        MOVS     r7,#1
        LSL      r1,r7,r4
        MOV      r0,r6
        BL       FLEXCAN_DisableMbInterrupts
        MOVS     r1,#0
        ADD      r0,r5,#8
        STR      r1,[r0,r4,LSL #2]
        ADDS     r0,r0,#0x44
        STRB     r1,[r0,r4]
        POP      {r4-r8,pc}
        ENDP

|L31.104|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L31.148|
        DCB      "NULL != handle",0
        DCB      0
|L31.164|
        DCB      "mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK)",0
        DCB      0
        DCB      0
|L31.208|
        DCB      "false == FLEXCAN_IsMbOccupied(base, mbIdx)",0
        DCB      0

        AREA ||i.FLEXCAN_TransferAbortReceiveFifo||, CODE, READONLY, ALIGN=2

FLEXCAN_TransferAbortReceiveFifo PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L32.10|
        B        |L32.22|
|L32.10|
        MOV      r2,#0xb48
        ADR      r1,|L32.52|
        ADR      r0,|L32.96|
        BL       __aeabi_assert
|L32.22|
        LDR      r0,[r5,#0]
        AND      r0,r0,#0x20000000
        CBZ      r0,|L32.42|
        MOVS     r1,#0xe0
        MOV      r0,r5
        BL       FLEXCAN_DisableMbInterrupts
        MOVS     r0,#0
        STR      r0,[r4,#0x48]
|L32.42|
        MOVS     r0,#0
        STRB     r0,[r4,#0x5c]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L32.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L32.96|
        DCB      "NULL != handle",0
        DCB      0

        AREA ||i.FLEXCAN_TransferAbortSend||, CODE, READONLY, ALIGN=2

FLEXCAN_TransferAbortSend PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r4,r2
        CBZ      r5,|L33.14|
        B        |L33.26|
|L33.14|
        MOV      r2,#0xabb
        ADR      r1,|L33.168|
        ADR      r0,|L33.212|
        BL       __aeabi_assert
|L33.26|
        LDR      r0,[r6,#0]
        AND      r0,r0,#0x7f
        CMP      r0,r4
        BCC      |L33.38|
        B        |L33.50|
|L33.38|
        MOV      r2,#0xabc
        ADR      r1,|L33.168|
        ADR      r0,|L33.228|
        BL       __aeabi_assert
|L33.50|
        ADD      r0,r5,#8
        LDR      r0,[r0,r4,LSL #2]
        CBZ      r0,|L33.62|
        B        |L33.74|
|L33.62|
        MOV      r2,#0xabd
        ADR      r1,|L33.168|
        ADR      r0,|L33.272|
        BL       __aeabi_assert
|L33.74|
        MOV      r1,r4
        MOV      r0,r6
        BL       FLEXCAN_IsMbOccupied
        CBNZ     r0,|L33.86|
        B        |L33.98|
|L33.86|
        MOV      r2,#0xabe
        ADR      r1,|L33.168|
        ADR      r0,|L33.308|
        BL       __aeabi_assert
|L33.98|
        MOVS     r7,#1
        LSL      r1,r7,r4
        MOV      r0,r6
        BL       FLEXCAN_DisableMbInterrupts
        ADD      r1,r5,#8
        LDR      r0,[r1,r4,LSL #2]
        ADD      r1,r6,#0x80
        ADD      r1,r1,r4,LSL #4
        LDR      r1,[r1,#0]
        LDR      r2,[r0,#0]
        BFI      r2,r1,#0,#16
        STR      r2,[r0,#0]
        MOVS     r1,#0
        ADD      r0,r5,#8
        STR      r1,[r0,r4,LSL #2]
        MOVS     r2,#1
        MOV      r1,r4
        MOV      r0,r6
        BL       FLEXCAN_SetTxMbConfig
        MOVS     r1,#0
        ADD      r0,r5,#0x4c
        STRB     r1,[r0,r4]
        POP      {r4-r8,pc}
        ENDP

|L33.168|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L33.212|
        DCB      "NULL != handle",0
        DCB      0
|L33.228|
        DCB      "mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK)",0
        DCB      0
        DCB      0
|L33.272|
        DCB      "NULL != handle->mbFrameBuf[mbIdx]",0
        DCB      0
        DCB      0
|L33.308|
        DCB      "false == FLEXCAN_IsMbOccupied(base, mbIdx)",0
        DCB      0

        AREA ||i.FLEXCAN_TransferCreateHandle||, CODE, READONLY, ALIGN=2

FLEXCAN_TransferCreateHandle PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r6,r1
        MOV      r7,r2
        MOV      r8,r3
        CBZ      r6,|L34.16|
        B        |L34.28|
|L34.16|
        MOV      r2,#0x981
        ADR      r1,|L34.188|
        ADR      r0,|L34.232|
        BL       __aeabi_assert
|L34.28|
        MOVS     r1,#0x60
        MOV      r0,r6
        BL       __aeabi_memclr4
        MOV      r0,r4
        BL       FLEXCAN_GetInstance
        UXTB     r5,r0
        LDR      r0,|L34.248|
        STR      r6,[r0,r5,LSL #2]
        STR      r7,[r6,#0]
        STR      r8,[r6,#4]
        LDR      r0,|L34.252|
        LDR      r1,|L34.256|
        STR      r0,[r1,#0]  ; s_flexcanIsr
        LDR      r0,[r6,#0]
        CBZ      r0,|L34.100|
        LDR      r0,|L34.260|
        AND      r1,r0,#0x4000000
        CMP      r1,#0x4000000
        BNE      |L34.86|
        LDR      r1,[r4,#0]
        ORR      r1,r1,#0x4000000
        STR      r1,[r4,#0]
|L34.86|
        LDR      r1,[r4,#4]
        BIC      r2,r0,#0x4000000
        ORRS     r1,r1,r2
        STR      r1,[r4,#4]
        NOP      
        B        |L34.134|
|L34.100|
        LDR      r0,|L34.260|
        AND      r1,r0,#0x4000000
        CMP      r1,#0x4000000
        BNE      |L34.120|
        LDR      r1,[r4,#0]
        BIC      r1,r1,#0x4000000
        STR      r1,[r4,#0]
|L34.120|
        LDR      r1,[r4,#4]
        BIC      r2,r0,#0x4000000
        BICS     r1,r1,r2
        STR      r1,[r4,#4]
        NOP      
        NOP      
|L34.134|
        LDR      r1,|L34.264|
        LDRSB    r0,[r1,r5]
        BL       EnableIRQ
        LDR      r1,|L34.268|
        LDRSB    r0,[r1,r5]
        BL       EnableIRQ
        LDR      r1,|L34.272|
        LDRSB    r0,[r1,r5]
        BL       EnableIRQ
        LDR      r1,|L34.276|
        LDRSB    r0,[r1,r5]
        BL       EnableIRQ
        LDR      r1,|L34.280|
        LDRSB    r0,[r1,r5]
        BL       EnableIRQ
        LDR      r1,|L34.284|
        LDRSB    r0,[r1,r5]
        BL       EnableIRQ
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L34.188|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L34.232|
        DCB      "NULL != handle",0
        DCB      0
|L34.248|
        DCD      s_flexcanHandle
|L34.252|
        DCD      FLEXCAN_TransferHandleIRQ
|L34.256|
        DCD      s_flexcanIsr
|L34.260|
        DCD      0x0400cc00
|L34.264|
        DCD      s_flexcanRxWarningIRQ
|L34.268|
        DCD      s_flexcanTxWarningIRQ
|L34.272|
        DCD      s_flexcanWakeUpIRQ
|L34.276|
        DCD      s_flexcanErrorIRQ
|L34.280|
        DCD      s_flexcanBusOffIRQ
|L34.284|
        DCD      s_flexcanMbIRQ

        AREA ||i.FLEXCAN_TransferHandleIRQ||, CODE, READONLY, ALIGN=2

FLEXCAN_TransferHandleIRQ PROC
        PUSH     {r3-r11,lr}
        MOV      r8,r0
        MOV      r5,r1
        CBZ      r5,|L35.12|
        B        |L35.24|
|L35.12|
        MOV      r2,#0xb63
        ADR      r1,|L35.380|
        ADR      r0,|L35.424|
        BL       __aeabi_assert
|L35.24|
        MOV      r6,#0x14c0
        MOVS     r4,#0
        LDR      r7,[r8,#0x20]
        NOP      
|L35.36|
        LDR      r0,|L35.440|
        ANDS     r0,r0,r7
        CBZ      r0,|L35.56|
        MOV      r6,#0x14be
        LDR      r1,|L35.440|
        MOV      r0,r8
        BL       FLEXCAN_ClearStatusFlags
        B        |L35.316|
|L35.56|
        AND      r0,r7,#1
        CBZ      r0,|L35.76|
        MOV      r6,#0x14bf
        MOVS     r1,#1
        MOV      r0,r8
        BL       FLEXCAN_ClearStatusFlags
        B        |L35.316|
|L35.76|
        MOVS     r4,#0
        B        |L35.110|
|L35.80|
        MOV      r10,#1
        LSL      r1,r10,r4
        MOV      r0,r8
        BL       FLEXCAN_GetMbStatusFlags
        CBZ      r0,|L35.108|
        UXTB     r1,r4
        MOV      r0,r8
        BL       FLEXCAN_IsMbIntEnabled
        CBZ      r0,|L35.108|
        B        |L35.114|
|L35.108|
        ADDS     r4,r4,#1
|L35.110|
        CMP      r4,#0x10
        BCC      |L35.80|
|L35.114|
        NOP      
        CMP      r4,#0x10
        BNE      |L35.122|
        B        |L35.372|
|L35.122|
        LDRB     r0,[r5,#0x5c]
        CBZ      r0,|L35.200|
        CMP      r4,#7
        BHI      |L35.200|
        MOV      r10,#1
        LSL      r0,r10,r4
        CMP      r0,#0x20
        BEQ      |L35.164|
        CMP      r0,#0x40
        BEQ      |L35.158|
        CMP      r0,#0x80
        BNE      |L35.190|
        MOV      r6,#0x14bc
        B        |L35.196|
|L35.158|
        MOV      r6,#0x14bd
        B        |L35.196|
|L35.164|
        LDR      r1,[r5,#0x48]
        MOV      r0,r8
        BL       FLEXCAN_ReadRxFifo
        MOV      r6,r0
        CBNZ     r6,|L35.180|
        MOV      r6,#0x14bb
|L35.180|
        MOV      r1,r5
        MOV      r0,r8
        BL       FLEXCAN_TransferAbortReceiveFifo
        B        |L35.196|
|L35.190|
        MOV      r6,#0x14c0
        NOP      
|L35.196|
        NOP      
        B        |L35.300|
|L35.200|
        ADD      r0,r5,#0x4c
        LDRB     r0,[r0,r4]
        CMP      r0,#1
        BEQ      |L35.224|
        CMP      r0,#2
        BEQ      |L35.226|
        CMP      r0,#3
        BEQ      |L35.262|
        CMP      r0,#4
        BNE      |L35.292|
        B        |L35.278|
|L35.224|
        NOP      
|L35.226|
        ADD      r0,r5,#8
        LDR      r2,[r0,r4,LSL #2]
        UXTB     r1,r4
        MOV      r0,r8
        BL       FLEXCAN_ReadRxMb
        MOV      r6,r0
        CBNZ     r6,|L35.250|
        MOV      r6,#0x14b8
|L35.250|
        UXTB     r2,r4
        MOV      r1,r5
        MOV      r0,r8
        BL       FLEXCAN_TransferAbortReceive
        B        |L35.298|
|L35.262|
        MOV      r6,#0x14b5
        UXTB     r2,r4
        MOV      r1,r5
        MOV      r0,r8
        BL       FLEXCAN_TransferAbortSend
        B        |L35.298|
|L35.278|
        MOVS     r1,#2
        ADD      r0,r5,#0x4c
        STRB     r1,[r0,r4]
        MOV      r6,#0x14b6
        B        |L35.298|
|L35.292|
        MOV      r6,#0x14c0
        NOP      
|L35.298|
        NOP      
|L35.300|
        MOV      r9,#1
        LSL      r1,r9,r4
        MOV      r0,r8
        BL       FLEXCAN_ClearMbStatusFlags
        NOP      
|L35.316|
        LDR      r0,[r5,#0]
        CBZ      r0,|L35.338|
        LDR      r0,[r5,#4]
        STR      r0,[sp,#0]
        MOV      r3,r4
        MOV      r2,r6
        MOV      r1,r5
        MOV      r0,r8
        LDR      r12,[r5,#0]
        BLX      r12
|L35.338|
        MOV      r6,#0x14c0
        LDR      r7,[r8,#0x20]
        MOV      r1,#0xffffffff
        MOV      r0,r8
        BL       FLEXCAN_GetMbStatusFlags
        CMP      r0,#0
|L35.358|
        BNE      |L35.36|
        LDR      r0,|L35.440|
        ADDS     r0,r0,#1
        ANDS     r0,r0,r7
        CMP      r0,#0
        BNE      |L35.358|
|L35.372|
        NOP      
        POP      {r3-r11,pc}
        ENDP

        DCW      0x0000
|L35.380|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L35.424|
        DCB      "NULL != handle",0
        DCB      0
|L35.440|
        DCD      0x00030006

        AREA ||i.FLEXCAN_TransferReceiveBlocking||, CODE, READONLY, ALIGN=1

FLEXCAN_TransferReceiveBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r7,r2
        MOVS     r5,#1
        NOP      
|L36.14|
        LSL      r1,r5,r4
        MOV      r0,r6
        BL       FLEXCAN_GetMbStatusFlags
        CMP      r0,#0
        BEQ      |L36.14|
        LSL      r1,r5,r4
        MOV      r0,r6
        BL       FLEXCAN_ClearMbStatusFlags
        MOV      r2,r7
        MOV      r1,r4
        MOV      r0,r6
        BL       FLEXCAN_ReadRxMb
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.FLEXCAN_TransferReceiveFifoBlocking||, CODE, READONLY, ALIGN=1

FLEXCAN_TransferReceiveFifoBlocking PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        NOP      
|L37.8|
        MOVS     r1,#0x20
        MOV      r0,r4
        BL       FLEXCAN_GetMbStatusFlags
        CMP      r0,#0
        BEQ      |L37.8|
        MOV      r1,r5
        MOV      r0,r4
        BL       FLEXCAN_ReadRxFifo
        MOV      r6,r0
        MOVS     r1,#0x20
        MOV      r0,r4
        BL       FLEXCAN_ClearMbStatusFlags
        MOV      r0,r6
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.FLEXCAN_TransferReceiveFifoNonBlocking||, CODE, READONLY, ALIGN=2

FLEXCAN_TransferReceiveFifoNonBlocking PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CBZ      r4,|L38.12|
        B        |L38.24|
|L38.12|
        MOV      r2,#0xa98
        ADR      r1,|L38.76|
        ADR      r0,|L38.120|
        BL       __aeabi_assert
|L38.24|
        CBZ      r5,|L38.28|
        B        |L38.40|
|L38.28|
        MOV      r2,#0xa99
        ADR      r1,|L38.76|
        ADR      r0,|L38.136|
        BL       __aeabi_assert
|L38.40|
        LDRB     r0,[r4,#0x5c]
        CBNZ     r0,|L38.68|
        MOVS     r0,#5
        STRB     r0,[r4,#0x5c]
        LDR      r0,[r5,#0]
        STR      r0,[r4,#0x48]
        MOVS     r1,#0xe0
        MOV      r0,r6
        BL       FLEXCAN_EnableMbInterrupts
        MOVS     r0,#0
|L38.66|
        POP      {r4-r6,pc}
|L38.68|
        MOV      r0,#0x14ba
        B        |L38.66|
        ENDP

        DCW      0x0000
|L38.76|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L38.120|
        DCB      "NULL != handle",0
        DCB      0
|L38.136|
        DCB      "NULL != xfer",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.FLEXCAN_TransferReceiveNonBlocking||, CODE, READONLY, ALIGN=2

FLEXCAN_TransferReceiveNonBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r4,r2
        CBZ      r5,|L39.14|
        B        |L39.26|
|L39.14|
        MOV      r2,#0x9fd
        ADR      r1,|L39.148|
        ADR      r0,|L39.192|
        BL       __aeabi_assert
|L39.26|
        CBZ      r4,|L39.30|
        B        |L39.42|
|L39.30|
        MOV      r2,#0x9fe
        ADR      r1,|L39.148|
        ADR      r0,|L39.208|
        BL       __aeabi_assert
|L39.42|
        LDRB     r0,[r4,#4]
        LDR      r1,[r6,#0]
        AND      r1,r1,#0x7f
        CMP      r0,r1
        BHI      |L39.56|
        B        |L39.68|
|L39.56|
        MOV      r2,#0x9ff
        ADR      r1,|L39.148|
        ADR      r0,|L39.224|
        BL       __aeabi_assert
|L39.68|
        LDRB     r1,[r4,#4]
        MOV      r0,r6
        BL       FLEXCAN_IsMbOccupied
        CBNZ     r0,|L39.80|
        B        |L39.92|
|L39.80|
        MOV      r2,#0xa00
        ADR      r1,|L39.148|
        ADR      r0,|L39.272|
        BL       __aeabi_assert
|L39.92|
        LDRB     r1,[r4,#4]
        ADD      r0,r5,#0x4c
        LDRB     r0,[r0,r1]
        CBNZ     r0,|L39.142|
        MOVS     r1,#1
        LDRB     r2,[r4,#4]
        ADD      r0,r5,#0x4c
        STRB     r1,[r0,r2]
        LDRB     r2,[r4,#4]
        SUBS     r0,r0,#0x44
        LDR      r1,[r4,#0]
        STR      r1,[r0,r2,LSL #2]
        MOVS     r7,#1
        LDRB     r0,[r4,#4]
        LSL      r1,r7,r0
        MOV      r0,r6
        BL       FLEXCAN_EnableMbInterrupts
        MOVS     r0,#0
|L39.138|
        POP      {r4-r8,pc}
|L39.142|
        MOV      r0,#0x14b7
        B        |L39.138|
        ENDP

|L39.148|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L39.192|
        DCB      "NULL != handle",0
        DCB      0
|L39.208|
        DCB      "NULL != xfer",0
        DCB      0
        DCB      0
        DCB      0
|L39.224|
        DCB      "xfer->mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK)",0
|L39.272|
        DCB      "false == FLEXCAN_IsMbOccupied(base, xfer->mbIdx)",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.FLEXCAN_TransferSendBlocking||, CODE, READONLY, ALIGN=1

FLEXCAN_TransferSendBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        MOV      r2,r5
        MOV      r1,r4
        MOV      r0,r6
        BL       FLEXCAN_WriteTxMb
        CBNZ     r0,|L40.74|
        MOVS     r7,#1
        NOP      
|L40.26|
        LSL      r1,r7,r4
        MOV      r0,r6
        BL       FLEXCAN_GetMbStatusFlags
        CMP      r0,#0
        BEQ      |L40.26|
        LSL      r1,r7,r4
        MOV      r0,r6
        BL       FLEXCAN_ClearMbStatusFlags
        ADD      r0,r6,#0x80
        ADD      r0,r0,r4,LSL #4
        LDR      r0,[r0,#0]
        LDR      r1,[r5,#0]
        BFI      r1,r0,#0,#16
        STR      r1,[r5,#0]
        MOVS     r0,#0
|L40.70|
        POP      {r4-r8,pc}
|L40.74|
        MOVS     r0,#1
        B        |L40.70|
        ENDP


        AREA ||i.FLEXCAN_TransferSendNonBlocking||, CODE, READONLY, ALIGN=2

FLEXCAN_TransferSendNonBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r4,r2
        CBZ      r5,|L41.14|
        B        |L41.26|
|L41.14|
        MOV      r2,#0x9c0
        ADR      r1,|L41.200|
        ADR      r0,|L41.244|
        BL       __aeabi_assert
|L41.26|
        CBZ      r4,|L41.30|
        B        |L41.42|
|L41.30|
        MOV      r2,#0x9c1
        ADR      r1,|L41.200|
        ADR      r0,|L41.260|
        BL       __aeabi_assert
|L41.42|
        LDRB     r0,[r4,#4]
        LDR      r1,[r6,#0]
        AND      r1,r1,#0x7f
        CMP      r0,r1
        BHI      |L41.56|
        B        |L41.68|
|L41.56|
        MOV      r2,#0x9c2
        ADR      r1,|L41.200|
        ADR      r0,|L41.276|
        BL       __aeabi_assert
|L41.68|
        LDRB     r1,[r4,#4]
        MOV      r0,r6
        BL       FLEXCAN_IsMbOccupied
        CBNZ     r0,|L41.80|
        B        |L41.92|
|L41.80|
        MOV      r2,#0x9c3
        ADR      r1,|L41.200|
        ADR      r0,|L41.324|
        BL       __aeabi_assert
|L41.92|
        LDRB     r1,[r4,#4]
        ADD      r0,r5,#0x4c
        LDRB     r0,[r0,r1]
        CBNZ     r0,|L41.192|
        LDR      r0,[r4,#0]
        LDR      r0,[r0,#0]
        UBFX     r0,r0,#20,#1
        CBZ      r0,|L41.124|
        MOVS     r1,#4
        LDRB     r2,[r4,#4]
        ADD      r0,r5,#0x4c
        STRB     r1,[r0,r2]
        B        |L41.134|
|L41.124|
        MOVS     r1,#3
        LDRB     r2,[r4,#4]
        ADD      r0,r5,#0x4c
        STRB     r1,[r0,r2]
|L41.134|
        LDRB     r2,[r4,#4]
        ADD      r0,r5,#8
        LDR      r1,[r4,#0]
        STR      r1,[r0,r2,LSL #2]
        LDRB     r1,[r4,#4]
        MOV      r0,r6
        LDR      r2,[r4,#0]
        BL       FLEXCAN_WriteTxMb
        CBNZ     r0,|L41.178|
        MOVS     r7,#1
        LDRB     r0,[r4,#4]
        LSL      r1,r7,r0
        MOV      r0,r6
        BL       FLEXCAN_EnableMbInterrupts
        MOVS     r0,#0
|L41.174|
        POP      {r4-r8,pc}
|L41.178|
        MOVS     r1,#0
        LDRB     r2,[r4,#4]
        ADD      r0,r5,#0x4c
        STRB     r1,[r0,r2]
        MOVS     r0,#1
        B        |L41.174|
|L41.192|
        MOV      r0,#0x14b4
        B        |L41.174|
        ENDP

        DCW      0x0000
|L41.200|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L41.244|
        DCB      "NULL != handle",0
        DCB      0
|L41.260|
        DCB      "NULL != xfer",0
        DCB      0
        DCB      0
        DCB      0
|L41.276|
        DCB      "xfer->mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK)",0
|L41.324|
        DCB      "false == FLEXCAN_IsMbOccupied(base, xfer->mbIdx)",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.FLEXCAN_WriteTxMb||, CODE, READONLY, ALIGN=2

FLEXCAN_WriteTxMb PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        LDR      r0,[r4,#0]
        AND      r0,r0,#0x7f
        CMP      r0,r5
        BCC      |L42.22|
        B        |L42.34|
|L42.22|
        MOV      r2,#0x73a
        ADR      r1,|L42.252|
        ADR      r0,|L42.296|
        BL       __aeabi_assert
|L42.34|
        CBZ      r6,|L42.38|
        B        |L42.50|
|L42.38|
        MOV      r2,#0x73b
        ADR      r1,|L42.252|
        ADR      r0,|L42.340|
        BL       __aeabi_assert
|L42.50|
        LDR      r0,[r6,#0]
        UBFX     r0,r0,#16,#4
        CMP      r0,#8
        BHI      |L42.62|
        B        |L42.74|
|L42.62|
        MOV      r2,#0x73c
        ADR      r1,|L42.252|
        ADR      r0,|L42.356|
        BL       __aeabi_assert
|L42.74|
        MOV      r1,r5
        MOV      r0,r4
        BL       FLEXCAN_IsMbOccupied
        CBNZ     r0,|L42.86|
        B        |L42.98|
|L42.86|
        MOV      r2,#0x73d
        ADR      r1,|L42.252|
        ADR      r0,|L42.380|
        BL       __aeabi_assert
|L42.98|
        MOVS     r7,#0
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        LDR      r0,[r0,#0]
        AND      r0,r0,#0xf000000
        CMP      r0,#0xc000000
        BEQ      |L42.248|
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        LDR      r0,[r0,#0]
        BIC      r0,r0,#0xf000000
        ORR      r1,r0,#0x8000000
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#0]
        LDR      r0,[r6,#4]
        BIC      r1,r0,#0xe0000000
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r1,[r0,#4]
        LDR      r0,[r6,#0]
        UBFX     r0,r0,#21,#1
        CBZ      r0,|L42.176|
        ORR      r7,r7,#0x600000
|L42.176|
        LDR      r0,[r6,#0]
        UBFX     r0,r0,#20,#1
        CBZ      r0,|L42.188|
        ORR      r7,r7,#0x100000
|L42.188|
        LDR      r0,[r6,#0]
        UBFX     r0,r0,#16,#4
        MOV      r1,#0xf0000
        AND      r0,r1,r0,LSL #16
        ORR      r0,r0,#0xc000000
        ORRS     r7,r7,r0
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        LDR      r1,[r6,#8]
        STR      r1,[r0,#8]
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        LDR      r1,[r6,#0xc]
        STR      r1,[r0,#0xc]
        ADD      r0,r4,#0x80
        ADD      r0,r0,r5,LSL #4
        STR      r7,[r0,#0]
        MOVS     r0,#0
|L42.244|
        POP      {r4-r8,pc}
|L42.248|
        MOVS     r0,#1
        B        |L42.244|
        ENDP

|L42.252|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c",0
|L42.296|
        DCB      "mbIdx <= (base->MCR & CAN_MCR_MAXMB_MASK)",0
        DCB      0
        DCB      0
|L42.340|
        DCB      "NULL != txFrame",0
|L42.356|
        DCB      "txFrame->length <= 8U",0
        DCB      0
        DCB      0
|L42.380|
        DCB      "false == FLEXCAN_IsMbOccupied(base, mbIdx)",0
        DCB      0

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

s_flexcanBases
        DCD      0x40024000
        DCD      0x400a4000
s_flexcanRxWarningIRQ
        DCB      0x4f,0x62
s_flexcanTxWarningIRQ
        DCB      0x4e,0x61
s_flexcanWakeUpIRQ
        DCB      0x50,0x63
s_flexcanErrorIRQ
        DCB      0x4d,0x60
s_flexcanBusOffIRQ
        DCB      0x4c,0x5f
s_flexcanMbIRQ
        DCB      0x4b,0x5e
s_flexcanClock
        DCD      0x103c0004
        DCD      0x10300004

        AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

        DCB      "mbIdx < (uint8_t)FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER"
        DCB      "_MAX_NUMBERn(base)",0
        DCB      0
        DCB      0
        DCB      "(config->maxMbNum > 0U) && (config->maxMbNum <= (uint8_"
        DCB      "t)FSL_FEATURE_FLEXCAN_HAS_MESSAGE_BUFFER_MAX_NUMBERn(ba"
        DCB      "se))",0

        AREA ||.data||, DATA, ALIGN=2

s_flexcanHandle
        %        8
s_flexcanIsr
        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_flexcan.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_fsl_flexcan_c_0b28fbe8____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___13_fsl_flexcan_c_0b28fbe8____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_fsl_flexcan_c_0b28fbe8____REVSH|
#line 483
|__asm___13_fsl_flexcan_c_0b28fbe8____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_fsl_flexcan_c_0b28fbe8____RRX|
#line 670
|__asm___13_fsl_flexcan_c_0b28fbe8____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT CAN0_DriverIRQHandler [CODE]
        EXPORT CAN1_DriverIRQHandler [CODE]
        EXPORT FLEXCAN_CalculateImprovedTimingValues [CODE]
        EXPORT FLEXCAN_Deinit [CODE]
        EXPORT FLEXCAN_GetDefaultConfig [CODE]
        EXPORT FLEXCAN_GetInstance [CODE]
        EXPORT FLEXCAN_Init [CODE]
        EXPORT FLEXCAN_ReadRxFifo [CODE]
        EXPORT FLEXCAN_ReadRxMb [CODE]
        EXPORT FLEXCAN_SetRxFifoConfig [CODE]
        EXPORT FLEXCAN_SetRxFifoGlobalMask [CODE]
        EXPORT FLEXCAN_SetRxIndividualMask [CODE]
        EXPORT FLEXCAN_SetRxMbConfig [CODE]
        EXPORT FLEXCAN_SetRxMbGlobalMask [CODE]
        EXPORT FLEXCAN_SetTimingConfig [CODE]
        EXPORT FLEXCAN_SetTxMbConfig [CODE]
        EXPORT FLEXCAN_TransferAbortReceive [CODE]
        EXPORT FLEXCAN_TransferAbortReceiveFifo [CODE]
        EXPORT FLEXCAN_TransferAbortSend [CODE]
        EXPORT FLEXCAN_TransferCreateHandle [CODE]
        EXPORT FLEXCAN_TransferHandleIRQ [CODE]
        EXPORT FLEXCAN_TransferReceiveBlocking [CODE]
        EXPORT FLEXCAN_TransferReceiveFifoBlocking [CODE]
        EXPORT FLEXCAN_TransferReceiveFifoNonBlocking [CODE]
        EXPORT FLEXCAN_TransferReceiveNonBlocking [CODE]
        EXPORT FLEXCAN_TransferSendBlocking [CODE]
        EXPORT FLEXCAN_TransferSendNonBlocking [CODE]
        EXPORT FLEXCAN_WriteTxMb [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_assert [CODE]
        IMPORT __aeabi_memclr4 [CODE]

        KEEP EnableIRQ
        KEEP FLEXCAN_ClearMbStatusFlags
        KEEP FLEXCAN_ClearStatusFlags
        KEEP FLEXCAN_DisableMbInterrupts
        KEEP FLEXCAN_Enable
        KEEP FLEXCAN_EnableMbInterrupts
        KEEP FLEXCAN_EnterFreezeMode
        KEEP FLEXCAN_ExitFreezeMode
        KEEP FLEXCAN_GetMbStatusFlags
        KEEP FLEXCAN_GetSegments
        KEEP FLEXCAN_IsMbIntEnabled
        KEEP FLEXCAN_IsMbOccupied
        KEEP FLEXCAN_Reset
        KEEP FLEXCAN_SetBaudRate
        KEEP s_flexcanBases
        KEEP s_flexcanRxWarningIRQ
        KEEP s_flexcanTxWarningIRQ
        KEEP s_flexcanWakeUpIRQ
        KEEP s_flexcanErrorIRQ
        KEEP s_flexcanBusOffIRQ
        KEEP s_flexcanMbIRQ
        KEEP s_flexcanClock
        KEEP s_flexcanHandle
        KEEP s_flexcanIsr

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
