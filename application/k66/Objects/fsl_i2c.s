; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_i2c.o --depend=.\objects\fsl_i2c.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_i2c.crf ..\..\devices\MK66F18\drivers\fsl_i2c.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.CLOCK_DisableClock||, CODE, READONLY, ALIGN=2

CLOCK_DisableClock PROC
        LDR      r2,|L1.20|
        ADD      r1,r2,r0,LSR #16
        LDR      r2,[r1,#0]
        MOVS     r3,#1
        LSLS     r3,r3,r0
        BICS     r2,r2,r3
        STR      r2,[r1,#0]
        BX       lr
        ENDP

        DCW      0x0000
|L1.20|
        DCD      0x40047000

        AREA ||i.CLOCK_EnableClock||, CODE, READONLY, ALIGN=2

CLOCK_EnableClock PROC
        LDR      r2,|L2.20|
        ADD      r1,r2,r0,LSR #16
        LDR      r2,[r1,#0]
        MOVS     r3,#1
        LSLS     r3,r3,r0
        ORRS     r2,r2,r3
        STR      r2,[r1,#0]
        BX       lr
        ENDP

        DCW      0x0000
|L2.20|
        DCD      0x40047000

        AREA ||i.EnableIRQ||, CODE, READONLY, ALIGN=1

EnableIRQ PROC
        MOV      r1,r0
        CMN      r1,#0x80
        BNE      |L3.12|
        MOVS     r0,#1
|L3.10|
        BX       lr
|L3.12|
        MOV      r0,r1
        CMP      r0,#0
        BLT      |L3.38|
        AND      r3,r0,#0x1f
        MOVS     r2,#1
        LSLS     r2,r2,r3
        LSRS     r3,r0,#5
        LSLS     r3,r3,#2
        ADD      r3,r3,#0xe000e000
        STR      r2,[r3,#0x100]
|L3.38|
        NOP      
        MOVS     r0,#0
        B        |L3.10|
        ENDP


        AREA ||i.I2C0_DriverIRQHandler||, CODE, READONLY, ALIGN=2

I2C0_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L4.16|
        LDR      r1,[r0,#0]  ; s_i2cHandle
        LDR      r0,|L4.20|
        BL       I2C_TransferCommonIRQHandler
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L4.16|
        DCD      s_i2cHandle
|L4.20|
        DCD      0x40066000

        AREA ||i.I2C1_DriverIRQHandler||, CODE, READONLY, ALIGN=2

I2C1_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L5.16|
        LDR      r1,[r0,#4]  ; s_i2cHandle
        LDR      r0,|L5.20|
        BL       I2C_TransferCommonIRQHandler
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L5.16|
        DCD      s_i2cHandle
|L5.20|
        DCD      0x40067000

        AREA ||i.I2C2_DriverIRQHandler||, CODE, READONLY, ALIGN=2

I2C2_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L6.16|
        LDR      r1,[r0,#8]  ; s_i2cHandle
        LDR      r0,|L6.20|
        BL       I2C_TransferCommonIRQHandler
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L6.16|
        DCD      s_i2cHandle
|L6.20|
        DCD      0x400e6000

        AREA ||i.I2C3_DriverIRQHandler||, CODE, READONLY, ALIGN=2

I2C3_DriverIRQHandler PROC
        PUSH     {r4,lr}
        LDR      r0,|L7.16|
        LDR      r1,[r0,#0xc]  ; s_i2cHandle
        LDR      r0,|L7.20|
        BL       I2C_TransferCommonIRQHandler
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L7.16|
        DCD      s_i2cHandle
|L7.20|
        DCD      0x400e7000

        AREA ||i.I2C_CheckAndClearError||, CODE, READONLY, ALIGN=1

I2C_CheckAndClearError PROC
        MOV      r2,r0
        MOVS     r0,#0
        AND      r3,r1,#0x10
        CBZ      r3,|L8.20|
        MOVS     r3,#0x10
        STRB     r3,[r2,#3]
        MOV      r0,#0x44f
        B        |L8.30|
|L8.20|
        AND      r3,r1,#1
        CBZ      r3,|L8.30|
        MOV      r0,#0x44e
|L8.30|
        BX       lr
        ENDP


        AREA ||i.I2C_DisableInterrupts||, CODE, READONLY, ALIGN=1

I2C_DisableInterrupts PROC
        AND      r2,r1,#0x40
        CBZ      r2,|L9.14|
        LDRB     r2,[r0,#2]
        BIC      r2,r2,#0x40
        STRB     r2,[r0,#2]
|L9.14|
        AND      r2,r1,#0x20
        CBZ      r2,|L9.28|
        LDRB     r2,[r0,#6]
        BIC      r2,r2,#0x70
        STRB     r2,[r0,#6]
|L9.28|
        BX       lr
        ENDP


        AREA ||i.I2C_Enable||, CODE, READONLY, ALIGN=1

I2C_Enable PROC
        CBZ      r1,|L10.12|
        LDRB     r2,[r0,#2]
        ORR      r2,r2,#0x80
        STRB     r2,[r0,#2]
        B        |L10.20|
|L10.12|
        LDRB     r2,[r0,#2]
        BIC      r2,r2,#0x80
        STRB     r2,[r0,#2]
|L10.20|
        BX       lr
        ENDP


        AREA ||i.I2C_EnableInterrupts||, CODE, READONLY, ALIGN=1

I2C_EnableInterrupts PROC
        AND      r3,r1,#0x40
        CBZ      r3,|L11.14|
        LDRB     r3,[r0,#2]
        ORR      r3,r3,#0x40
        STRB     r3,[r0,#2]
|L11.14|
        AND      r3,r1,#0x20
        CBZ      r3,|L11.32|
        LDRB     r2,[r0,#6]
        BIC      r2,r2,#0x50
        ORR      r2,r2,#0x20
        STRB     r2,[r0,#6]
|L11.32|
        BX       lr
        ENDP


        AREA ||i.I2C_GetInstance||, CODE, READONLY, ALIGN=2

I2C_GetInstance PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r4,#0
        B        |L12.22|
|L12.8|
        LDR      r0,|L12.48|
        LDR      r0,[r0,r4,LSL #2]
        CMP      r0,r5
        BNE      |L12.20|
        B        |L12.26|
|L12.20|
        ADDS     r4,r4,#1
|L12.22|
        CMP      r4,#4
        BCC      |L12.8|
|L12.26|
        NOP      
        CMP      r4,#4
        BCS      |L12.34|
        B        |L12.44|
|L12.34|
        MOVS     r2,#0xa6
        ADR      r1,|L12.52|
        ADR      r0,|L12.92|
        BL       __aeabi_assert
|L12.44|
        MOV      r0,r4
        POP      {r4-r6,pc}
        ENDP

|L12.48|
        DCD      s_i2cBases
|L12.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L12.92|
        DCB      "instance < ARRAY_SIZE(s_i2cBases)",0
        DCB      0
        DCB      0

        AREA ||i.I2C_InitTransferStateMachine||, CODE, READONLY, ALIGN=1

I2C_InitTransferStateMachine PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        MOV      r8,#0
        LDRB     r7,[r5,#5]
        LDM      r5,{r0-r3}
        STM      r4,{r0-r3}
        LDR      r0,[r5,#0x10]
        STR      r0,[r4,#0x10]
        LDR      r0,[r5,#0x14]
        STR      r0,[r4,#0x14]
        LDR      r0,[r5,#0x14]
        STR      r0,[r4,#0x18]
        LDRB     r0,[r4,#0xc]
        CBZ      r0,|L13.48|
        LDRB     r0,[r5,#5]
        CMP      r0,#1
        BNE      |L13.48|
        MOVS     r7,#0
|L13.48|
        MOVS     r0,#1
        STRB     r0,[r4,#0x1c]
        MOV      r1,#0x5012
        MOV      r0,r6
        BL       I2C_MasterClearStatusFlags
        LDRB     r0,[r4,#0]
        AND      r0,r0,#1
        CBZ      r0,|L13.116|
        LDRB     r0,[r4,#0xc]
        CBZ      r0,|L13.80|
        MOVS     r0,#2
        STRB     r0,[r4,#0x1c]
        B        |L13.94|
|L13.80|
        CBNZ     r7,|L13.88|
        MOVS     r0,#3
        STRB     r0,[r4,#0x1c]
        B        |L13.94|
|L13.88|
        MOVS     r0,#4
|L13.90|
        POP      {r4-r8,pc}
|L13.94|
        NOP      
|L13.96|
        LDRB     r0,[r6,#3]
        AND      r0,r0,#0x80
        CMP      r0,#0
        BEQ      |L13.96|
        MOV      r1,r4
        MOV      r0,r6
        BL       I2C_MasterTransferHandleIRQ
        B        |L13.150|
|L13.116|
        LDRB     r0,[r4,#0]
        AND      r0,r0,#2
        CBZ      r0,|L13.138|
        LDRB     r1,[r4,#4]
        MOV      r2,r7
        MOV      r0,r6
        BL       I2C_MasterRepeatedStart
        MOV      r8,r0
        B        |L13.150|
|L13.138|
        LDRB     r1,[r4,#4]
        MOV      r2,r7
        MOV      r0,r6
        BL       I2C_MasterStart
        MOV      r8,r0
|L13.150|
        MOV      r0,r8
        B        |L13.90|
        ENDP


        AREA ||i.I2C_MasterClearStatusFlags||, CODE, READONLY, ALIGN=1

I2C_MasterClearStatusFlags PROC
        AND      r2,r1,#0x1000
        CMP      r2,#0x1000
        BNE      |L14.20|
        LDRB     r2,[r0,#6]
        UBFX     r3,r1,#8,#8
        ORRS     r2,r2,r3
        STRB     r2,[r0,#6]
|L14.20|
        AND      r2,r1,#0x4000
        CMP      r2,#0x4000
        BNE      |L14.40|
        LDRB     r2,[r0,#6]
        UBFX     r3,r1,#8,#8
        ORRS     r2,r2,r3
        STRB     r2,[r0,#6]
|L14.40|
        STRB     r1,[r0,#3]
        BX       lr
        ENDP


        AREA ||i.I2C_MasterDeinit||, CODE, READONLY, ALIGN=2

I2C_MasterDeinit PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r1,#0
        MOV      r0,r4
        BL       I2C_Enable
        MOV      r0,r4
        BL       I2C_GetInstance
        LDR      r1,|L15.32|
        LDR      r5,[r1,r0,LSL #2]
        MOV      r0,r5
        BL       CLOCK_DisableClock
        POP      {r4-r6,pc}
        ENDP

|L15.32|
        DCD      s_i2cClocks

        AREA ||i.I2C_MasterGetDefaultConfig||, CODE, READONLY, ALIGN=2

I2C_MasterGetDefaultConfig PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L16.8|
        B        |L16.20|
|L16.8|
        MOV      r2,#0x27f
        ADR      r1,|L16.44|
        ADR      r0,|L16.84|
        BL       __aeabi_assert
|L16.20|
        MOVS     r0,#0
        STR      r0,[r4,#0]
        STR      r0,[r4,#4]
        STR      r0,[r4,#8]
        LDR      r0,|L16.108|
        STR      r0,[r4,#4]
        MOVS     r0,#0
        STRB     r0,[r4,#1]
        STRB     r0,[r4,#8]
        MOVS     r0,#1
        STRB     r0,[r4,#0]
        POP      {r4,pc}
        ENDP

|L16.44|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L16.84|
        DCB      "NULL != masterConfig",0
        DCB      0
        DCB      0
        DCB      0
|L16.108|
        DCD      0x000186a0

        AREA ||i.I2C_MasterGetStatusFlags||, CODE, READONLY, ALIGN=1

I2C_MasterGetStatusFlags PROC
        MOV      r1,r0
        LDRB     r0,[r1,#3]
        LDRB     r2,[r1,#6]
        AND      r2,r2,#0x40
        CBZ      r2,|L17.16|
        ORR      r0,r0,#0x4000
|L17.16|
        LDRB     r2,[r1,#6]
        AND      r2,r2,#0x10
        CBZ      r2,|L17.28|
        ORR      r0,r0,#0x1000
|L17.28|
        BX       lr
        ENDP


        AREA ||i.I2C_MasterInit||, CODE, READONLY, ALIGN=2

I2C_MasterInit PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r7,r2
        CBZ      r5,|L18.14|
        B        |L18.26|
|L18.14|
        MOV      r2,#0x223
        ADR      r1,|L18.156|
        ADR      r0,|L18.196|
        BL       __aeabi_assert
|L18.26|
        CBZ      r7,|L18.30|
        B        |L18.42|
|L18.30|
        MOV      r2,#0x224
        ADR      r1,|L18.156|
        ADR      r0,|L18.220|
        BL       __aeabi_assert
|L18.42|
        MOV      r0,r4
        BL       I2C_GetInstance
        LDR      r1,|L18.240|
        LDR      r8,[r1,r0,LSL #2]
        MOV      r0,r8
        BL       CLOCK_EnableClock
        MOVS     r0,#0
        STRB     r0,[r4,#0]
        STRB     r0,[r4,#1]
        STRB     r0,[r4,#2]
        MOVS     r0,#0xff
        STRB     r0,[r4,#3]
        MOVS     r0,#0
        STRB     r0,[r4,#5]
        MOVS     r0,#0x50
        STRB     r0,[r4,#6]
        MOVS     r0,#0
        STRB     r0,[r4,#7]
        LDRB     r0,[r4,#2]
        BIC      r0,r0,#0x80
        STRB     r0,[r4,#2]
        MOV      r1,#0x5012
        MOV      r0,r4
        BL       I2C_MasterClearStatusFlags
        MOV      r2,r7
        MOV      r0,r4
        LDR      r1,[r5,#4]
        BL       I2C_MasterSetBaudRate
        LDRB     r6,[r4,#6]
        BIC      r6,r6,#0x80
        LDRB     r0,[r5,#1]
        MOVS     r1,#0x80
        AND      r0,r1,r0,LSL #7
        ORRS     r6,r6,r0
        BIC      r6,r6,#0xf
        LDRB     r0,[r5,#8]
        AND      r0,r0,#0xf
        ORRS     r6,r6,r0
        STRB     r6,[r4,#6]
        LDRB     r0,[r5,#0]
        AND      r0,r1,r0,LSL #7
        STRB     r0,[r4,#2]
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L18.156|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L18.196|
        DCB      "NULL != masterConfig",0
        DCB      0
        DCB      0
        DCB      0
|L18.220|
        DCB      "0U != srcClock_Hz",0
        DCB      0
        DCB      0
|L18.240|
        DCD      s_i2cClocks

        AREA ||i.I2C_MasterReadBlocking||, CODE, READONLY, ALIGN=1

I2C_MasterReadBlocking PROC
        PUSH     {r3-r7,lr}
        MOV      r4,r0
        MOV      r6,r1
        MOV      r5,r2
        MOVS     r7,#0
        MOVS     r0,#0
        STR      r0,[sp,#0]
        LDRB     r0,[sp,#0]
        ADDS     r0,r0,#1
        UXTB     r0,r0
        STR      r0,[sp,#0]
        NOP      
|L19.26|
        LDRB     r0,[r4,#3]
        AND      r0,r0,#0x80
        CMP      r0,#0
        BEQ      |L19.26|
        LDRB     r0,[r4,#2]
        BIC      r0,r0,#0x18
        STRB     r0,[r4,#2]
        LDRB     r0,[r4,#4]
        STR      r0,[sp,#0]
        CMP      r5,#1
        BNE      |L19.60|
        LDRB     r0,[r4,#2]
        ORR      r0,r0,#8
        STRB     r0,[r4,#2]
|L19.60|
        MOVS     r0,#2
        STRB     r0,[r4,#3]
        B        |L19.126|
|L19.66|
        NOP      
|L19.68|
        LDRB     r0,[r4,#3]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L19.68|
        CBNZ     r5,|L19.104|
        AND      r0,r3,#4
        CBNZ     r0,|L19.96|
        MOV      r0,r4
        BL       I2C_MasterStop
        MOV      r7,r0
        B        |L19.104|
|L19.96|
        LDRB     r0,[r4,#2]
        ORR      r0,r0,#0x10
        STRB     r0,[r4,#2]
|L19.104|
        LDRB     r0,[r4,#4]
        STRB     r0,[r6],#1
        CMP      r5,#1
        BNE      |L19.122|
        LDRB     r0,[r4,#2]
        ORR      r0,r0,#8
        STRB     r0,[r4,#2]
|L19.122|
        MOVS     r0,#2
        STRB     r0,[r4,#3]
|L19.126|
        SUBS     r0,r5,#0
        SUB      r5,r5,#1
        BNE      |L19.66|
        MOV      r0,r7
        POP      {r3-r7,pc}
        ENDP


        AREA ||i.I2C_MasterRepeatedStart||, CODE, READONLY, ALIGN=1

I2C_MasterRepeatedStart PROC
        PUSH     {r4-r9,lr}
        MOV      r3,r0
        MOV      r5,r1
        MOV      r6,r2
        MOVS     r7,#0
        MOV      r0,r3
        BL       I2C_MasterGetStatusFlags
        MOV      r8,r0
        MOV      r9,#6
        LDRB     r0,[r3,#2]
        AND      r0,r0,#0x20
        CBNZ     r0,|L20.44|
        AND      r0,r8,#0x20
        CBZ      r0,|L20.44|
        MOV      r7,#0x44c
        B        |L20.96|
|L20.44|
        LDRB     r4,[r3,#1]
        BIC      r0,r4,#0xc0
        STRB     r0,[r3,#1]
        LDRB     r0,[r3,#2]
        ORR      r0,r0,#0x14
        STRB     r0,[r3,#2]
        STRB     r4,[r3,#1]
        B        |L20.66|
|L20.64|
        NOP      
|L20.66|
        SUBS     r0,r9,#0
        SUB      r1,r9,#1
        AND      r9,r1,#0xff
        BNE      |L20.64|
        CMP      r6,#1
        BNE      |L20.88|
        MOVS     r0,#1
        B        |L20.90|
|L20.88|
        MOVS     r0,#0
|L20.90|
        ORR      r0,r0,r5,LSL #1
        STRB     r0,[r3,#4]
|L20.96|
        MOV      r0,r7
        POP      {r4-r9,pc}
        ENDP


        AREA ||i.I2C_MasterSetBaudRate||, CODE, READONLY, ALIGN=2

I2C_MasterSetBaudRate PROC
        PUSH     {r4-r11,lr}
        MOV      r6,r0
        MOV      r7,r2
        MOV      r5,#0xffffffff
        MOV      r8,#0
        MOV      r9,#0
        MOV      r10,#1
        MOVS     r2,#0
        B        |L21.104|
|L21.28|
        LSL      r12,r10,r2
        MOVS     r3,#0
        B        |L21.90|
|L21.36|
        LDR      r11,|L21.136|
        LDRH     r11,[r11,r3,LSL #1]
        MUL      r11,r11,r12
        UDIV     r0,r7,r11
        CMP      r1,r0
        BLS      |L21.62|
        SUB      r11,r1,r0
        B        |L21.66|
|L21.62|
        SUB      r11,r0,r1
|L21.66|
        MOV      r4,r11
        CMP      r4,r5
        BCS      |L21.82|
        MOV      r8,r2
        MOV      r9,r3
        MOV      r5,r4
        CBNZ     r4,|L21.82|
        B        |L21.94|
|L21.82|
        ADD      r11,r3,#1
        AND      r3,r11,#0xff
|L21.90|
        CMP      r3,#0x40
        BCC      |L21.36|
|L21.94|
        NOP      
        ADD      r11,r2,#1
        AND      r2,r11,#0xff
|L21.104|
        CMP      r2,#2
        BHI      |L21.112|
        CMP      r5,#0
        BNE      |L21.28|
|L21.112|
        MOV      r11,#0xc0
        AND      r11,r11,r8,LSL #6
        AND      lr,r9,#0x3f
        ORR      r11,r11,lr
        STRB     r11,[r6,#1]
        POP      {r4-r11,pc}
        ENDP

|L21.136|
        DCD      s_i2cDividerTable

        AREA ||i.I2C_MasterStart||, CODE, READONLY, ALIGN=1

I2C_MasterStart PROC
        PUSH     {r4-r7,lr}
        MOV      r3,r0
        MOV      r4,r1
        MOV      r5,r2
        MOVS     r6,#0
        MOV      r0,r3
        BL       I2C_MasterGetStatusFlags
        MOV      r7,r0
        AND      r0,r7,#0x20
        CBZ      r0,|L22.30|
        MOV      r6,#0x44c
        B        |L22.54|
|L22.30|
        LDRB     r0,[r3,#2]
        ORR      r0,r0,#0x30
        STRB     r0,[r3,#2]
        CMP      r5,#1
        BNE      |L22.46|
        MOVS     r0,#1
        B        |L22.48|
|L22.46|
        MOVS     r0,#0
|L22.48|
        ORR      r0,r0,r4,LSL #1
        STRB     r0,[r3,#4]
|L22.54|
        MOV      r0,r6
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.I2C_MasterStop||, CODE, READONLY, ALIGN=1

I2C_MasterStop PROC
        MOV      r1,r0
        MOVS     r0,#0
        LDRB     r2,[r1,#2]
        BIC      r2,r2,#0x38
        STRB     r2,[r1,#2]
        NOP      
|L23.14|
        LDRB     r2,[r1,#3]
        AND      r2,r2,#0x20
        CMP      r2,#0
        BNE      |L23.14|
        BX       lr
        ENDP


        AREA ||i.I2C_MasterTransferAbort||, CODE, READONLY, ALIGN=2

I2C_MasterTransferAbort PROC
        PUSH     {r3-r5,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBZ      r5,|L24.10|
        B        |L24.22|
|L24.10|
        MOV      r2,#0x5f3
        ADR      r1,|L24.136|
        ADR      r0,|L24.176|
        BL       __aeabi_assert
|L24.22|
        MOVS     r0,#0
        STR      r0,[sp,#0]
        LDRB     r0,[sp,#0]
        ADDS     r0,r0,#1
        UXTB     r0,r0
        STR      r0,[sp,#0]
        MOVS     r1,#0x40
        MOV      r0,r4
        BL       I2C_DisableInterrupts
        MOVS     r0,#0
        STRB     r0,[r5,#0x1c]
        LDRB     r0,[r4,#2]
        AND      r0,r0,#0x20
        CBNZ     r0,|L24.62|
        MOV      r0,#0x44c
|L24.60|
        POP      {r3-r5,pc}
|L24.62|
        LDRB     r0,[r5,#5]
        CMP      r0,#1
        BNE      |L24.106|
        LDRB     r0,[r4,#2]
        ORR      r0,r0,#8
        STRB     r0,[r4,#2]
        NOP      
|L24.78|
        LDRB     r0,[r4,#3]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L24.78|
        MOVS     r0,#2
        STRB     r0,[r4,#3]
        LDRB     r0,[r4,#2]
        BIC      r0,r0,#0x38
        STRB     r0,[r4,#2]
        LDRB     r0,[r4,#4]
        STR      r0,[sp,#0]
        B        |L24.130|
|L24.106|
        NOP      
|L24.108|
        LDRB     r0,[r4,#3]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L24.108|
        MOVS     r0,#2
        STRB     r0,[r4,#3]
        LDRB     r0,[r4,#2]
        BIC      r0,r0,#0x38
        STRB     r0,[r4,#2]
|L24.130|
        MOVS     r0,#0
        B        |L24.60|
        ENDP

        DCW      0x0000
|L24.136|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L24.176|
        DCB      "NULL != handle",0
        DCB      0

        AREA ||i.I2C_MasterTransferBlocking||, CODE, READONLY, ALIGN=2

I2C_MasterTransferBlocking PROC
        PUSH     {r4-r10,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L25.12|
        B        |L25.24|
|L25.12|
        MOV      r2,#0x4c2
        ADR      r1,|L25.416|
        ADR      r0,|L25.456|
        BL       __aeabi_assert
|L25.24|
        LDRB     r7,[r4,#5]
        MOVS     r6,#0
        MOV      r1,#0x5012
        MOV      r0,r5
        BL       I2C_MasterClearStatusFlags
        NOP      
|L25.40|
        LDRB     r0,[r5,#3]
        AND      r0,r0,#0x80
        CMP      r0,#0
        BEQ      |L25.40|
        LDRB     r0,[r4,#0xc]
        CBZ      r0,|L25.62|
        LDRB     r0,[r4,#5]
        CMP      r0,#1
        BNE      |L25.62|
        MOVS     r7,#0
|L25.62|
        LDRB     r0,[r4,#0]
        AND      r0,r0,#1
        CBZ      r0,|L25.80|
        CMP      r7,#1
        BNE      |L25.114|
        MOVS     r0,#4
|L25.76|
        POP      {r4-r10,pc}
|L25.80|
        LDRB     r0,[r4,#0]
        AND      r0,r0,#2
        CBZ      r0,|L25.102|
        LDRB     r1,[r4,#4]
        MOV      r2,r7
        MOV      r0,r5
        BL       I2C_MasterRepeatedStart
        MOV      r6,r0
        B        |L25.114|
|L25.102|
        LDRB     r1,[r4,#4]
        MOV      r2,r7
        MOV      r0,r5
        BL       I2C_MasterStart
        MOV      r6,r0
|L25.114|
        LDRB     r0,[r4,#0]
        AND      r0,r0,#1
        CBNZ     r0,|L25.172|
        CBZ      r6,|L25.128|
        MOV      r0,r6
        B        |L25.76|
|L25.128|
        NOP      
|L25.130|
        LDRB     r0,[r5,#3]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L25.130|
        LDRB     r1,[r5,#3]
        MOV      r0,r5
        BL       I2C_CheckAndClearError
        MOV      r6,r0
        CBZ      r6,|L25.172|
        MOV      r0,#0x44e
        CMP      r6,r0
        BNE      |L25.168|
        ADDS     r6,r0,#3
        MOV      r0,r5
        BL       I2C_MasterStop
|L25.168|
        MOV      r0,r6
        B        |L25.76|
|L25.172|
        LDRB     r0,[r4,#0xc]
        CMP      r0,#0
        BEQ      |L25.320|
        NOP      
|L25.180|
        MOVS     r0,#2
        STRB     r0,[r5,#3]
        LDRB     r0,[r4,#0xc]
        SUBS     r0,r0,#1
        STRB     r0,[r4,#0xc]
        LDRB     r1,[r4,#0xc]
        LSLS     r1,r1,#3
        LDR      r0,[r4,#8]
        LSRS     r0,r0,r1
        STRB     r0,[r5,#4]
        NOP      
|L25.202|
        LDRB     r0,[r5,#3]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L25.202|
        LDRB     r1,[r5,#3]
        MOV      r0,r5
        BL       I2C_CheckAndClearError
        MOV      r6,r0
        CBZ      r6,|L25.242|
        MOV      r0,#0x44e
        CMP      r6,r0
        BNE      |L25.238|
        MOV      r0,r5
        BL       I2C_MasterStop
|L25.238|
        MOV      r0,r6
        B        |L25.76|
|L25.242|
        LDRB     r0,[r4,#0xc]
        CMP      r0,#0
        BNE      |L25.180|
        LDRB     r0,[r4,#5]
        CMP      r0,#1
        BNE      |L25.320|
        MOVS     r0,#2
        STRB     r0,[r5,#3]
        LDRB     r1,[r4,#4]
        MOVS     r2,#1
        MOV      r0,r5
        BL       I2C_MasterRepeatedStart
        MOV      r6,r0
        CBZ      r6,|L25.276|
        MOV      r0,r6
        B        |L25.76|
|L25.276|
        NOP      
|L25.278|
        LDRB     r0,[r5,#3]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L25.278|
        LDRB     r1,[r5,#3]
        MOV      r0,r5
        BL       I2C_CheckAndClearError
        MOV      r6,r0
        CBZ      r6,|L25.320|
        MOV      r0,#0x44e
        CMP      r6,r0
        BNE      |L25.316|
        ADDS     r6,r0,#3
        MOV      r0,r5
        BL       I2C_MasterStop
|L25.316|
        MOV      r0,r6
        B        |L25.76|
|L25.320|
        LDRB     r0,[r4,#5]
        CBNZ     r0,|L25.372|
        LDR      r0,[r4,#0x14]
        CBZ      r0,|L25.356|
        LDR      r8,[r4,#0x10]
        LDR      r9,[r4,#0x14]
        LDR      r10,[r4,#0]
        MOV      r3,r10
        MOV      r2,r9
        MOV      r1,r8
        MOV      r0,r5
        BL       I2C_MasterWriteBlocking
        MOV      r6,r0
        B        |L25.372|
|L25.356|
        LDRB     r0,[r4,#0]
        AND      r0,r0,#4
        CBNZ     r0,|L25.372|
        MOV      r0,r5
        BL       I2C_MasterStop
        MOV      r6,r0
|L25.372|
        LDR      r0,[r4,#0x14]
        CBZ      r0,|L25.410|
        LDRB     r0,[r4,#5]
        CMP      r0,#1
        BNE      |L25.410|
        LDR      r8,[r4,#0x10]
        LDR      r9,[r4,#0x14]
        LDR      r10,[r4,#0]
        MOV      r3,r10
        MOV      r2,r9
        MOV      r1,r8
        MOV      r0,r5
        BL       I2C_MasterReadBlocking
        MOV      r6,r0
        NOP      
|L25.410|
        MOV      r0,r6
        B        |L25.76|
        ENDP

        DCW      0x0000
|L25.416|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L25.456|
        DCB      "NULL != xfer",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.I2C_MasterTransferCreateHandle||, CODE, READONLY, ALIGN=2

I2C_MasterTransferCreateHandle PROC
        PUSH     {r4-r8,lr}
        MOV      r8,r0
        MOV      r4,r1
        MOV      r6,r2
        MOV      r7,r3
        CBZ      r4,|L26.16|
        B        |L26.28|
|L26.16|
        MOV      r2,#0x5a7
        ADR      r1,|L26.72|
        ADR      r0,|L26.112|
        BL       __aeabi_assert
|L26.28|
        MOV      r0,r8
        BL       I2C_GetInstance
        MOV      r5,r0
        MOVS     r1,#0x28
        MOV      r0,r4
        BL       __aeabi_memclr4
        STR      r6,[r4,#0x20]
        STR      r7,[r4,#0x24]
        LDR      r0,|L26.128|
        STR      r4,[r0,r5,LSL #2]
        LDR      r0,|L26.132|
        LDR      r1,|L26.136|
        STR      r0,[r1,#0]  ; s_i2cMasterIsr
        LDR      r1,|L26.140|
        LDRSB    r0,[r1,r5]
        BL       EnableIRQ
        POP      {r4-r8,pc}
        ENDP

|L26.72|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L26.112|
        DCB      "NULL != handle",0
        DCB      0
|L26.128|
        DCD      s_i2cHandle
|L26.132|
        DCD      I2C_MasterTransferHandleIRQ
|L26.136|
        DCD      s_i2cMasterIsr
|L26.140|
        DCD      s_i2cIrqs

        AREA ||i.I2C_MasterTransferGetCount||, CODE, READONLY, ALIGN=2

I2C_MasterTransferGetCount PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        CBZ      r4,|L27.12|
        B        |L27.24|
|L27.12|
        MOV      r2,#0x645
        ADR      r1,|L27.44|
        ADR      r0,|L27.84|
        BL       __aeabi_assert
|L27.24|
        CBNZ     r5,|L27.30|
        MOVS     r0,#4
|L27.28|
        POP      {r4-r6,pc}
|L27.30|
        LDRD     r1,r0,[r4,#0x14]
        SUBS     r0,r0,r1
        STR      r0,[r5,#0]
        MOVS     r0,#0
        B        |L27.28|
        ENDP

        DCW      0x0000
|L27.44|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L27.84|
        DCB      "NULL != handle",0
        DCB      0

        AREA ||i.I2C_MasterTransferHandleIRQ||, CODE, READONLY, ALIGN=2

I2C_MasterTransferHandleIRQ PROC
        PUSH     {r3-r7,lr}
        MOV      r6,r0
        MOV      r7,r1
        CBZ      r7,|L28.10|
        B        |L28.22|
|L28.10|
        MOV      r2,#0x659
        ADR      r1,|L28.124|
        ADR      r0,|L28.164|
        BL       __aeabi_assert
|L28.22|
        MOV      r4,r7
        MOVS     r5,#0
        MOVS     r0,#2
        STRB     r0,[r6,#3]
        MOV      r2,sp
        MOV      r1,r4
        MOV      r0,r6
        BL       I2C_MasterTransferRunStateMachine
        MOV      r5,r0
        LDRB     r0,[sp,#0]
        CMP      r0,#1
        BEQ      |L28.52|
        CBZ      r5,|L28.122|
|L28.52|
        LDRB     r0,[r4,#0]
        AND      r0,r0,#4
        CBZ      r0,|L28.74|
        MOV      r0,#0x44e
        CMP      r5,r0
        BEQ      |L28.74|
        ADDS     r0,r0,#3
        CMP      r5,r0
        BNE      |L28.94|
|L28.74|
        LDRB     r0,[r6,#2]
        AND      r0,r0,#0x20
        CBZ      r0,|L28.94|
        MOV      r0,r6
        BL       I2C_MasterStop
        CBZ      r0,|L28.94|
        MOV      r5,#0x450
|L28.94|
        MOVS     r0,#0
        STRB     r0,[r4,#0x1c]
        MOVS     r1,#0x40
        MOV      r0,r6
        BL       I2C_DisableInterrupts
        LDR      r0,[r4,#0x20]
        CBZ      r0,|L28.122|
        MOV      r2,r5
        MOV      r1,r4
        MOV      r0,r6
        LDRD     r12,r3,[r4,#0x20]
        BLX      r12
|L28.122|
        POP      {r3-r7,pc}
        ENDP

|L28.124|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L28.164|
        DCB      "NULL != i2cHandle",0
        DCB      0
        DCB      0

        AREA ||i.I2C_MasterTransferNonBlocking||, CODE, READONLY, ALIGN=2

I2C_MasterTransferNonBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r7,r0
        MOV      r4,r1
        MOV      r6,r2
        CBZ      r4,|L29.14|
        B        |L29.26|
|L29.14|
        MOV      r2,#0x5cd
        ADR      r1,|L29.84|
        ADR      r0,|L29.124|
        BL       __aeabi_assert
|L29.26|
        CBZ      r6,|L29.30|
        B        |L29.42|
|L29.30|
        MOV      r2,#0x5ce
        ADR      r1,|L29.84|
        ADR      r0,|L29.140|
        BL       __aeabi_assert
|L29.42|
        MOVS     r5,#0
        LDRB     r0,[r4,#0x1c]
        CBZ      r0,|L29.54|
        MOV      r5,#0x44c
        B        |L29.76|
|L29.54|
        MOV      r2,r6
        MOV      r1,r4
        MOV      r0,r7
        BL       I2C_InitTransferStateMachine
        MOV      r5,r0
        CBNZ     r5,|L29.76|
        MOVS     r1,#0x40
        MOV      r0,r7
        BL       I2C_EnableInterrupts
|L29.76|
        MOV      r0,r5
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L29.84|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L29.124|
        DCB      "NULL != handle",0
        DCB      0
|L29.140|
        DCB      "NULL != xfer",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.I2C_MasterTransferRunStateMachine||, CODE, READONLY, ALIGN=1

I2C_MasterTransferRunStateMachine PROC
        PUSH     {r3-r11,lr}
        MOV      r5,r0
        MOV      r4,r1
        MOV      r6,r2
        MOVS     r7,#0
        LDRB     r8,[r5,#3]
        MOVS     r0,#0
        STRB     r0,[r6,#0]
        STR      r0,[sp,#0]
        LDR      r9,[r4,#0x14]
        LDRB     r0,[r4,#0x1c]
        CMP      r0,#3
        BNE      |L30.38|
        CMP      r9,#0
        BEQ      |L30.50|
|L30.38|
        LDRB     r0,[r4,#0x1c]
        CMP      r0,#5
        BNE      |L30.54|
        CMP      r9,#1
        BNE      |L30.54|
|L30.50|
        MOVS     r0,#1
        B        |L30.56|
|L30.54|
        MOVS     r0,#0
|L30.56|
        MOV      r10,r0
        LDRB     r0,[sp,#0]
        ADDS     r0,r0,#1
        UXTB     r0,r0
        STR      r0,[sp,#0]
        MOV      r1,r8
        MOV      r0,r5
        BL       I2C_CheckAndClearError
        MOV      r7,r0
        MOV      r0,#0x44e
        CMP      r7,r0
        BNE      |L30.94|
        CMP      r10,#0
        BEQ      |L30.94|
        MOVS     r7,#0
|L30.94|
        LDRB     r0,[r4,#0x1c]
        CMP      r0,#1
        BNE      |L30.136|
        AND      r0,r8,#1
        CBZ      r0,|L30.112|
        MOV      r7,#0x451
        B        |L30.136|
|L30.112|
        LDRB     r0,[r4,#0xc]
        CBZ      r0,|L30.122|
        MOVS     r0,#2
        STRB     r0,[r4,#0x1c]
        B        |L30.136|
|L30.122|
        LDRB     r0,[r4,#5]
        CBNZ     r0,|L30.132|
        MOVS     r0,#3
        STRB     r0,[r4,#0x1c]
        B        |L30.136|
|L30.132|
        MOVS     r0,#4
        STRB     r0,[r4,#0x1c]
|L30.136|
        CBZ      r7,|L30.144|
        MOV      r0,r7
|L30.140|
        POP      {r3-r11,pc}
|L30.144|
        LDRB     r0,[r4,#0x1c]
        CMP      r0,#2
        BEQ      |L30.164|
        CMP      r0,#3
        BEQ      |L30.242|
        CMP      r0,#4
        BEQ      |L30.272|
        CMP      r0,#5
        BNE      |L30.374|
        B        |L30.304|
|L30.164|
        LDRB     r0,[r4,#0xc]
        CBZ      r0,|L30.186|
        LDRB     r0,[r4,#0xc]
        SUBS     r0,r0,#1
        STRB     r0,[r4,#0xc]
        LDRB     r1,[r4,#0xc]
        LSLS     r1,r1,#3
        LDR      r0,[r4,#8]
        LSRS     r0,r0,r1
        STRB     r0,[r5,#4]
        B        |L30.240|
|L30.186|
        LDRB     r0,[r4,#5]
        CBNZ     r0,|L30.224|
        LDR      r0,[r4,#0x14]
        CBZ      r0,|L30.218|
        MOVS     r0,#3
        STRB     r0,[r4,#0x1c]
        LDR      r0,[r4,#0x10]
        LDRB     r0,[r0,#0]
        STRB     r0,[r5,#4]
        LDR      r0,[r4,#0x10]
        ADDS     r0,r0,#1
        STR      r0,[r4,#0x10]
        LDR      r0,[r4,#0x14]
        SUBS     r0,r0,#1
        STR      r0,[r4,#0x14]
        B        |L30.240|
|L30.218|
        MOVS     r0,#1
        STRB     r0,[r6,#0]
        B        |L30.240|
|L30.224|
        LDRB     r1,[r4,#4]
        MOVS     r2,#1
        MOV      r0,r5
        BL       I2C_MasterRepeatedStart
        MOV      r7,r0
        MOVS     r0,#4
        STRB     r0,[r4,#0x1c]
|L30.240|
        B        |L30.376|
|L30.242|
        LDR      r0,[r4,#0x14]
        CBZ      r0,|L30.266|
        LDR      r0,[r4,#0x10]
        LDRB     r0,[r0,#0]
        STRB     r0,[r5,#4]
        LDR      r0,[r4,#0x10]
        ADDS     r0,r0,#1
        STR      r0,[r4,#0x10]
        LDR      r0,[r4,#0x14]
        SUBS     r0,r0,#1
        STR      r0,[r4,#0x14]
        B        |L30.270|
|L30.266|
        MOVS     r0,#1
        STRB     r0,[r6,#0]
|L30.270|
        B        |L30.376|
|L30.272|
        LDRB     r0,[r5,#2]
        BIC      r0,r0,#0x18
        STRB     r0,[r5,#2]
        LDRB     r0,[r5,#4]
        STR      r0,[sp,#0]
        LDR      r0,[r4,#0x14]
        CMP      r0,#1
        BNE      |L30.298|
        LDRB     r0,[r5,#2]
        ORR      r0,r0,#8
        STRB     r0,[r5,#2]
|L30.298|
        MOVS     r0,#5
        STRB     r0,[r4,#0x1c]
        B        |L30.376|
|L30.304|
        LDR      r0,[r4,#0x14]
        SUBS     r1,r0,#1
        STR      r1,[r4,#0x14]
        CBZ      r0,|L30.372|
        LDR      r0,[r4,#0x14]
        CBNZ     r0,|L30.346|
        MOVS     r0,#1
        STRB     r0,[r6,#0]
        LDRB     r0,[r4,#0]
        AND      r0,r0,#4
        CBNZ     r0,|L30.338|
        MOV      r0,r5
        BL       I2C_MasterStop
        MOV      r7,r0
        B        |L30.346|
|L30.338|
        LDRB     r0,[r5,#2]
        ORR      r0,r0,#0x10
        STRB     r0,[r5,#2]
|L30.346|
        LDRB     r0,[r5,#4]
        LDR      r1,[r4,#0x10]
        STRB     r0,[r1,#0]
        LDR      r0,[r4,#0x10]
        ADDS     r0,r0,#1
        STR      r0,[r4,#0x10]
        LDR      r0,[r4,#0x14]
        CMP      r0,#1
        BNE      |L30.372|
        LDRB     r0,[r5,#2]
        ORR      r0,r0,#8
        STRB     r0,[r5,#2]
|L30.372|
        B        |L30.376|
|L30.374|
        NOP      
|L30.376|
        NOP      
        MOV      r0,r7
        B        |L30.140|
        ENDP


        AREA ||i.I2C_MasterWriteBlocking||, CODE, READONLY, ALIGN=1

I2C_MasterWriteBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r7,r3
        MOVS     r3,#0
        MOV      r8,r3
        NOP      
|L31.18|
        LDRB     r0,[r4,#3]
        AND      r0,r0,#0x80
        CMP      r0,#0
        BEQ      |L31.18|
        MOVS     r0,#2
        STRB     r0,[r4,#3]
        LDRB     r0,[r4,#2]
        ORR      r0,r0,#0x10
        STRB     r0,[r4,#2]
        B        |L31.102|
|L31.42|
        LDRB     r0,[r5],#1
        STRB     r0,[r4,#4]
        NOP      
|L31.50|
        LDRB     r0,[r4,#3]
        AND      r0,r0,#2
        CMP      r0,#0
        BEQ      |L31.50|
        LDRB     r8,[r4,#3]
        MOVS     r0,#2
        STRB     r0,[r4,#3]
        AND      r0,r8,#0x10
        CBZ      r0,|L31.82|
        MOVS     r0,#0x10
        STRB     r0,[r4,#3]
        MOV      r3,#0x44f
|L31.82|
        AND      r0,r8,#1
        CBZ      r0,|L31.98|
        CBZ      r6,|L31.98|
        MOVS     r0,#1
        STRB     r0,[r4,#3]
        MOV      r3,#0x44e
|L31.98|
        CBZ      r3,|L31.102|
        B        |L31.110|
|L31.102|
        SUBS     r0,r6,#0
        SUB      r6,r6,#1
        BNE      |L31.42|
|L31.110|
        NOP      
        CBNZ     r3,|L31.120|
        AND      r0,r7,#4
        CBZ      r0,|L31.128|
|L31.120|
        MOV      r0,#0x44e
        CMP      r3,r0
        BNE      |L31.140|
|L31.128|
        MOVS     r0,#2
        STRB     r0,[r4,#3]
        MOV      r0,r4
        BL       I2C_MasterStop
        MOV      r3,r0
|L31.140|
        MOV      r0,r3
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.I2C_SetHoldTime||, CODE, READONLY, ALIGN=2

I2C_SetHoldTime PROC
        PUSH     {r3-r11,lr}
        MOV      r6,r0
        MOV      r7,r2
        MOV      r5,#0xffffffff
        MOV      r8,#0
        MOV      r9,#0
        MOV      r10,#1
        STR      r10,[sp,#0]
        MOVS     r2,#0
        B        |L32.128|
|L32.32|
        LDR      r10,[sp,#0]
        LSL      r12,r10,r2
        MOVS     r3,#0
        B        |L32.114|
|L32.44|
        MOV      r10,#0x3e8
        UDIV     r11,r7,r10
        LDR      r10,|L32.160|
        LDRH     r10,[r10,r3,LSL #1]
        MUL      r10,r10,r12
        LDR      lr,|L32.164|
        MUL      r10,r10,lr
        UDIV     r0,r10,r11
        CMP      r1,r0
        BLS      |L32.86|
        SUB      r10,r1,r0
        B        |L32.90|
|L32.86|
        SUB      r10,r0,r1
|L32.90|
        MOV      r4,r10
        CMP      r4,r5
        BCS      |L32.106|
        MOV      r8,r2
        MOV      r9,r3
        MOV      r5,r4
        CBNZ     r4,|L32.106|
        B        |L32.118|
|L32.106|
        ADD      r10,r3,#1
        AND      r3,r10,#0xff
|L32.114|
        CMP      r3,#0x40
        BCC      |L32.44|
|L32.118|
        NOP      
        ADD      r10,r2,#1
        AND      r2,r10,#0xff
|L32.128|
        CMP      r2,#2
        BHI      |L32.136|
        CMP      r5,#0
        BNE      |L32.32|
|L32.136|
        MOV      r10,#0xc0
        AND      r10,r10,r8,LSL #6
        AND      r11,r9,#0x3f
        ORR      r10,r10,r11
        STRB     r10,[r6,#1]
        POP      {r3-r11,pc}
        ENDP

|L32.160|
        DCD      s_i2cDividerTable
|L32.164|
        DCD      0x0007a120

        AREA ||i.I2C_SlaveDeinit||, CODE, READONLY, ALIGN=2

I2C_SlaveDeinit PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r1,#0
        MOV      r0,r4
        BL       I2C_Enable
        MOV      r0,r4
        BL       I2C_GetInstance
        LDR      r1,|L33.32|
        LDR      r5,[r1,r0,LSL #2]
        MOV      r0,r5
        BL       CLOCK_DisableClock
        POP      {r4-r6,pc}
        ENDP

|L33.32|
        DCD      s_i2cClocks

        AREA ||i.I2C_SlaveGetDefaultConfig||, CODE, READONLY, ALIGN=2

I2C_SlaveGetDefaultConfig PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L34.8|
        B        |L34.20|
|L34.8|
        MOV      r2,#0x6fa
        ADR      r1,|L34.52|
        ADR      r0,|L34.92|
        BL       __aeabi_assert
|L34.20|
        MOVS     r0,#0
        STR      r0,[r4,#0]
        STR      r0,[r4,#4]
        STR      r0,[r4,#8]
        STR      r0,[r4,#0xc]
        STRB     r0,[r4,#8]
        STRB     r0,[r4,#1]
        STRB     r0,[r4,#2]
        STRB     r0,[r4,#3]
        MOV      r0,#0xfa0
        STR      r0,[r4,#0xc]
        MOVS     r0,#1
        STRB     r0,[r4,#0]
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L34.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L34.92|
        DCB      "NULL != slaveConfig",0

        AREA ||i.I2C_SlaveInit||, CODE, READONLY, ALIGN=2

I2C_SlaveInit PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r7,r2
        CBZ      r5,|L35.14|
        B        |L35.26|
|L35.14|
        MOV      r2,#0x6a0
        ADR      r1,|L35.208|
        ADR      r0,|L35.248|
        BL       __aeabi_assert
|L35.26|
        MOV      r0,r4
        BL       I2C_GetInstance
        LDR      r1,|L35.268|
        LDR      r8,[r1,r0,LSL #2]
        MOV      r0,r8
        BL       CLOCK_EnableClock
        MOVS     r0,#0
        STRB     r0,[r4,#0]
        STRB     r0,[r4,#1]
        STRB     r0,[r4,#2]
        MOVS     r0,#0xff
        STRB     r0,[r4,#3]
        MOVS     r0,#0
        STRB     r0,[r4,#5]
        MOVS     r0,#0x50
        STRB     r0,[r4,#6]
        MOVS     r0,#0
        STRB     r0,[r4,#7]
        LDRB     r0,[r5,#8]
        CBZ      r0,|L35.78|
        CMP      r0,#2
        BNE      |L35.136|
        B        |L35.88|
|L35.78|
        LDRB     r0,[r5,#4]
        LSLS     r0,r0,#25
        LSRS     r0,r0,#24
        STRB     r0,[r4,#0]
        B        |L35.138|
|L35.88|
        LDRH     r0,[r5,#4]
        LDRH     r1,[r5,#6]
        CMP      r0,r1
        BGE      |L35.98|
        B        |L35.110|
|L35.98|
        MOV      r2,#0x6bd
        ADR      r1,|L35.208|
        ADR      r0,|L35.272|
        BL       __aeabi_assert
|L35.110|
        LDRB     r0,[r5,#4]
        LSLS     r0,r0,#25
        LSRS     r0,r0,#24
        STRB     r0,[r4,#0]
        LDRB     r0,[r5,#6]
        LSLS     r0,r0,#25
        LSRS     r0,r0,#24
        STRB     r0,[r4,#7]
        LDRB     r0,[r4,#5]
        ORR      r0,r0,#8
        STRB     r0,[r4,#5]
        B        |L35.138|
|L35.136|
        NOP      
|L35.138|
        NOP      
        LDRB     r6,[r4,#2]
        BIC      r6,r6,#2
        LDRB     r0,[r5,#2]
        MOVS     r1,#2
        AND      r0,r1,r0,LSL #1
        ORRS     r0,r0,r6
        LDRB     r1,[r5,#0]
        MOVS     r2,#0x80
        AND      r1,r2,r1,LSL #7
        ORRS     r0,r0,r1
        STRB     r0,[r4,#2]
        LDRB     r6,[r4,#5]
        BIC      r6,r6,#0x90
        LDRB     r0,[r5,#3]
        MOVS     r1,#0x10
        AND      r0,r1,r0,LSL #4
        LDRB     r1,[r5,#1]
        AND      r1,r2,r1,LSL #7
        ORRS     r0,r0,r1
        ORRS     r6,r6,r0
        STRB     r6,[r4,#5]
        MOV      r2,r7
        MOV      r0,r4
        LDR      r1,[r5,#0xc]
        BL       I2C_SetHoldTime
        POP      {r4-r8,pc}
        ENDP

|L35.208|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L35.248|
        DCB      "NULL != slaveConfig",0
|L35.268|
        DCD      s_i2cClocks
|L35.272|
        DCB      "slaveConfig->slaveAddress < slaveConfig->upperAddress",0
        DCB      0
        DCB      0

        AREA ||i.I2C_SlaveReadBlocking||, CODE, READONLY, ALIGN=1

I2C_SlaveReadBlocking PROC
        PUSH     {r3-r5,lr}
        MOV      r3,r0
        MOVS     r0,#0
        MOVS     r4,#0
        STR      r4,[sp,#0]
        LDRB     r4,[sp,#0]
        ADDS     r4,r4,#1
        UXTB     r4,r4
        STR      r4,[sp,#0]
        NOP      
|L36.22|
        LDRB     r4,[r3,#6]
        AND      r4,r4,#0x10
        CMP      r4,#0
        BEQ      |L36.22|
        LDRB     r4,[r3,#6]
        ORR      r4,r4,#0x10
        STRB     r4,[r3,#6]
        MOVS     r4,#2
        STRB     r4,[r3,#3]
        NOP      
|L36.46|
        LDRB     r4,[r3,#3]
        AND      r4,r4,#0x40
        CMP      r4,#0
        BEQ      |L36.46|
        NOP      
|L36.58|
        LDRB     r4,[r3,#3]
        AND      r4,r4,#2
        CMP      r4,#0
        BEQ      |L36.58|
        LDRB     r4,[r3,#4]
        STR      r4,[sp,#0]
        MOVS     r4,#2
        STRB     r4,[r3,#3]
        LDRB     r4,[r3,#2]
        BIC      r4,r4,#0x10
        STRB     r4,[r3,#2]
        B        |L36.108|
|L36.86|
        NOP      
|L36.88|
        LDRB     r4,[r3,#3]
        AND      r4,r4,#2
        CMP      r4,#0
        BEQ      |L36.88|
        MOVS     r4,#2
        STRB     r4,[r3,#3]
        LDRB     r4,[r3,#4]
        STRB     r4,[r1],#1
|L36.108|
        SUBS     r4,r2,#0
        SUB      r2,r2,#1
        BNE      |L36.86|
        POP      {r3-r5,pc}
        ENDP


        AREA ||i.I2C_SlaveTransferAbort||, CODE, READONLY, ALIGN=2

I2C_SlaveTransferAbort PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L37.10|
        B        |L37.22|
|L37.10|
        MOV      r2,#0x817
        ADR      r1,|L37.52|
        ADR      r0,|L37.92|
        BL       __aeabi_assert
|L37.22|
        LDRB     r0,[r4,#0]
        CMP      r0,#1
        BNE      |L37.48|
        MOVS     r1,#0x60
        MOV      r0,r5
        BL       I2C_DisableInterrupts
        MOVS     r1,#0x14
        ADDS     r0,r4,#4
        BL       __aeabi_memclr4
        MOVS     r0,#0
        STRB     r0,[r4,#0]
|L37.48|
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L37.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L37.92|
        DCB      "NULL != handle",0
        DCB      0

        AREA ||i.I2C_SlaveTransferCreateHandle||, CODE, READONLY, ALIGN=2

I2C_SlaveTransferCreateHandle PROC
        PUSH     {r4-r8,lr}
        MOV      r8,r0
        MOV      r4,r1
        MOV      r6,r2
        MOV      r7,r3
        CBZ      r4,|L38.16|
        B        |L38.28|
|L38.16|
        MOV      r2,#0x7be
        ADR      r1,|L38.72|
        ADR      r0,|L38.112|
        BL       __aeabi_assert
|L38.28|
        MOV      r0,r8
        BL       I2C_GetInstance
        MOV      r5,r0
        MOVS     r1,#0x24
        MOV      r0,r4
        BL       __aeabi_memclr4
        STR      r6,[r4,#0x1c]
        STR      r7,[r4,#0x20]
        LDR      r0,|L38.128|
        STR      r4,[r0,r5,LSL #2]
        LDR      r0,|L38.132|
        LDR      r1,|L38.136|
        STR      r0,[r1,#0]  ; s_i2cSlaveIsr
        LDR      r1,|L38.140|
        LDRSB    r0,[r1,r5]
        BL       EnableIRQ
        POP      {r4-r8,pc}
        ENDP

|L38.72|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L38.112|
        DCB      "NULL != handle",0
        DCB      0
|L38.128|
        DCD      s_i2cHandle
|L38.132|
        DCD      I2C_SlaveTransferHandleIRQ
|L38.136|
        DCD      s_i2cSlaveIsr
|L38.140|
        DCD      s_i2cIrqs

        AREA ||i.I2C_SlaveTransferGetCount||, CODE, READONLY, ALIGN=2

I2C_SlaveTransferGetCount PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r5,r1
        MOV      r4,r2
        CBZ      r5,|L39.12|
        B        |L39.24|
|L39.12|
        MOV      r2,#0x831
        ADR      r1,|L39.52|
        ADR      r0,|L39.92|
        BL       __aeabi_assert
|L39.24|
        CBNZ     r4,|L39.30|
        MOVS     r0,#4
|L39.28|
        POP      {r4-r6,pc}
|L39.30|
        LDRB     r0,[r5,#0]
        CBNZ     r0,|L39.42|
        MOVS     r0,#0
        STR      r0,[r4,#0]
        MOVS     r0,#6
        B        |L39.28|
|L39.42|
        LDR      r0,[r5,#0x14]
        STR      r0,[r4,#0]
        MOVS     r0,#0
        B        |L39.28|
        ENDP

        DCW      0x0000
|L39.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L39.92|
        DCB      "NULL != handle",0
        DCB      0

        AREA ||i.I2C_SlaveTransferHandleIRQ||, CODE, READONLY, ALIGN=2

I2C_SlaveTransferHandleIRQ PROC
        PUSH     {r3-r11,lr}
        MOV      r6,r0
        MOV      r8,r1
        CMP      r8,#0
        BEQ      |L40.16|
        B        |L40.28|
|L40.16|
        MOV      r2,#0x84d
        ADR      r1,|L40.512|
        ADR      r0,|L40.552|
        BL       __aeabi_assert
|L40.28|
        MOV      r10,#0
        MOV      r4,r8
        MOVS     r0,#0
        STR      r0,[sp,#0]
        MOV      r9,r0
        LDRB     r0,[sp,#0]
        ADDS     r0,r0,#1
        UXTB     r0,r0
        STR      r0,[sp,#0]
        NOP      
        MOV      r0,r6
        BL       I2C_MasterGetStatusFlags
        UXTH     r7,r0
        ADDS     r5,r4,#4
        AND      r0,r7,#0x4000
        CBZ      r0,|L40.130|
        MOV      r1,#0x4000
        MOV      r0,r6
        BL       I2C_MasterClearStatusFlags
        MOVS     r0,#2
        STRB     r0,[r6,#3]
        LDRB     r0,[r4,#0]
        CMP      r0,#1
        BNE      |L40.120|
        MOVS     r0,#0x20
        STRB     r0,[r5,#0]
        MOVS     r0,#0
        STR      r0,[r5,#0xc]
        STRB     r0,[r4,#0]
        LDRB     r1,[r5,#0]
        LDR      r0,[r4,#0x18]
        ANDS     r0,r0,r1
        CBZ      r0,|L40.120|
        LDR      r0,[r4,#0x1c]
        CBZ      r0,|L40.120|
        MOV      r1,r5
        MOV      r0,r6
        LDRD     r3,r2,[r4,#0x1c]
        BLX      r3
|L40.120|
        AND      r0,r7,#0x40
        CBNZ     r0,|L40.130|
|L40.126|
        POP      {r3-r11,pc}
|L40.130|
        AND      r0,r7,#0x1000
        CBZ      r0,|L40.184|
        MOV      r1,#0x1000
        MOV      r0,r6
        BL       I2C_MasterClearStatusFlags
        MOVS     r0,#2
        STRB     r0,[r6,#3]
        MOVS     r0,#0x10
        STRB     r0,[r5,#0]
        LDRB     r1,[r5,#0]
        LDR      r0,[r4,#0x18]
        ANDS     r0,r0,r1
        CBZ      r0,|L40.176|
        LDR      r0,[r4,#0x1c]
        CBZ      r0,|L40.176|
        MOV      r1,r5
        MOV      r0,r6
        LDRD     r3,r2,[r4,#0x1c]
        BLX      r3
|L40.176|
        AND      r0,r7,#0x40
        CBNZ     r0,|L40.184|
        B        |L40.126|
|L40.184|
        MOVS     r0,#2
        STRB     r0,[r6,#3]
        AND      r0,r7,#1
        CBZ      r0,|L40.254|
        LDRB     r0,[r6,#2]
        BIC      r0,r0,#0x18
        STRB     r0,[r6,#2]
        LDRB     r0,[r6,#4]
        STR      r0,[sp,#0]
        LDR      r0,[r4,#0xc]
        CMP      r0,#0
        BEQ      |L40.424|
        MOVS     r0,#0x20
        STRB     r0,[r5,#0]
        MOV      r0,#0x44e
        STR      r0,[r5,#0xc]
        MOVS     r0,#0
        STRB     r0,[r4,#0]
        LDRB     r1,[r5,#0]
        LDR      r0,[r4,#0x18]
        ANDS     r0,r0,r1
        CMP      r0,#0
        BEQ      |L40.424|
        LDR      r0,[r4,#0x1c]
        CMP      r0,#0
        BEQ      |L40.424|
        MOV      r1,r5
        MOV      r0,r6
        LDRD     r3,r2,[r4,#0x1c]
        BLX      r3
        B        |L40.424|
|L40.254|
        AND      r0,r7,#0x40
        CBZ      r0,|L40.332|
        MOVS     r0,#1
        STRB     r0,[r4,#0]
        STRB     r0,[r5,#0]
        AND      r0,r7,#4
        CBZ      r0,|L40.286|
        LDRB     r0,[r6,#2]
        ORR      r0,r0,#0x10
        STRB     r0,[r6,#2]
        MOV      r10,#1
        B        |L40.308|
|L40.286|
        LDRB     r0,[r6,#2]
        BIC      r0,r0,#0x18
        STRB     r0,[r6,#2]
        LDRB     r0,[r6,#4]
        STR      r0,[sp,#0]
        LDRB     r0,[sp,#0]
        CBNZ     r0,|L40.308|
        MOVS     r0,#0x40
        STRB     r0,[r5,#0]
|L40.308|
        LDRB     r1,[r5,#0]
        LDR      r0,[r4,#0x18]
        ANDS     r0,r0,r1
        CBZ      r0,|L40.418|
        LDR      r0,[r4,#0x1c]
        CBZ      r0,|L40.418|
        MOV      r1,r5
        MOV      r0,r6
        LDRD     r3,r2,[r4,#0x1c]
        BLX      r3
        B        |L40.424|
|L40.332|
        AND      r0,r7,#0x80
        CBZ      r0,|L40.420|
        AND      r0,r7,#4
        CBZ      r0,|L40.350|
        MOV      r10,#1
        B        |L40.424|
|L40.350|
        LDR      r9,[r5,#8]
        LDR      r0,[r5,#4]
        CBZ      r0,|L40.364|
        CMP      r9,#0
        BNE      |L40.386|
|L40.364|
        MOVS     r0,#4
        STRB     r0,[r5,#0]
        LDR      r0,[r4,#0x1c]
        CBZ      r0,|L40.382|
        MOV      r1,r5
        MOV      r0,r6
        LDRD     r3,r2,[r4,#0x1c]
        BLX      r3
|L40.382|
        MOVS     r0,#0
        STR      r0,[r5,#0x10]
|L40.386|
        LDRB     r11,[r6,#4]
        LDR      r0,[r4,#0xc]
        CBZ      r0,|L40.418|
        LDR      r0,[r4,#8]
        ADDS     r1,r0,#1
        STR      r1,[r4,#8]
        STRB     r11,[r0,#0]
        LDR      r0,[r4,#0xc]
        SUBS     r0,r0,#1
        STR      r0,[r4,#0xc]
        LDR      r0,[r5,#0x10]
        ADDS     r0,r0,#1
        STR      r0,[r5,#0x10]
        LDR      r0,[r4,#0xc]
|L40.418|
        B        |L40.424|
|L40.420|
        LDRB     r0,[r6,#4]
        STR      r0,[sp,#0]
|L40.424|
        CMP      r10,#0
        BEQ      |L40.506|
        LDR      r9,[r5,#8]
        LDR      r0,[r5,#4]
        CBZ      r0,|L40.444|
        CMP      r9,#0
        BNE      |L40.466|
|L40.444|
        MOVS     r0,#2
        STRB     r0,[r5,#0]
        LDR      r0,[r4,#0x1c]
        CBZ      r0,|L40.462|
        MOV      r1,r5
        MOV      r0,r6
        LDRD     r3,r2,[r4,#0x1c]
        BLX      r3
|L40.462|
        MOVS     r0,#0
        STR      r0,[r5,#0x10]
|L40.466|
        LDR      r0,[r4,#0xc]
        CBZ      r0,|L40.494|
        LDR      r0,[r4,#8]
        ADDS     r1,r0,#1
        STR      r1,[r4,#8]
        LDRB     r1,[r0,#0]
        STRB     r1,[r6,#4]
        LDR      r0,[r4,#0xc]
        SUBS     r0,r0,#1
        STR      r0,[r4,#0xc]
        LDR      r0,[r5,#0x10]
        ADDS     r0,r0,#1
        STR      r0,[r5,#0x10]
        B        |L40.506|
|L40.494|
        LDRB     r0,[r6,#2]
        BIC      r0,r0,#0x18
        STRB     r0,[r6,#2]
        LDRB     r0,[r6,#4]
        STR      r0,[sp,#0]
|L40.506|
        NOP      
        B        |L40.126|
        ENDP

        DCW      0x0000
|L40.512|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L40.552|
        DCB      "NULL != i2cHandle",0
        DCB      0
        DCB      0

        AREA ||i.I2C_SlaveTransferNonBlocking||, CODE, READONLY, ALIGN=2

I2C_SlaveTransferNonBlocking PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r4,r1
        MOV      r6,r2
        CBZ      r4,|L41.14|
        B        |L41.26|
|L41.14|
        MOV      r2,#0x7ed
        ADR      r1,|L41.92|
        ADR      r0,|L41.132|
        BL       __aeabi_assert
|L41.26|
        LDRB     r0,[r4,#0]
        CMP      r0,#1
        BNE      |L41.40|
        MOV      r0,#0x44c
|L41.36|
        POP      {r4-r8,pc}
|L41.40|
        MOVS     r1,#0x60
        MOV      r0,r5
        BL       I2C_DisableInterrupts
        MOVS     r1,#0x14
        ADDS     r0,r4,#4
        BL       __aeabi_memclr4
        MOVS     r0,#1
        STRB     r0,[r4,#0]
        ORR      r0,r6,#0x46
        STR      r0,[r4,#0x18]
        MOV      r7,#0x5012
        MOV      r1,r7
        MOV      r0,r5
        BL       I2C_MasterClearStatusFlags
        NOP      
        MOVS     r1,#0x60
        MOV      r0,r5
        BL       I2C_EnableInterrupts
        MOVS     r0,#0
        B        |L41.36|
        ENDP

|L41.92|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c",0
|L41.132|
        DCB      "NULL != handle",0
        DCB      0

        AREA ||i.I2C_SlaveWriteBlocking||, CODE, READONLY, ALIGN=1

I2C_SlaveWriteBlocking PROC
        PUSH     {r3-r7,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOVS     r7,#0
        MOVS     r0,#0
        STR      r0,[sp,#0]
        LDRB     r0,[sp,#0]
        ADDS     r0,r0,#1
        UXTB     r0,r0
        STR      r0,[sp,#0]
        NOP      
|L42.26|
        LDRB     r0,[r4,#6]
        AND      r0,r0,#0x10
        CMP      r0,#0
        BEQ      |L42.26|
        LDRB     r0,[r4,#6]
        ORR      r0,r0,#0x10
        STRB     r0,[r4,#6]
        MOVS     r0,#2
        STRB     r0,[r4,#3]
        NOP      
|L42.50|
        LDRB     r0,[r4,#3]
        AND      r0,r0,#0x40
        CMP      r0,#0
        BEQ      |L42.50|
        LDRB     r0,[r4,#4]
        STR      r0,[sp,#0]
        MOVS     r3,#4
        MOV      r2,r6
        MOV      r1,r5
        MOV      r0,r4
        BL       I2C_MasterWriteBlocking
        MOV      r7,r0
        LDRB     r0,[r4,#2]
        BIC      r0,r0,#0x18
        STRB     r0,[r4,#2]
        LDRB     r0,[r4,#4]
        STR      r0,[sp,#0]
        MOV      r0,r7
        POP      {r3-r7,pc}
        ENDP


        AREA ||i.I2C_TransferCommonIRQHandler||, CODE, READONLY, ALIGN=2

I2C_TransferCommonIRQHandler PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        LDRB     r6,[r4,#3]
        LDRB     r7,[r4,#2]
        AND      r0,r7,#0x20
        CBNZ     r0,|L43.24|
        AND      r0,r6,#0x10
        CBZ      r0,|L43.36|
|L43.24|
        MOV      r1,r5
        MOV      r0,r4
        LDR      r2,|L43.68|
        LDR      r2,[r2,#0]  ; s_i2cMasterIsr
        BLX      r2
        B        |L43.46|
|L43.36|
        MOV      r1,r5
        MOV      r0,r4
        LDR      r2,|L43.72|
        LDR      r2,[r2,#0]  ; s_i2cSlaveIsr
        BLX      r2
|L43.46|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L43.68|
        DCD      s_i2cMasterIsr
|L43.72|
        DCD      s_i2cSlaveIsr

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

s_i2cHandle
        %        16

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

s_i2cDividerTable
        DCW      0x0014,0x0016
        DCW      0x0018,0x001a
        DCW      0x001c,0x001e
        DCW      0x0022,0x0028
        DCW      0x001c,0x0020
        DCW      0x0024,0x0028
        DCW      0x002c,0x0030
        DCW      0x0038,0x0044
        DCW      0x0030,0x0038
        DCW      0x0040,0x0048
        DCW      0x0050,0x0058
        DCW      0x0068,0x0080
        DCW      0x0050,0x0060
        DCW      0x0070,0x0080
        DCW      0x0090,0x00a0
        DCW      0x00c0,0x00f0
        DCW      0x00a0,0x00c0
        DCW      0x00e0,0x0100
        DCW      0x0120,0x0140
        DCW      0x0180,0x01e0
        DCW      0x0140,0x0180
        DCW      0x01c0,0x0200
        DCW      0x0240,0x0280
        DCW      0x0300,0x03c0
        DCW      0x0280,0x0300
        DCW      0x0380,0x0400
        DCW      0x0480,0x0500
        DCW      0x0600,0x0780
        DCW      0x0500,0x0600
        DCW      0x0700,0x0800
        DCW      0x0900,0x0a00
        DCW      0x0c00,0x0f00
s_i2cIrqs
        DCB      0x18,0x19,0x4a,0x5b
s_i2cClocks
        DCD      0x10340006
        DCD      0x10340007
        DCD      0x10280006
        DCD      0x10280007
s_i2cBases
        DCD      0x40066000
        DCD      0x40067000
        DCD      0x400e6000
        DCD      0x400e7000

        AREA ||.data||, DATA, ALIGN=2

s_i2cMasterIsr
        DCD      0x00000000
s_i2cSlaveIsr
        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_i2c.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_i2c_c_d4dc8a94____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_fsl_i2c_c_d4dc8a94____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_i2c_c_d4dc8a94____REVSH|
#line 483
|__asm___9_fsl_i2c_c_d4dc8a94____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_i2c_c_d4dc8a94____RRX|
#line 670
|__asm___9_fsl_i2c_c_d4dc8a94____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT I2C0_DriverIRQHandler [CODE]
        EXPORT I2C1_DriverIRQHandler [CODE]
        EXPORT I2C2_DriverIRQHandler [CODE]
        EXPORT I2C3_DriverIRQHandler [CODE]
        EXPORT I2C_DisableInterrupts [CODE]
        EXPORT I2C_EnableInterrupts [CODE]
        EXPORT I2C_GetInstance [CODE]
        EXPORT I2C_MasterDeinit [CODE]
        EXPORT I2C_MasterGetDefaultConfig [CODE]
        EXPORT I2C_MasterGetStatusFlags [CODE]
        EXPORT I2C_MasterInit [CODE]
        EXPORT I2C_MasterReadBlocking [CODE]
        EXPORT I2C_MasterRepeatedStart [CODE]
        EXPORT I2C_MasterSetBaudRate [CODE]
        EXPORT I2C_MasterStart [CODE]
        EXPORT I2C_MasterStop [CODE]
        EXPORT I2C_MasterTransferAbort [CODE]
        EXPORT I2C_MasterTransferBlocking [CODE]
        EXPORT I2C_MasterTransferCreateHandle [CODE]
        EXPORT I2C_MasterTransferGetCount [CODE]
        EXPORT I2C_MasterTransferHandleIRQ [CODE]
        EXPORT I2C_MasterTransferNonBlocking [CODE]
        EXPORT I2C_MasterWriteBlocking [CODE]
        EXPORT I2C_SlaveDeinit [CODE]
        EXPORT I2C_SlaveGetDefaultConfig [CODE]
        EXPORT I2C_SlaveInit [CODE]
        EXPORT I2C_SlaveReadBlocking [CODE]
        EXPORT I2C_SlaveTransferAbort [CODE]
        EXPORT I2C_SlaveTransferCreateHandle [CODE]
        EXPORT I2C_SlaveTransferGetCount [CODE]
        EXPORT I2C_SlaveTransferHandleIRQ [CODE]
        EXPORT I2C_SlaveTransferNonBlocking [CODE]
        EXPORT I2C_SlaveWriteBlocking [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_assert [CODE]
        IMPORT __aeabi_memclr4 [CODE]

        KEEP CLOCK_DisableClock
        KEEP CLOCK_EnableClock
        KEEP EnableIRQ
        KEEP I2C_CheckAndClearError
        KEEP I2C_Enable
        KEEP I2C_InitTransferStateMachine
        KEEP I2C_MasterClearStatusFlags
        KEEP I2C_MasterTransferRunStateMachine
        KEEP I2C_SetHoldTime
        KEEP I2C_TransferCommonIRQHandler
        KEEP s_i2cHandle
        KEEP s_i2cDividerTable
        KEEP s_i2cIrqs
        KEEP s_i2cClocks
        KEEP s_i2cBases
        KEEP s_i2cMasterIsr
        KEEP s_i2cSlaveIsr

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
