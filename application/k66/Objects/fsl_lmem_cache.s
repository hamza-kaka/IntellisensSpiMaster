; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_lmem_cache.o --depend=.\objects\fsl_lmem_cache.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_lmem_cache.crf ..\..\devices\MK66F18\drivers\fsl_lmem_cache.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.LMEM_CodeCacheClearAll||, CODE, READONLY, ALIGN=1

LMEM_CodeCacheClearAll PROC
        LDR      r1,[r0,#0]
        ORR      r1,r1,#0x8f000000
        STR      r1,[r0,#0]
        NOP      
|L1.10|
        LDR      r1,[r0,#0]
        AND      r1,r1,#0x80000000
        CMP      r1,#0
        BNE      |L1.10|
        LDR      r1,[r0,#0]
        BIC      r1,r1,#0xf000000
        STR      r1,[r0,#0]
        BX       lr
        ENDP


        AREA ||i.LMEM_CodeCacheClearLine||, CODE, READONLY, ALIGN=1

LMEM_CodeCacheClearLine PROC
        MOVS     r2,#0
        LDR      r3,[r0,#4]
        ORR      r2,r3,#0x7000000
        STR      r2,[r0,#4]
        BIC      r3,r1,#3
        ADDS     r3,r3,#1
        STR      r3,[r0,#8]
        NOP      
|L2.20|
        LDR      r3,[r0,#8]
        AND      r3,r3,#1
        CMP      r3,#0
        BNE      |L2.20|
        BX       lr
        ENDP


        AREA ||i.LMEM_CodeCacheClearMultiLines||, CODE, READONLY, ALIGN=1

LMEM_CodeCacheClearMultiLines PROC
        PUSH     {r4-r7,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        ADDS     r7,r4,r5
        BIC      r4,r4,#0xf
        CMP      r5,#0x1000
        BCC      |L3.28|
        MOV      r0,r6
        BL       LMEM_CodeCacheClearAll
        B        |L3.44|
|L3.28|
        B        |L3.40|
|L3.30|
        MOV      r1,r4
        MOV      r0,r6
        BL       LMEM_CodeCacheClearLine
        ADDS     r4,r4,#0x10
|L3.40|
        CMP      r4,r7
        BCC      |L3.30|
|L3.44|
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.LMEM_CodeCacheDemoteRegion||, CODE, READONLY, ALIGN=1

LMEM_CodeCacheDemoteRegion PROC
        PUSH     {r4-r7,lr}
        MOV      r3,r0
        MOV      r5,r1
        LDR      r6,[r3,#0x20]
        LSLS     r4,r5,#1
        MOVS     r0,#3
        LSL      r7,r0,r4
        AND      r0,r6,r7
        LSRS     r0,r0,r4
        CMP      r0,r2
        BHI      |L4.30|
        MOVS     r0,#1
|L4.28|
        POP      {r4-r7,pc}
|L4.30|
        MOV      r0,r3
        BL       LMEM_CodeCacheClearAll
        BIC      r0,r6,r7
        LSL      r1,r2,r4
        ORRS     r0,r0,r1
        STR      r0,[r3,#0x20]
        MOVS     r0,#0
        B        |L4.28|
        ENDP


        AREA ||i.LMEM_CodeCacheInvalidateAll||, CODE, READONLY, ALIGN=1

LMEM_CodeCacheInvalidateAll PROC
        LDR      r1,[r0,#0]
        ORR      r1,r1,#0x85000000
        STR      r1,[r0,#0]
        NOP      
|L5.10|
        LDR      r1,[r0,#0]
        AND      r1,r1,#0x80000000
        CMP      r1,#0
        BNE      |L5.10|
        LDR      r1,[r0,#0]
        BIC      r1,r1,#0x5000000
        STR      r1,[r0,#0]
        BX       lr
        ENDP


        AREA ||i.LMEM_CodeCacheInvalidateLine||, CODE, READONLY, ALIGN=1

LMEM_CodeCacheInvalidateLine PROC
        MOVS     r2,#0
        LDR      r3,[r0,#4]
        BIC      r3,r3,#0x3000000
        ORR      r2,r3,#0x5000000
        STR      r2,[r0,#4]
        BIC      r3,r1,#3
        ADDS     r3,r3,#1
        STR      r3,[r0,#8]
        NOP      
|L6.24|
        LDR      r3,[r0,#8]
        AND      r3,r3,#1
        CMP      r3,#0
        BNE      |L6.24|
        BX       lr
        ENDP


        AREA ||i.LMEM_CodeCacheInvalidateMultiLines||, CODE, READONLY, ALIGN=1

LMEM_CodeCacheInvalidateMultiLines PROC
        PUSH     {r4-r7,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        ADDS     r7,r4,r5
        BIC      r4,r4,#0xf
        CMP      r5,#0x1000
        BCC      |L7.28|
        MOV      r0,r6
        BL       LMEM_CodeCacheInvalidateAll
        B        |L7.44|
|L7.28|
        B        |L7.40|
|L7.30|
        MOV      r1,r4
        MOV      r0,r6
        BL       LMEM_CodeCacheInvalidateLine
        ADDS     r4,r4,#0x10
|L7.40|
        CMP      r4,r7
        BCC      |L7.30|
|L7.44|
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.LMEM_CodeCachePushAll||, CODE, READONLY, ALIGN=1

LMEM_CodeCachePushAll PROC
        LDR      r1,[r0,#0]
        ORR      r1,r1,#0x8a000000
        STR      r1,[r0,#0]
        NOP      
|L8.10|
        LDR      r1,[r0,#0]
        AND      r1,r1,#0x80000000
        CMP      r1,#0
        BNE      |L8.10|
        LDR      r1,[r0,#0]
        BIC      r1,r1,#0xa000000
        STR      r1,[r0,#0]
        BX       lr
        ENDP


        AREA ||i.LMEM_CodeCachePushLine||, CODE, READONLY, ALIGN=1

LMEM_CodeCachePushLine PROC
        MOVS     r2,#0
        LDR      r3,[r0,#4]
        BIC      r3,r3,#0x3000000
        ORR      r2,r3,#0x6000000
        STR      r2,[r0,#4]
        BIC      r3,r1,#3
        ADDS     r3,r3,#1
        STR      r3,[r0,#8]
        NOP      
|L9.24|
        LDR      r3,[r0,#8]
        AND      r3,r3,#1
        CMP      r3,#0
        BNE      |L9.24|
        BX       lr
        ENDP


        AREA ||i.LMEM_CodeCachePushMultiLines||, CODE, READONLY, ALIGN=1

LMEM_CodeCachePushMultiLines PROC
        PUSH     {r4-r7,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r5,r2
        ADDS     r7,r4,r5
        BIC      r4,r4,#0xf
        CMP      r5,#0x1000
        BCC      |L10.28|
        MOV      r0,r6
        BL       LMEM_CodeCachePushAll
        B        |L10.44|
|L10.28|
        B        |L10.40|
|L10.30|
        MOV      r1,r4
        MOV      r0,r6
        BL       LMEM_CodeCachePushLine
        ADDS     r4,r4,#0x10
|L10.40|
        CMP      r4,r7
        BCC      |L10.30|
|L10.44|
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.LMEM_EnableCodeCache||, CODE, READONLY, ALIGN=1

LMEM_EnableCodeCache PROC
        PUSH     {lr}
        MOV      r2,r0
        MOV      r3,r1
        CBZ      r3,|L11.24|
        MOV      r0,r2
        BL       LMEM_CodeCacheInvalidateAll
        LDR      r0,[r2,#0]
        ORR      r0,r0,#1
        STR      r0,[r2,#0]
        B        |L11.38|
|L11.24|
        MOV      r0,r2
        BL       LMEM_CodeCachePushAll
        LDR      r0,[r2,#0]
        BIC      r0,r0,#1
        STR      r0,[r2,#0]
|L11.38|
        POP      {pc}
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_lmem_cache.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_fsl_lmem_cache_c_8f82efb4____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___16_fsl_lmem_cache_c_8f82efb4____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_fsl_lmem_cache_c_8f82efb4____REVSH|
#line 483
|__asm___16_fsl_lmem_cache_c_8f82efb4____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_fsl_lmem_cache_c_8f82efb4____RRX|
#line 670
|__asm___16_fsl_lmem_cache_c_8f82efb4____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT LMEM_CodeCacheClearAll [CODE]
        EXPORT LMEM_CodeCacheClearLine [CODE]
        EXPORT LMEM_CodeCacheClearMultiLines [CODE]
        EXPORT LMEM_CodeCacheDemoteRegion [CODE]
        EXPORT LMEM_CodeCacheInvalidateAll [CODE]
        EXPORT LMEM_CodeCacheInvalidateLine [CODE]
        EXPORT LMEM_CodeCacheInvalidateMultiLines [CODE]
        EXPORT LMEM_CodeCachePushAll [CODE]
        EXPORT LMEM_CodeCachePushLine [CODE]
        EXPORT LMEM_CodeCachePushMultiLines [CODE]
        EXPORT LMEM_EnableCodeCache [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
