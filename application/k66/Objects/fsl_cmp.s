; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_cmp.o --depend=.\objects\fsl_cmp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_cmp.crf ..\..\devices\MK66F18\drivers\fsl_cmp.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.CMP_ClearStatusFlags||, CODE, READONLY, ALIGN=1

CMP_ClearStatusFlags PROC
        LDRB     r3,[r0,#3]
        BIC      r2,r3,#6
        AND      r3,r1,#4
        CBZ      r3,|L1.16|
        ORR      r2,r2,#4
|L1.16|
        AND      r3,r1,#2
        CBZ      r3,|L1.26|
        ORR      r2,r2,#2
|L1.26|
        STRB     r2,[r0,#3]
        BX       lr
        ENDP


        AREA ||i.CMP_Deinit||, CODE, READONLY, ALIGN=2

CMP_Deinit PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r1,#0
        MOV      r0,r5
        BL       CMP_Enable
        MOV      r0,r5
        BL       CMP_GetInstance
        LDR      r1,|L2.44|
        LDR      r4,[r1,r0,LSL #2]
        LDR      r1,|L2.48|
        ADD      r0,r1,r4,LSR #16
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,r4
        BICS     r1,r1,r2
        STR      r1,[r0,#0]
        NOP      
        POP      {r4-r6,pc}
        ENDP

|L2.44|
        DCD      s_cmpClocks
|L2.48|
        DCD      0x40047000

        AREA ||i.CMP_DisableInterrupts||, CODE, READONLY, ALIGN=1

CMP_DisableInterrupts PROC
        LDRB     r3,[r0,#3]
        BIC      r2,r3,#6
        AND      r3,r1,#0x10
        CBZ      r3,|L3.16|
        BIC      r2,r2,#0x10
|L3.16|
        AND      r3,r1,#8
        CBZ      r3,|L3.26|
        BIC      r2,r2,#8
|L3.26|
        STRB     r2,[r0,#3]
        BX       lr
        ENDP


        AREA ||i.CMP_Enable||, CODE, READONLY, ALIGN=1

CMP_Enable PROC
        CBZ      r1,|L4.12|
        LDRB     r2,[r0,#1]
        ORR      r2,r2,#1
        STRB     r2,[r0,#1]
        B        |L4.20|
|L4.12|
        LDRB     r2,[r0,#1]
        BIC      r2,r2,#1
        STRB     r2,[r0,#1]
|L4.20|
        BX       lr
        ENDP


        AREA ||i.CMP_EnableDMA||, CODE, READONLY, ALIGN=1

CMP_EnableDMA PROC
        MOV      r2,r1
        LDRB     r3,[r0,#3]
        BIC      r1,r3,#6
        CBZ      r2,|L5.16|
        ORR      r1,r1,#0x40
        B        |L5.20|
|L5.16|
        BIC      r1,r1,#0x40
|L5.20|
        STRB     r1,[r0,#3]
        BX       lr
        ENDP


        AREA ||i.CMP_EnableInterrupts||, CODE, READONLY, ALIGN=1

CMP_EnableInterrupts PROC
        LDRB     r3,[r0,#3]
        BIC      r2,r3,#6
        AND      r3,r1,#0x10
        CBZ      r3,|L6.16|
        ORR      r2,r2,#0x10
|L6.16|
        AND      r3,r1,#8
        CBZ      r3,|L6.26|
        ORR      r2,r2,#8
|L6.26|
        STRB     r2,[r0,#3]
        BX       lr
        ENDP


        AREA ||i.CMP_GetDefaultConfig||, CODE, READONLY, ALIGN=2

CMP_GetDefaultConfig PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L7.8|
        B        |L7.18|
|L7.8|
        MOVS     r2,#0xa2
        ADR      r1,|L7.48|
        ADR      r0,|L7.88|
        BL       __aeabi_assert
|L7.18|
        MOVS     r0,#0
        STR      r0,[r4,#0]
        STRH     r0,[r4,#4]
        STRB     r0,[r4,#6]
        MOVS     r0,#1
        STRB     r0,[r4,#0]
        MOVS     r0,#0
        STRB     r0,[r4,#1]
        STRB     r0,[r4,#2]
        STRB     r0,[r4,#3]
        STRB     r0,[r4,#4]
        STRB     r0,[r4,#5]
        STRB     r0,[r4,#6]
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L7.48|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_cmp.c",0
|L7.88|
        DCB      "NULL != config",0
        DCB      0

        AREA ||i.CMP_GetInstance||, CODE, READONLY, ALIGN=2

CMP_GetInstance PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r4,#0
        B        |L8.22|
|L8.8|
        LDR      r0,|L8.48|
        LDR      r0,[r0,r4,LSL #2]
        CMP      r0,r5
        BNE      |L8.20|
        B        |L8.26|
|L8.20|
        ADDS     r4,r4,#1
|L8.22|
        CMP      r4,#4
        BCC      |L8.8|
|L8.26|
        NOP      
        CMP      r4,#4
        BCS      |L8.34|
        B        |L8.44|
|L8.34|
        MOVS     r2,#0x34
        ADR      r1,|L8.52|
        ADR      r0,|L8.92|
        BL       __aeabi_assert
|L8.44|
        MOV      r0,r4
        POP      {r4-r6,pc}
        ENDP

|L8.48|
        DCD      s_cmpBases
|L8.52|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_cmp.c",0
|L8.92|
        DCB      "instance < ARRAY_SIZE(s_cmpBases)",0
        DCB      0
        DCB      0

        AREA ||i.CMP_GetStatusFlags||, CODE, READONLY, ALIGN=1

CMP_GetStatusFlags PROC
        MOV      r1,r0
        MOVS     r0,#0
        LDRB     r2,[r1,#3]
        AND      r2,r2,#4
        CBZ      r2,|L9.16|
        ORR      r0,r0,#4
|L9.16|
        LDRB     r2,[r1,#3]
        AND      r2,r2,#2
        CBZ      r2,|L9.28|
        ORR      r0,r0,#2
|L9.28|
        LDRB     r2,[r1,#3]
        AND      r2,r2,#1
        CBZ      r2,|L9.40|
        ORR      r0,r0,#1
|L9.40|
        BX       lr
        ENDP


        AREA ||i.CMP_Init||, CODE, READONLY, ALIGN=2

CMP_Init PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r5,r1
        CBZ      r5,|L10.12|
        B        |L10.22|
|L10.12|
        MOVS     r2,#0x48
        ADR      r1,|L10.152|
        ADR      r0,|L10.192|
        BL       __aeabi_assert
|L10.22|
        MOV      r0,r6
        BL       CMP_GetInstance
        LDR      r1,|L10.208|
        LDR      r7,[r1,r0,LSL #2]
        LDR      r1,|L10.212|
        ADD      r0,r1,r7,LSR #16
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,r7
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        NOP      
        MOVS     r1,#0
        MOV      r0,r6
        BL       CMP_Enable
        LDRB     r0,[r6,#1]
        BIC      r4,r0,#0x1e
        LDRB     r0,[r5,#2]
        CMP      r0,#1
        BNE      |L10.76|
        ORR      r4,r4,#0x10
|L10.76|
        LDRB     r0,[r5,#3]
        CMP      r0,#1
        BNE      |L10.86|
        ORR      r4,r4,#8
|L10.86|
        LDRB     r0,[r5,#4]
        CMP      r0,#1
        BNE      |L10.96|
        ORR      r4,r4,#4
|L10.96|
        LDRB     r0,[r5,#5]
        CMP      r0,#1
        BNE      |L10.106|
        ORR      r4,r4,#2
|L10.106|
        LDRB     r0,[r5,#6]
        CMP      r0,#1
        BNE      |L10.118|
        ORR      r4,r4,#0x20
        B        |L10.122|
|L10.118|
        BIC      r4,r4,#0x20
|L10.122|
        STRB     r4,[r6,#1]
        LDRB     r0,[r6,#0]
        BIC      r4,r0,#3
        LDRB     r0,[r5,#1]
        AND      r0,r0,#3
        ORRS     r4,r4,r0
        STRB     r4,[r6,#0]
        LDRB     r1,[r5,#0]
        MOV      r0,r6
        BL       CMP_Enable
        POP      {r4-r8,pc}
        ENDP

|L10.152|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_cmp.c",0
|L10.192|
        DCB      "NULL != config",0
        DCB      0
|L10.208|
        DCD      s_cmpClocks
|L10.212|
        DCD      0x40047000

        AREA ||i.CMP_SetDACConfig||, CODE, READONLY, ALIGN=1

CMP_SetDACConfig PROC
        MOV      r2,r0
        MOVS     r0,#0
        CBNZ     r1,|L11.12|
        MOVS     r3,#0
        STRB     r3,[r2,#4]
|L11.10|
        BX       lr
|L11.12|
        ORR      r0,r0,#0x80
        LDRB     r3,[r1,#0]
        CMP      r3,#1
        BNE      |L11.26|
        ORR      r0,r0,#0x40
|L11.26|
        LDRB     r3,[r1,#1]
        AND      r3,r3,#0x3f
        ORRS     r0,r0,r3
        STRB     r0,[r2,#4]
        NOP      
        B        |L11.10|
        ENDP


        AREA ||i.CMP_SetFilterConfig||, CODE, READONLY, ALIGN=2

CMP_SetFilterConfig PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBZ      r5,|L12.10|
        B        |L12.20|
|L12.10|
        MOVS     r2,#0xea
        ADR      r1,|L12.68|
        ADR      r0,|L12.108|
        BL       __aeabi_assert
|L12.20|
        LDRB     r0,[r5,#0]
        CBZ      r0,|L12.34|
        LDRB     r0,[r4,#1]
        ORR      r0,r0,#0x80
        STRB     r0,[r4,#1]
        B        |L12.42|
|L12.34|
        LDRB     r0,[r4,#1]
        BIC      r0,r0,#0x80
        STRB     r0,[r4,#1]
|L12.42|
        LDRB     r0,[r4,#0]
        BIC      r6,r0,#0x70
        LDRB     r0,[r5,#1]
        MOVS     r1,#0x70
        AND      r0,r1,r0,LSL #4
        ORRS     r6,r6,r0
        STRB     r6,[r4,#0]
        LDRB     r0,[r5,#2]
        STRB     r0,[r4,#2]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L12.68|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_cmp.c",0
|L12.108|
        DCB      "NULL != config",0
        DCB      0

        AREA ||i.CMP_SetInputChannels||, CODE, READONLY, ALIGN=1

CMP_SetInputChannels PROC
        PUSH     {r4,r5,lr}
        MOV      r3,r1
        LDRB     r1,[r0,#5]
        BIC      r1,r1,#0x3f
        MOVS     r4,#0x38
        AND      r4,r4,r3,LSL #3
        AND      r5,r2,#7
        ORRS     r4,r4,r5
        ORRS     r1,r1,r4
        STRB     r1,[r0,#5]
        POP      {r4,r5,pc}
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

s_cmpBases
        DCD      0x40073000
        DCD      0x40073008
        DCD      0x40073010
        DCD      0x40073018
s_cmpClocks
        DCD      0x10340013
        DCD      0x10340013
        DCD      0x10340013
        DCD      0x10340013

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_cmp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_cmp_c_CMP_Init____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_fsl_cmp_c_CMP_Init____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_cmp_c_CMP_Init____REVSH|
#line 483
|__asm___9_fsl_cmp_c_CMP_Init____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_cmp_c_CMP_Init____RRX|
#line 670
|__asm___9_fsl_cmp_c_CMP_Init____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT CMP_ClearStatusFlags [CODE]
        EXPORT CMP_Deinit [CODE]
        EXPORT CMP_DisableInterrupts [CODE]
        EXPORT CMP_EnableDMA [CODE]
        EXPORT CMP_EnableInterrupts [CODE]
        EXPORT CMP_GetDefaultConfig [CODE]
        EXPORT CMP_GetStatusFlags [CODE]
        EXPORT CMP_Init [CODE]
        EXPORT CMP_SetDACConfig [CODE]
        EXPORT CMP_SetFilterConfig [CODE]
        EXPORT CMP_SetInputChannels [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_assert [CODE]

        KEEP CMP_Enable
        KEEP CMP_GetInstance
        KEEP s_cmpBases
        KEEP s_cmpClocks

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
