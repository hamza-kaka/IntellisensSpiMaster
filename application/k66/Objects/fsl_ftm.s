; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_ftm.o --depend=.\objects\fsl_ftm.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_ftm.crf ..\..\devices\MK66F18\drivers\fsl_ftm.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.FTM_ClearStatusFlags||, CODE, READONLY, ALIGN=1

FTM_ClearStatusFlags PROC
        AND      r2,r1,#0x200
        CBZ      r2,|L1.14|
        LDR      r2,[r0,#0]
        BIC      r2,r2,#0x80
        STR      r2,[r0,#0]
|L1.14|
        AND      r2,r1,#0x100
        CBZ      r2,|L1.28|
        LDR      r2,[r0,#0x74]
        BIC      r2,r2,#0x80
        STR      r2,[r0,#0x74]
|L1.28|
        AND      r2,r1,#0x400
        CBZ      r2,|L1.42|
        LDR      r2,[r0,#0x6c]
        BIC      r2,r2,#0x80
        STR      r2,[r0,#0x6c]
|L1.42|
        LDR      r2,[r0,#0x50]
        UXTB     r3,r1
        BICS     r2,r2,r3
        STR      r2,[r0,#0x50]
        BX       lr
        ENDP


        AREA ||i.FTM_Deinit||, CODE, READONLY, ALIGN=2

FTM_Deinit PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        LDR      r0,[r4,#0]
        BIC      r0,r0,#0x18
        STR      r0,[r4,#0]
        MOV      r0,r4
        BL       FTM_GetInstance
        LDR      r1,|L2.44|
        LDR      r5,[r1,r0,LSL #2]
        LDR      r1,|L2.48|
        ADD      r0,r1,r5,LSR #16
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,r5
        BICS     r1,r1,r2
        STR      r1,[r0,#0]
        NOP      
        POP      {r4-r6,pc}
        ENDP

|L2.44|
        DCD      s_ftmClocks
|L2.48|
        DCD      0x40047000

        AREA ||i.FTM_DisableInterrupts||, CODE, READONLY, ALIGN=1

FTM_DisableInterrupts PROC
        PUSH     {r4,r5,lr}
        UXTB     r2,r1
        MOVS     r3,#0
        AND      r4,r1,#0x200
        CBZ      r4,|L3.20|
        LDR      r4,[r0,#0]
        BIC      r4,r4,#0x40
        STR      r4,[r0,#0]
|L3.20|
        AND      r4,r1,#0x100
        CBZ      r4,|L3.34|
        LDR      r4,[r0,#0x54]
        BIC      r4,r4,#0x80
        STR      r4,[r0,#0x54]
|L3.34|
        B        |L3.68|
|L3.36|
        AND      r4,r2,#1
        CBZ      r4,|L3.62|
        ADD      r4,r0,#0xc
        LDR      r4,[r4,r3,LSL #3]
        BIC      r5,r4,#0x40
        ADD      r4,r0,#0xc
        STR      r5,[r4,r3,LSL #3]
|L3.62|
        ADDS     r4,r3,#1
        UXTB     r3,r4
        LSRS     r2,r2,#1
|L3.68|
        CMP      r2,#0
        BNE      |L3.36|
        POP      {r4,r5,pc}
        ENDP


        AREA ||i.FTM_EnableInterrupts||, CODE, READONLY, ALIGN=1

FTM_EnableInterrupts PROC
        PUSH     {r4,r5,lr}
        UXTB     r2,r1
        MOVS     r3,#0
        AND      r4,r1,#0x200
        CBZ      r4,|L4.20|
        LDR      r4,[r0,#0]
        ORR      r4,r4,#0x40
        STR      r4,[r0,#0]
|L4.20|
        AND      r4,r1,#0x100
        CBZ      r4,|L4.34|
        LDR      r4,[r0,#0x54]
        ORR      r4,r4,#0x80
        STR      r4,[r0,#0x54]
|L4.34|
        B        |L4.68|
|L4.36|
        AND      r4,r2,#1
        CBZ      r4,|L4.62|
        ADD      r4,r0,#0xc
        LDR      r4,[r4,r3,LSL #3]
        ORR      r5,r4,#0x40
        ADD      r4,r0,#0xc
        STR      r5,[r4,r3,LSL #3]
|L4.62|
        ADDS     r4,r3,#1
        UXTB     r3,r4
        LSRS     r2,r2,#1
|L4.68|
        CMP      r2,#0
        BNE      |L4.36|
        POP      {r4,r5,pc}
        ENDP


        AREA ||i.FTM_GetDefaultConfig||, CODE, READONLY, ALIGN=2

FTM_GetDefaultConfig PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L5.8|
        B        |L5.20|
|L5.8|
        MOV      r2,#0x144
        ADR      r1,|L5.64|
        ADR      r0,|L5.104|
        BL       __aeabi_assert
|L5.20|
        MOVS     r1,#0x1c
        MOV      r0,r4
        BL       __aeabi_memclr4
        MOVS     r0,#0
        STRB     r0,[r4,#0]
        STRB     r0,[r4,#1]
        MOVS     r0,#0x80
        STR      r0,[r4,#4]
        MOVS     r0,#0
        STR      r0,[r4,#8]
        STRB     r0,[r4,#0xc]
        STRB     r0,[r4,#0xd]
        MOVS     r0,#1
        STRB     r0,[r4,#0xe]
        MOVS     r0,#0
        STR      r0,[r4,#0x10]
        STR      r0,[r4,#0x14]
        STRB     r0,[r4,#0x18]
        STRB     r0,[r4,#0x19]
        STRB     r0,[r4,#0x1a]
        POP      {r4,pc}
        ENDP

|L5.64|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c",0
|L5.104|
        DCB      "config",0
        DCB      0

        AREA ||i.FTM_GetEnabledInterrupts||, CODE, READONLY, ALIGN=2

FTM_GetEnabledInterrupts PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOVS     r6,#0
        LDR      r0,|L6.128|
        CMP      r4,r0
        BNE      |L6.16|
        MOVS     r0,#8
        B        |L6.50|
|L6.16|
        LDR      r0,|L6.132|
        CMP      r4,r0
        BNE      |L6.26|
        MOVS     r0,#2
        B        |L6.50|
|L6.26|
        LDR      r0,|L6.136|
        CMP      r4,r0
        BNE      |L6.36|
        MOVS     r0,#2
        B        |L6.50|
|L6.36|
        LDR      r0,|L6.140|
        CMP      r4,r0
        BNE      |L6.46|
        MOVS     r0,#8
        B        |L6.50|
|L6.46|
        MOV      r0,#0xffffffff
|L6.50|
        MOV      r5,r0
        ADDS     r0,r5,#1
        CBZ      r0,|L6.58|
        B        |L6.70|
|L6.58|
        MOV      r2,#0x427
        ADR      r1,|L6.144|
        ADR      r0,|L6.184|
        BL       __aeabi_assert
|L6.70|
        LDR      r0,[r4,#0]
        AND      r0,r0,#0x40
        CBZ      r0,|L6.82|
        ORR      r6,r6,#0x200
|L6.82|
        LDR      r0,[r4,#0x54]
        AND      r0,r0,#0x80
        CBZ      r0,|L6.94|
        ORR      r6,r6,#0x100
|L6.94|
        B        |L6.120|
|L6.96|
        SUBS     r0,r5,#1
        SXTB     r5,r0
        ADD      r0,r4,#0xc
        LDR      r0,[r0,r5,LSL #3]
        AND      r0,r0,#0x40
        CBZ      r0,|L6.120|
        MOVS     r0,#1
        LSLS     r0,r0,r5
        ORRS     r6,r6,r0
|L6.120|
        CMP      r5,#0
        BGT      |L6.96|
        MOV      r0,r6
        POP      {r4-r6,pc}
        ENDP

|L6.128|
        DCD      0x40038000
|L6.132|
        DCD      0x40039000
|L6.136|
        DCD      0x4003a000
|L6.140|
        DCD      0x400b9000
|L6.144|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c",0
|L6.184|
        DCB      "chnlCount != -1",0

        AREA ||i.FTM_GetInstance||, CODE, READONLY, ALIGN=2

FTM_GetInstance PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOVS     r6,#4
        MOVS     r4,#0
        B        |L7.24|
|L7.10|
        LDR      r0,|L7.52|
        LDR      r0,[r0,r4,LSL #2]
        CMP      r0,r5
        BNE      |L7.22|
        B        |L7.28|
|L7.22|
        ADDS     r4,r4,#1
|L7.24|
        CMP      r4,r6
        BCC      |L7.10|
|L7.28|
        NOP      
        CMP      r4,r6
        BCS      |L7.36|
        B        |L7.46|
|L7.36|
        MOVS     r2,#0x50
        ADR      r1,|L7.56|
        ADR      r0,|L7.96|
        BL       __aeabi_assert
|L7.46|
        MOV      r0,r4
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L7.52|
        DCD      s_ftmBases
|L7.56|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c",0
|L7.96|
        DCB      "instance < ftmArrayCount",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.FTM_GetStatusFlags||, CODE, READONLY, ALIGN=1

FTM_GetStatusFlags PROC
        MOV      r1,r0
        MOVS     r0,#0
        LDR      r2,[r1,#0]
        AND      r2,r2,#0x80
        CBZ      r2,|L8.16|
        ORR      r0,r0,#0x200
|L8.16|
        LDR      r2,[r1,#0x74]
        AND      r2,r2,#0x80
        CBZ      r2,|L8.28|
        ORR      r0,r0,#0x100
|L8.28|
        LDR      r2,[r1,#0x6c]
        AND      r2,r2,#0x80
        CBZ      r2,|L8.40|
        ORR      r0,r0,#0x400
|L8.40|
        LDR      r2,[r1,#0x50]
        UXTB     r2,r2
        ORRS     r0,r0,r2
        BX       lr
        ENDP


        AREA ||i.FTM_Init||, CODE, READONLY, ALIGN=2

FTM_Init PROC
        PUSH     {r4-r8,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L9.12|
        B        |L9.22|
|L9.12|
        MOVS     r2,#0xdb
        ADR      r1,|L9.184|
        ADR      r0,|L9.224|
        BL       __aeabi_assert
|L9.22|
        LDRB     r0,[r4,#4]
        AND      r0,r0,#0xf0
        CBNZ     r0,|L9.36|
        MOVS     r0,#1
|L9.32|
        POP      {r4-r8,pc}
|L9.36|
        MOV      r0,r5
        BL       FTM_GetInstance
        LDR      r1,|L9.232|
        LDR      r7,[r1,r0,LSL #2]
        LDR      r1,|L9.236|
        ADD      r0,r1,r7,LSR #16
        LDR      r1,[r0,#0]
        MOVS     r2,#1
        LSLS     r2,r2,r7
        ORRS     r1,r1,r2
        STR      r1,[r0,#0]
        NOP      
        LDRB     r0,[r4,#0xc]
        MOVS     r1,#0x60
        AND      r0,r1,r0,LSL #5
        ADDS     r0,r0,#1
        ORR      r0,r0,#4
        STR      r0,[r5,#0x54]
        MOV      r0,r5
        LDR      r1,[r4,#4]
        BL       FTM_SetPwmSync
        MOV      r0,r5
        LDR      r1,[r4,#8]
        BL       FTM_SetReloadPoints
        LDRB     r0,[r4,#0]
        AND      r0,r0,#7
        STR      r0,[r5,#0]
        LDRB     r0,[r4,#1]
        MOVS     r1,#0xc0
        AND      r0,r1,r0,LSL #6
        LDRB     r1,[r4,#0x1a]
        MOV      r2,#0x200
        AND      r1,r2,r1,LSL #9
        ORRS     r0,r0,r1
        STR      r0,[r5,#0x84]
        LDRB     r0,[r4,#0x18]
        STR      r0,[r5,#0x5c]
        LDRB     r0,[r4,#0x19]
        STR      r0,[r5,#0x70]
        LDR      r0,[r4,#0x14]
        STR      r0,[r5,#0x6c]
        LDRB     r0,[r4,#0xe]
        MOVS     r1,#0xc0
        AND      r0,r1,r0,LSL #6
        LDRB     r1,[r4,#0x10]
        AND      r1,r1,#0x3f
        ORRS     r0,r0,r1
        STR      r0,[r5,#0x68]
        LDR      r6,[r5,#0x7c]
        BIC      r6,r6,#0xf00
        LDRB     r0,[r4,#0xd]
        MOV      r1,#0xf00
        AND      r0,r1,r0,LSL #8
        ORRS     r6,r6,r0
        STR      r6,[r5,#0x7c]
        MOVS     r0,#0
        B        |L9.32|
        ENDP

|L9.184|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c",0
|L9.224|
        DCB      "config",0
        DCB      0
|L9.232|
        DCD      s_ftmClocks
|L9.236|
        DCD      0x40047000

        AREA ||i.FTM_SetPwmSync||, CODE, READONLY, ALIGN=2

FTM_SetPwmSync PROC
        PUSH     {r4-r6,lr}
        MOVS     r4,#0
        MOVS     r2,#0
        MOVS     r3,#0
        LDR      r3,[r0,#0x58]
        ORR      r3,r3,#8
        LDR      r2,[r0,#0x64]
        NOP      
        B        |L10.36|
|L10.20|
        LSLS     r5,r4,#3
        ADDS     r5,r5,#5
        MOVS     r6,#1
        LSL      r5,r6,r5
        ORRS     r2,r2,r5
        ADDS     r5,r4,#1
        UXTB     r4,r5
|L10.36|
        LDR      r6,|L10.160|
        CMP      r0,r6
        BNE      |L10.46|
        MOVS     r6,#8
        B        |L10.80|
|L10.46|
        LDR      r6,|L10.164|
        CMP      r0,r6
        BNE      |L10.56|
        MOVS     r6,#2
        B        |L10.80|
|L10.56|
        LDR      r6,|L10.168|
        CMP      r0,r6
        BNE      |L10.66|
        MOVS     r6,#2
        B        |L10.80|
|L10.66|
        LDR      r6,|L10.172|
        CMP      r0,r6
        BNE      |L10.76|
        MOVS     r6,#8
        B        |L10.80|
|L10.76|
        MOV      r6,#0xffffffff
|L10.80|
        ADD      r6,r6,r6,LSR #31
        CMP      r4,r6,ASR #1
        BLT      |L10.20|
        STR      r2,[r0,#0x64]
        LDR      r2,[r0,#0x8c]
        ORR      r2,r2,#0xb4
        AND      r5,r1,#0x80
        CBZ      r5,|L10.110|
        ORR      r2,r2,#0x1f00
|L10.110|
        AND      r5,r1,#0x70
        CBZ      r5,|L10.150|
        ORR      r2,r2,#0x1f0000
        AND      r5,r1,#0x10
        CBZ      r5,|L10.130|
        ORR      r3,r3,#0x10
|L10.130|
        AND      r5,r1,#0x20
        CBZ      r5,|L10.140|
        ORR      r3,r3,#0x20
|L10.140|
        AND      r5,r1,#0x40
        CBZ      r5,|L10.150|
        ORR      r3,r3,#0x40
|L10.150|
        STR      r3,[r0,#0x58]
        STR      r2,[r0,#0x8c]
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L10.160|
        DCD      0x40038000
|L10.164|
        DCD      0x40039000
|L10.168|
        DCD      0x4003a000
|L10.172|
        DCD      0x400b9000

        AREA ||i.FTM_SetReloadPoints||, CODE, READONLY, ALIGN=2

FTM_SetReloadPoints PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r7,r1
        MOV      r8,#0
        MOVS     r5,#0
        LDR      r0,|L11.196|
        CMP      r4,r0
        BNE      |L11.24|
        MOVS     r0,#8
        B        |L11.58|
|L11.24|
        LDR      r0,|L11.200|
        CMP      r4,r0
        BNE      |L11.34|
        MOVS     r0,#2
        B        |L11.58|
|L11.34|
        LDR      r0,|L11.204|
        CMP      r4,r0
        BNE      |L11.44|
        MOVS     r0,#2
        B        |L11.58|
|L11.44|
        LDR      r0,|L11.208|
        CMP      r4,r0
        BNE      |L11.54|
        MOVS     r0,#8
        B        |L11.58|
|L11.54|
        MOV      r0,#0xffffffff
|L11.58|
        MOV      r6,r0
        CMP      r6,#0xffffffff
        BEQ      |L11.68|
        B        |L11.78|
|L11.68|
        MOVS     r2,#0x95
        ADR      r1,|L11.212|
        ADR      r0,|L11.252|
        BL       __aeabi_assert
|L11.78|
        LDR      r0,[r4,#0x8c]
        ORR      r0,r0,#4
        STR      r0,[r4,#0x8c]
        LDR      r5,[r4,#0x64]
        MOV      r8,#0
        B        |L11.116|
|L11.98|
        LSL      r0,r8,#3
        ADDS     r0,r0,#5
        MOVS     r1,#1
        LSL      r0,r1,r0
        ORRS     r5,r5,r0
        ADD      r8,r8,#1
|L11.116|
        ADD      r1,r6,r6,LSR #31
        CMP      r8,r1,ASR #1
        BCC      |L11.98|
        STR      r5,[r4,#0x64]
        LDR      r5,[r4,#0x98]
        MOVS     r0,#1
        LSLS     r0,r0,r6
        SUBS     r0,r0,#1
        BICS     r5,r5,r0
        MOVS     r0,#1
        LSLS     r0,r0,r6
        SUBS     r0,r0,#1
        ANDS     r0,r0,r7
        ORRS     r5,r5,r0
        STR      r5,[r4,#0x98]
        LDR      r5,[r4,#0x58]
        AND      r0,r7,#0x100
        CBZ      r0,|L11.168|
        ORR      r5,r5,#2
        B        |L11.172|
|L11.168|
        BIC      r5,r5,#2
|L11.172|
        AND      r0,r7,#0x200
        CBZ      r0,|L11.184|
        ORR      r5,r5,#1
        B        |L11.188|
|L11.184|
        BIC      r5,r5,#1
|L11.188|
        STR      r5,[r4,#0x58]
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L11.196|
        DCD      0x40038000
|L11.200|
        DCD      0x40039000
|L11.204|
        DCD      0x4003a000
|L11.208|
        DCD      0x400b9000
|L11.212|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c",0
|L11.252|
        DCB      "-1 != chnlCount",0

        AREA ||i.FTM_SetupDualEdgeCapture||, CODE, READONLY, ALIGN=2

FTM_SetupDualEdgeCapture PROC
        PUSH     {r4-r8,lr}
        MOV      r6,r0
        MOV      r4,r1
        MOV      r7,r2
        MOV      r8,r3
        CBZ      r7,|L12.16|
        B        |L12.28|
|L12.16|
        MOV      r2,#0x33c
        ADR      r1,|L12.164|
        ADR      r0,|L12.204|
        BL       __aeabi_assert
|L12.28|
        LDR      r5,[r6,#0x64]
        LSLS     r0,r4,#3
        MOVS     r1,#1
        LSLS     r1,r1,r0
        BICS     r5,r5,r1
        LSLS     r0,r4,#3
        ADDS     r0,r0,#2
        MOVS     r1,#1
        LSL      r0,r1,r0
        ORRS     r5,r5,r0
        LSLS     r0,r4,#3
        ADDS     r0,r0,#3
        LSL      r0,r1,r0
        ORRS     r5,r5,r0
        STR      r5,[r6,#0x64]
        LSLS     r1,r4,#1
        ADD      r0,r6,#0xc
        LDR      r5,[r0,r1,LSL #3]
        BIC      r5,r5,#0x3c
        LDRB     r0,[r7,#0]
        LDRB     r1,[r7,#1]
        ORRS     r0,r0,r1
        ORRS     r5,r5,r0
        LSLS     r1,r4,#1
        ADD      r0,r6,#0xc
        STR      r5,[r0,r1,LSL #3]
        MOVS     r0,#1
        ADD      r1,r0,r4,LSL #1
        ADD      r0,r6,#0xc
        LDR      r5,[r0,r1,LSL #3]
        BIC      r5,r5,#0x3c
        LDRB     r0,[r7,#0]
        LDRB     r1,[r7,#2]
        ORRS     r0,r0,r1
        ORRS     r5,r5,r0
        MOVS     r0,#1
        ADD      r1,r0,r4,LSL #1
        ADD      r0,r6,#0xc
        STR      r5,[r0,r1,LSL #3]
        CMP      r4,#4
        BGE      |L12.158|
        LDR      r5,[r6,#0x78]
        LSLS     r1,r4,#2
        MOVS     r0,#0xf
        LSLS     r0,r0,r1
        BICS     r5,r5,r0
        LSLS     r1,r4,#2
        LSL      r0,r8,r1
        ORRS     r5,r5,r0
        STR      r5,[r6,#0x78]
|L12.158|
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L12.164|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c",0
|L12.204|
        DCB      "edgeParam",0
        DCB      0
        DCB      0

        AREA ||i.FTM_SetupFault||, CODE, READONLY, ALIGN=2

FTM_SetupFault PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        CBZ      r6,|L13.12|
        B        |L13.24|
|L13.12|
        MOV      r2,#0x39e
        ADR      r1,|L13.116|
        ADR      r0,|L13.156|
        BL       __aeabi_assert
|L13.24|
        LDRB     r0,[r6,#2]
        CBZ      r0,|L13.42|
        LDR      r0,[r4,#0x7c]
        ADDS     r1,r5,#4
        MOVS     r2,#0x10
        LSLS     r2,r2,r1
        ORRS     r0,r0,r2
        STR      r0,[r4,#0x7c]
        B        |L13.54|
|L13.42|
        LDR      r0,[r4,#0x7c]
        ADDS     r1,r5,#4
        MOVS     r2,#0x10
        LSLS     r2,r2,r1
        BICS     r0,r0,r2
        STR      r0,[r4,#0x7c]
|L13.54|
        LDRB     r0,[r6,#1]
        CBZ      r0,|L13.74|
        LDR      r0,[r4,#0x88]
        MOVS     r1,#1
        LSLS     r1,r1,r5
        ORRS     r0,r0,r1
        STR      r0,[r4,#0x88]
        B        |L13.88|
|L13.74|
        LDR      r1,[r4,#0x88]
        MOVS     r0,#1
        LSLS     r0,r0,r5
        BICS     r1,r1,r0
        STR      r1,[r4,#0x88]
|L13.88|
        LDRB     r0,[r6,#0]
        CBZ      r0,|L13.104|
        LDR      r0,[r4,#0x7c]
        MOVS     r1,#1
        LSLS     r1,r1,r5
        ORRS     r0,r0,r1
        STR      r0,[r4,#0x7c]
        B        |L13.114|
|L13.104|
        LDR      r1,[r4,#0x7c]
        MOVS     r0,#1
        LSLS     r0,r0,r5
        BICS     r1,r1,r0
        STR      r1,[r4,#0x7c]
|L13.114|
        POP      {r4-r6,pc}
        ENDP

|L13.116|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c",0
|L13.156|
        DCB      "faultParams",0

        AREA ||i.FTM_SetupInputCapture||, CODE, READONLY, ALIGN=1

FTM_SetupInputCapture PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r2
        LDR      r5,[r0,#0x64]
        ASRS     r6,r1,#1
        LSLS     r6,r6,#3
        MOVS     r7,#1
        LSLS     r7,r7,r6
        BICS     r5,r5,r7
        STR      r5,[r0,#0x64]
        LDR      r5,[r0,#0x64]
        ASRS     r6,r1,#1
        LSLS     r6,r6,#3
        ADDS     r6,r6,#2
        MOVS     r7,#1
        LSLS     r7,r7,r6
        BICS     r5,r5,r7
        STR      r5,[r0,#0x64]
        LDR      r5,[r0,#0x80]
        BIC      r5,r5,#1
        STR      r5,[r0,#0x80]
        ADD      r5,r0,#0xc
        LDR      r2,[r5,r1,LSL #3]
        BIC      r2,r2,#0x3c
        ORRS     r2,r2,r4
        STR      r2,[r5,r1,LSL #3]
        CMP      r1,#4
        BGE      |L14.88|
        LDR      r2,[r0,#0x78]
        LSLS     r6,r1,#2
        MOVS     r5,#0xf
        LSLS     r5,r5,r6
        BICS     r2,r2,r5
        LSLS     r5,r1,#2
        LSL      r5,r3,r5
        ORRS     r2,r2,r5
        STR      r2,[r0,#0x78]
|L14.88|
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.FTM_SetupOutputCompare||, CODE, READONLY, ALIGN=1

FTM_SetupOutputCompare PROC
        PUSH     {r4-r7,lr}
        MOV      r4,r2
        LDR      r5,[r0,#0x64]
        ASRS     r6,r1,#1
        LSLS     r6,r6,#3
        MOVS     r7,#1
        LSLS     r7,r7,r6
        BICS     r5,r5,r7
        STR      r5,[r0,#0x64]
        LDR      r5,[r0,#0x64]
        ASRS     r6,r1,#1
        LSLS     r6,r6,#3
        ADDS     r6,r6,#2
        MOVS     r7,#1
        LSLS     r7,r7,r6
        BICS     r5,r5,r7
        STR      r5,[r0,#0x64]
        LDR      r5,[r0,#0x80]
        BIC      r5,r5,#1
        STR      r5,[r0,#0x80]
        ADD      r5,r0,#0xc
        LDR      r2,[r5,r1,LSL #3]
        BIC      r2,r2,#0x3c
        ORRS     r2,r2,r4
        STR      r2,[r5,r1,LSL #3]
        ADD      r5,r5,r1,LSL #3
        STR      r3,[r5,#4]
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.FTM_SetupPwm||, CODE, READONLY, ALIGN=2

FTM_SetupPwm PROC
        PUSH     {r1-r11,lr}
        MOV      r5,r0
        MOV      r4,r1
        MOV      r10,r2
        MOV      r8,r3
        LDR      r11,[sp,#0x30]
        CBZ      r4,|L16.20|
        B        |L16.32|
|L16.20|
        MOV      r2,#0x17a
        ADR      r1,|L16.588|
        ADR      r0,|L16.628|
        BL       __aeabi_assert
|L16.32|
        LDR      r0,[sp,#0x34]
        CBZ      r0,|L16.38|
        B        |L16.50|
|L16.38|
        MOV      r2,#0x17b
        ADR      r1,|L16.588|
        ADR      r0,|L16.640|
        BL       __aeabi_assert
|L16.50|
        CMP      r11,#0
        BEQ      |L16.58|
        B        |L16.70|
|L16.58|
        MOV      r2,#0x17c
        ADR      r1,|L16.588|
        ADR      r0,|L16.652|
        BL       __aeabi_assert
|L16.70|
        CMP      r10,#0
        BEQ      |L16.78|
        B        |L16.90|
|L16.78|
        MOV      r2,#0x17d
        ADR      r1,|L16.588|
        ADR      r0,|L16.664|
        BL       __aeabi_assert
|L16.90|
        LDR      r0,[r5,#0]
        AND      r1,r0,#7
        MOVS     r0,#1
        LSLS     r0,r0,r1
        LDR      r1,[sp,#0x34]
        UDIV     r0,r1,r0
        STR      r0,[sp,#8]
        CMP      r8,#0
        BEQ      |L16.128|
        CMP      r8,#1
        BEQ      |L16.148|
        CMP      r8,#2
        BNE      |L16.168|
        B        |L16.130|
|L16.128|
        NOP      
|L16.130|
        LDR      r0,[r5,#0]
        BIC      r0,r0,#0x20
        STR      r0,[r5,#0]
        LDR      r0,[sp,#8]
        UDIV     r0,r0,r11
        SUBS     r6,r0,#1
        B        |L16.174|
|L16.148|
        LDR      r0,[r5,#0]
        ORR      r0,r0,#0x20
        STR      r0,[r5,#0]
        LSL      r1,r11,#1
        LDR      r0,[sp,#8]
        UDIV     r6,r0,r1
        B        |L16.174|
|L16.168|
        MOVS     r0,#1
|L16.170|
        POP      {r1-r11,pc}
|L16.174|
        NOP      
        CMP      r6,#0x10000
        BCC      |L16.186|
        MOVS     r0,#1
        B        |L16.170|
|L16.186|
        STR      r6,[r5,#8]
        MOVS     r0,#0
        STR      r0,[sp,#0]
        B        |L16.574|
|L16.194|
        LDRB     r0,[r4,#2]
        CMP      r0,#0x64
        BLE      |L16.204|
        MOVS     r0,#1
        B        |L16.170|
|L16.204|
        CMP      r8,#0
        BEQ      |L16.216|
        CMP      r8,#1
        BNE      |L16.300|
|L16.216|
        LDRB     r1,[r4,#0]
        ADD      r0,r5,#0xc
        LDR      r7,[r0,r1,LSL #3]
        BIC      r7,r7,#0x3c
        LDRB     r0,[r4,#1]
        ORR      r7,r7,r0,LSL #2
        ORR      r7,r7,#0x20
        LDRB     r1,[r4,#0]
        ADD      r0,r5,#0xc
        STR      r7,[r0,r1,LSL #3]
        LDRB     r0,[r4,#2]
        CBNZ     r0,|L16.260|
        MOV      r9,#0
        B        |L16.284|
|L16.260|
        LDRB     r0,[r4,#2]
        MULS     r0,r6,r0
        MOVS     r1,#0x64
        UDIV     r0,r0,r1
        UXTH     r9,r0
        CMP      r9,r6
        BCC      |L16.284|
        ADDS     r0,r6,#1
        UXTH     r9,r0
|L16.284|
        LDRB     r1,[r4,#0]
        ADD      r0,r5,#0xc
        ADD      r0,r0,r1,LSL #3
        STR      r9,[r0,#4]
        B        |L16.564|
|L16.300|
        LDR      r1,|L16.676|
        CMP      r5,r1
        BNE      |L16.310|
        MOVS     r1,#8
        B        |L16.344|
|L16.310|
        LDR      r1,|L16.680|
        CMP      r5,r1
        BNE      |L16.320|
        MOVS     r1,#2
        B        |L16.344|
|L16.320|
        LDR      r1,|L16.684|
        CMP      r5,r1
        BNE      |L16.330|
        MOVS     r1,#2
        B        |L16.344|
|L16.330|
        LDR      r1,|L16.688|
        CMP      r5,r1
        BNE      |L16.340|
        MOVS     r1,#8
        B        |L16.344|
|L16.340|
        MOV      r1,#0xffffffff
|L16.344|
        MOV      r0,r1
        LDRB     r1,[r4,#0]
        ADD      r2,r0,r0,LSR #31
        CMP      r1,r2,ASR #1
        BLT      |L16.362|
        MOVS     r0,#1
        B        |L16.170|
|L16.362|
        LDRB     r0,[r4,#3]
        CMP      r0,#0x64
        BLE      |L16.372|
        MOVS     r0,#1
        B        |L16.170|
|L16.372|
        LDRB     r0,[r4,#3]
        CBNZ     r0,|L16.382|
        MOVS     r0,#0
        STR      r0,[sp,#4]
        B        |L16.396|
|L16.382|
        LDRB     r0,[r4,#3]
        MULS     r0,r6,r0
        MOVS     r1,#0x64
        UDIV     r0,r0,r1
        UXTH     r0,r0
        STR      r0,[sp,#4]
|L16.396|
        LDRB     r0,[r4,#2]
        CBNZ     r0,|L16.410|
        MOV      r9,#0
        MOVS     r0,#0
        STR      r0,[sp,#4]
        B        |L16.434|
|L16.410|
        LDRB     r0,[r4,#2]
        MULS     r0,r6,r0
        MOVS     r1,#0x64
        UDIV     r0,r0,r1
        UXTH     r9,r0
        CMP      r9,r6
        BCC      |L16.434|
        ADDS     r0,r6,#1
        UXTH     r9,r0
|L16.434|
        LDRB     r0,[r4,#0]
        LSLS     r1,r0,#1
        ADD      r0,r5,#0xc
        LDR      r7,[r0,r1,LSL #3]
        BIC      r7,r7,#0x3c
        LDRB     r0,[r4,#1]
        ORR      r7,r7,r0,LSL #2
        LDRB     r0,[r4,#0]
        LSLS     r1,r0,#1
        ADD      r0,r5,#0xc
        STR      r7,[r0,r1,LSL #3]
        LDRB     r0,[r4,#0]
        MOVS     r1,#1
        ADD      r1,r1,r0,LSL #1
        ADD      r0,r5,#0xc
        LDR      r7,[r0,r1,LSL #3]
        BIC      r7,r7,#0x3c
        LDRB     r0,[r4,#1]
        ORR      r7,r7,r0,LSL #2
        LDRB     r0,[r4,#0]
        MOVS     r1,#1
        ADD      r1,r1,r0,LSL #1
        ADD      r0,r5,#0xc
        STR      r7,[r0,r1,LSL #3]
        LDR      r0,[r5,#0x64]
        LDRB     r1,[r4,#0]
        LSLS     r1,r1,#3
        MOVS     r2,#1
        LSLS     r2,r2,r1
        ORRS     r0,r0,r2
        STR      r0,[r5,#0x64]
        LDRB     r1,[r4,#0]
        LSLS     r2,r1,#1
        ADD      r1,r5,#0xc
        ADD      r1,r1,r2,LSL #3
        LDR      r0,[sp,#4]
        STR      r0,[r1,#4]
        LDR      r0,[sp,#4]
        ADD      r1,r0,r9
        LDRB     r0,[r4,#0]
        MOVS     r2,#1
        ADD      r2,r2,r0,LSL #1
        ADD      r0,r5,#0xc
        ADD      r0,r0,r2,LSL #3
        STR      r1,[r0,#4]
|L16.564|
        ADDS     r4,r4,#4
        LDR      r0,[sp,#0]
        ADDS     r0,r0,#1
        UXTB     r0,r0
        STR      r0,[sp,#0]
|L16.574|
        LDR      r0,[sp,#0]
        CMP      r0,r10
        BLT      |L16.194|
        MOVS     r0,#0
        B        |L16.170|
        ENDP

        DCW      0x0000
|L16.588|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c",0
|L16.628|
        DCB      "chnlParams",0
        DCB      0
|L16.640|
        DCB      "srcClock_Hz",0
|L16.652|
        DCB      "pwmFreq_Hz",0
        DCB      0
|L16.664|
        DCB      "numOfChnls",0
        DCB      0
|L16.676|
        DCD      0x40038000
|L16.680|
        DCD      0x40039000
|L16.684|
        DCD      0x4003a000
|L16.688|
        DCD      0x400b9000

        AREA ||i.FTM_SetupPwmMode||, CODE, READONLY, ALIGN=2

FTM_SetupPwmMode PROC
        PUSH     {r4-r10,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r8,r2
        MOV      r7,r3
        CBZ      r5,|L17.16|
        B        |L17.28|
|L17.16|
        MOV      r2,#0x273
        ADR      r1,|L17.356|
        ADR      r0,|L17.396|
        BL       __aeabi_assert
|L17.28|
        CMP      r8,#0
        BEQ      |L17.36|
        B        |L17.48|
|L17.36|
        MOV      r2,#0x274
        ADR      r1,|L17.356|
        ADR      r0,|L17.408|
        BL       __aeabi_assert
|L17.48|
        CBZ      r7,|L17.60|
        CMP      r7,#1
        BEQ      |L17.72|
        CMP      r7,#2
        BNE      |L17.82|
        B        |L17.62|
|L17.60|
        NOP      
|L17.62|
        LDR      r0,[r4,#0]
        BIC      r0,r0,#0x20
        STR      r0,[r4,#0]
        B        |L17.84|
|L17.72|
        LDR      r0,[r4,#0]
        ORR      r0,r0,#0x20
        STR      r0,[r4,#0]
        B        |L17.84|
|L17.82|
        NOP      
|L17.84|
        NOP      
        MOV      r9,#0
        B        |L17.344|
|L17.92|
        CBZ      r7,|L17.98|
        CMP      r7,#1
        BNE      |L17.144|
|L17.98|
        LDRB     r1,[r5,#0]
        ADD      r0,r4,#0xc
        LDR      r6,[r0,r1,LSL #3]
        BIC      r6,r6,#0x3c
        LDRB     r0,[r5,#1]
        ORR      r6,r6,r0,LSL #2
        ORR      r6,r6,#0x20
        LDRB     r1,[r5,#0]
        ADD      r0,r4,#0xc
        STR      r6,[r0,r1,LSL #3]
        LDRH     r1,[r5,#2]
        LDRB     r2,[r5,#0]
        ADD      r0,r0,r2,LSL #3
        STR      r1,[r0,#4]
        B        |L17.334|
|L17.144|
        LDR      r1,|L17.420|
        CMP      r4,r1
        BNE      |L17.154|
        MOVS     r1,#8
        B        |L17.188|
|L17.154|
        LDR      r1,|L17.424|
        CMP      r4,r1
        BNE      |L17.164|
        MOVS     r1,#2
        B        |L17.188|
|L17.164|
        LDR      r1,|L17.428|
        CMP      r4,r1
        BNE      |L17.174|
        MOVS     r1,#2
        B        |L17.188|
|L17.174|
        LDR      r1,|L17.432|
        CMP      r4,r1
        BNE      |L17.184|
        MOVS     r1,#8
        B        |L17.188|
|L17.184|
        MOV      r1,#0xffffffff
|L17.188|
        MOV      r0,r1
        LDRB     r1,[r5,#0]
        ADD      r2,r0,r0,LSR #31
        CMP      r1,r2,ASR #1
        BLT      |L17.208|
        MOVS     r0,#1
|L17.204|
        POP      {r4-r10,pc}
|L17.208|
        LDRB     r0,[r5,#0]
        LSLS     r1,r0,#1
        ADD      r0,r4,#0xc
        LDR      r6,[r0,r1,LSL #3]
        BIC      r6,r6,#0x3c
        LDRB     r0,[r5,#1]
        ORR      r6,r6,r0,LSL #2
        LDRB     r0,[r5,#0]
        LSLS     r1,r0,#1
        ADD      r0,r4,#0xc
        STR      r6,[r0,r1,LSL #3]
        LDRB     r0,[r5,#0]
        MOVS     r1,#1
        ADD      r1,r1,r0,LSL #1
        ADD      r0,r4,#0xc
        LDR      r6,[r0,r1,LSL #3]
        BIC      r6,r6,#0x3c
        LDRB     r0,[r5,#1]
        ORR      r6,r6,r0,LSL #2
        LDRB     r0,[r5,#0]
        MOVS     r1,#1
        ADD      r1,r1,r0,LSL #1
        ADD      r0,r4,#0xc
        STR      r6,[r0,r1,LSL #3]
        LDR      r0,[r4,#0x64]
        LDRB     r1,[r5,#0]
        LSLS     r1,r1,#3
        MOVS     r2,#1
        LSLS     r2,r2,r1
        ORRS     r0,r0,r2
        STR      r0,[r4,#0x64]
        LDRH     r1,[r5,#4]
        LDRB     r0,[r5,#0]
        LSLS     r2,r0,#1
        ADD      r0,r4,#0xc
        ADD      r0,r0,r2,LSL #3
        STR      r1,[r0,#4]
        LDRH     r1,[r5,#2]
        LDRB     r0,[r5,#0]
        MOVS     r2,#1
        ADD      r2,r2,r0,LSL #1
        ADD      r0,r4,#0xc
        ADD      r0,r0,r2,LSL #3
        STR      r1,[r0,#4]
|L17.334|
        ADDS     r5,r5,#6
        ADD      r0,r9,#1
        AND      r9,r0,#0xff
|L17.344|
        CMP      r9,r8
        BLT      |L17.92|
        MOVS     r0,#0
        B        |L17.204|
        ENDP

        DCW      0x0000
|L17.356|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c",0
|L17.396|
        DCB      "chnlParams",0
        DCB      0
|L17.408|
        DCB      "numOfChnls",0
        DCB      0
|L17.420|
        DCD      0x40038000
|L17.424|
        DCD      0x40039000
|L17.428|
        DCD      0x4003a000
|L17.432|
        DCD      0x400b9000

        AREA ||i.FTM_SetupQuadDecode||, CODE, READONLY, ALIGN=2

FTM_SetupQuadDecode PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r6,r1
        MOV      r7,r2
        MOV      r8,r3
        CBZ      r6,|L18.16|
        B        |L18.28|
|L18.16|
        MOV      r2,#0x36f
        ADR      r1,|L18.160|
        ADR      r0,|L18.200|
        BL       __aeabi_assert
|L18.28|
        CBZ      r7,|L18.32|
        B        |L18.44|
|L18.32|
        MOV      r2,#0x370
        ADR      r1,|L18.160|
        ADR      r0,|L18.216|
        BL       __aeabi_assert
|L18.44|
        LDRB     r0,[r6,#0]
        CBZ      r0,|L18.64|
        LDR      r5,[r4,#0x78]
        BIC      r5,r5,#0xf
        LDRB     r0,[r6,#4]
        AND      r0,r0,#0xf
        ORRS     r5,r5,r0
        STR      r5,[r4,#0x78]
|L18.64|
        LDRB     r0,[r7,#0]
        CBZ      r0,|L18.86|
        LDR      r5,[r4,#0x78]
        BIC      r5,r5,#0xf0
        MOVS     r1,#0xf0
        LDR      r0,[r7,#4]
        AND      r0,r1,r0,LSL #4
        ORRS     r5,r5,r0
        STR      r5,[r4,#0x78]
|L18.86|
        LDR      r5,[r4,#0x80]!
        BIC      r5,r5,#0xf8
        MOVS     r0,#8
        AND      r0,r0,r8,LSL #3
        LDRB     r1,[r6,#0]
        MOVS     r2,#0x80
        AND      r1,r2,r1,LSL #7
        ORRS     r0,r0,r1
        LDRB     r1,[r7,#0]
        MOVS     r2,#0x40
        AND      r1,r2,r1,LSL #6
        ORRS     r0,r0,r1
        LDRB     r1,[r6,#8]
        MOVS     r2,#0x20
        AND      r1,r2,r1,LSL #5
        ORRS     r0,r0,r1
        LDRB     r1,[r7,#8]
        MOVS     r2,#0x10
        AND      r1,r2,r1,LSL #4
        ORRS     r0,r0,r1
        ORRS     r5,r5,r0
        STR      r5,[r4,#0]
        LDR      r0,[r4,#0]
        ORR      r0,r0,#1
        STR      r0,[r4],#-0x80
        POP      {r4-r8,pc}
        ENDP

        DCW      0x0000
|L18.160|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c",0
|L18.200|
        DCB      "phaseAParams",0
        DCB      0
        DCB      0
        DCB      0
|L18.216|
        DCB      "phaseBParams",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.FTM_UpdateChnlEdgeLevelSelect||, CODE, READONLY, ALIGN=1

FTM_UpdateChnlEdgeLevelSelect PROC
        PUSH     {r4,lr}
        MOV      r3,r2
        ADD      r4,r0,#0xc
        LDR      r2,[r4,r1,LSL #3]
        BIC      r2,r2,#0xc
        MOVS     r4,#0xc
        AND      r4,r4,r3,LSL #2
        ORRS     r2,r2,r4
        ADD      r4,r0,#0xc
        STR      r2,[r4,r1,LSL #3]
        POP      {r4,pc}
        ENDP


        AREA ||i.FTM_UpdatePwmDutycycle||, CODE, READONLY, ALIGN=2

FTM_UpdatePwmDutycycle PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r2
        MOV      r5,r3
        MOVS     r6,#0
        LDR      r7,[r0,#8]
        UXTH     r3,r7
        CBZ      r4,|L20.20|
        CMP      r4,#1
        BNE      |L20.54|
|L20.20|
        MUL      r7,r3,r5
        MOV      r12,#0x64
        SDIV     r7,r7,r12
        UXTH     r2,r7
        CMP      r2,r3
        BLT      |L20.42|
        ADDS     r7,r3,#1
        UXTH     r2,r7
|L20.42|
        ADD      r7,r0,#0xc
        ADD      r7,r7,r1,LSL #3
        STR      r2,[r7,#4]
        B        |L20.184|
|L20.54|
        LDR      r12,|L20.188|
        CMP      r0,r12
        BNE      |L20.68|
        MOV      r12,#8
        B        |L20.114|
|L20.68|
        LDR      r12,|L20.192|
        CMP      r0,r12
        BNE      |L20.82|
        MOV      r12,#2
        B        |L20.114|
|L20.82|
        LDR      r12,|L20.196|
        CMP      r0,r12
        BNE      |L20.96|
        MOV      r12,#2
        B        |L20.114|
|L20.96|
        LDR      r12,|L20.200|
        CMP      r0,r12
        BNE      |L20.110|
        MOV      r12,#8
        B        |L20.114|
|L20.110|
        MOV      r12,#0xffffffff
|L20.114|
        ADD      r12,r12,r12,LSR #31
        CMP      r1,r12,ASR #1
        BLT      |L20.128|
|L20.124|
        POP      {r4-r8,pc}
|L20.128|
        MUL      r7,r3,r5
        MOV      r12,#0x64
        SDIV     r7,r7,r12
        UXTH     r2,r7
        ADD      r7,r0,#0xc
        ADD      r7,r7,r1,LSL #4
        LDR      r7,[r7,#4]
        UXTH     r6,r7
        CMP      r2,r3
        BLT      |L20.162|
        ADDS     r7,r3,#1
        UXTH     r2,r7
|L20.162|
        ADD      r12,r6,r2
        MOVS     r7,#1
        ADD      r8,r7,r1,LSL #1
        ADD      r7,r0,#0xc
        ADD      r7,r7,r8,LSL #3
        STR      r12,[r7,#4]
|L20.184|
        NOP      
        B        |L20.124|
        ENDP

|L20.188|
        DCD      0x40038000
|L20.192|
        DCD      0x40039000
|L20.196|
        DCD      0x4003a000
|L20.200|
        DCD      0x400b9000

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

s_ftmBases
        DCD      0x40038000
        DCD      0x40039000
        DCD      0x4003a000
        DCD      0x400b9000
s_ftmClocks
        DCD      0x103c0018
        DCD      0x103c0019
        DCD      0x103c001a
        DCD      0x10300019

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_ftm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_ftm_c_FTM_Init____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_fsl_ftm_c_FTM_Init____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_ftm_c_FTM_Init____REVSH|
#line 483
|__asm___9_fsl_ftm_c_FTM_Init____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_ftm_c_FTM_Init____RRX|
#line 670
|__asm___9_fsl_ftm_c_FTM_Init____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT FTM_ClearStatusFlags [CODE]
        EXPORT FTM_Deinit [CODE]
        EXPORT FTM_DisableInterrupts [CODE]
        EXPORT FTM_EnableInterrupts [CODE]
        EXPORT FTM_GetDefaultConfig [CODE]
        EXPORT FTM_GetEnabledInterrupts [CODE]
        EXPORT FTM_GetStatusFlags [CODE]
        EXPORT FTM_Init [CODE]
        EXPORT FTM_SetupDualEdgeCapture [CODE]
        EXPORT FTM_SetupFault [CODE]
        EXPORT FTM_SetupInputCapture [CODE]
        EXPORT FTM_SetupOutputCompare [CODE]
        EXPORT FTM_SetupPwm [CODE]
        EXPORT FTM_SetupPwmMode [CODE]
        EXPORT FTM_SetupQuadDecode [CODE]
        EXPORT FTM_UpdateChnlEdgeLevelSelect [CODE]
        EXPORT FTM_UpdatePwmDutycycle [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_assert [CODE]
        IMPORT __aeabi_memclr4 [CODE]

        KEEP FTM_GetInstance
        KEEP FTM_SetPwmSync
        KEEP FTM_SetReloadPoints
        KEEP s_ftmBases
        KEEP s_ftmClocks

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
