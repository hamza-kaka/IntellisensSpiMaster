; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_ftfx_flash.o --depend=.\objects\fsl_ftfx_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_ftfx_flash.crf ..\..\devices\MK66F18\drivers\fsl_ftfx_flash.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.FLASH_Erase||, CODE, READONLY, ALIGN=1

FLASH_Erase PROC
        PUSH     {r3-r9,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r7,r2
        MOV      r8,r3
        MOV      r3,sp
        MOV      r2,r7
        MOV      r1,r6
        MOV      r0,r5
        BL       flash_check_range_to_get_index
        MOV      r4,r0
        CBZ      r4,|L1.34|
        MOV      r0,r4
|L1.30|
        POP      {r3-r9,pc}
|L1.34|
        LDRB     r1,[sp,#0]
        ADD      r2,r1,r1,LSL #3
        ADD      r1,r2,r1,LSL #4
        ADD      r0,r5,r1,LSL #2
        MOV      r1,r6
        BL       flash_convert_start_address
        MOV      r4,r0
        CBZ      r4,|L1.64|
        MOV      r0,r4
        B        |L1.30|
|L1.64|
        LDRB     r1,[sp,#0]
        ADD      r2,r1,r1,LSL #3
        ADD      r1,r2,r1,LSL #4
        ADD      r0,r5,r1,LSL #2
        MOV      r3,r8
        MOV      r2,r7
        MOV      r1,r6
        BL       FTFx_CMD_Erase
        B        |L1.30|
        ENDP


        AREA ||i.FLASH_EraseAll||, CODE, READONLY, ALIGN=1

FLASH_EraseAll PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r1,r5
        MOV      r0,r4
        BL       FTFx_CMD_EraseAll
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.FLASH_GetProperty||, CODE, READONLY, ALIGN=1

FLASH_GetProperty PROC
        PUSH     {r4,lr}
        MOV      r3,r0
        CBZ      r3,|L3.8|
        CBNZ     r2,|L3.12|
|L3.8|
        MOVS     r0,#4
|L3.10|
        POP      {r4,pc}
|L3.12|
        CBNZ     r1,|L3.20|
        LDR      r0,[r3,#0x10]
        STR      r0,[r2,#0]
        B        |L3.124|
|L3.20|
        CMP      r1,#1
        BNE      |L3.30|
        LDR      r0,[r3,#0xc]
        STR      r0,[r2,#0]
        B        |L3.124|
|L3.30|
        CMP      r1,#2
        BNE      |L3.46|
        LDR      r4,[r3,#0x14]
        LDR      r0,[r3,#0xc]
        UDIV     r0,r0,r4
        STR      r0,[r2,#0]
        B        |L3.124|
|L3.46|
        CMP      r1,#3
        BNE      |L3.56|
        LDR      r0,[r3,#0x14]
        STR      r0,[r2,#0]
        B        |L3.124|
|L3.56|
        CMP      r1,#4
        BNE      |L3.66|
        LDR      r0,[r3,#8]
        STR      r0,[r2,#0]
        B        |L3.124|
|L3.66|
        CMP      r1,#5
        BNE      |L3.80|
        LDRB     r0,[r3,#4]
        UBFX     r0,r0,#4,#1
        STR      r0,[r2,#0]
        B        |L3.124|
|L3.80|
        CMP      r1,#6
        BNE      |L3.90|
        LDR      r0,[r3,#0x1c]
        STR      r0,[r2,#0]
        B        |L3.124|
|L3.90|
        CMP      r1,#7
        BNE      |L3.100|
        LDR      r0,[r3,#0x20]
        STR      r0,[r2,#0]
        B        |L3.124|
|L3.100|
        CMP      r1,#0x20
        BNE      |L3.110|
        LDR      r0,[r3,#0x3c]
        STR      r0,[r2,#0]
        B        |L3.124|
|L3.110|
        CMP      r1,#0x21
        BNE      |L3.120|
        LDR      r0,[r3,#0x40]
        STR      r0,[r2,#0]
        B        |L3.124|
|L3.120|
        MOVS     r0,#0x6a
        B        |L3.10|
|L3.124|
        MOVS     r0,#0
        B        |L3.10|
        ENDP


        AREA ||i.FLASH_GetSecurityState||, CODE, READONLY, ALIGN=1

FLASH_GetSecurityState PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r1,r5
        MOV      r0,r4
        BL       FTFx_REG_GetSecurityState
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.FLASH_Init||, CODE, READONLY, ALIGN=2

FLASH_Init PROC
        PUSH     {r4-r11,lr}
        SUB      sp,sp,#0x2c
        MOV      r4,r0
        CBNZ     r4,|L5.18|
        MOVS     r0,#4
|L5.12|
        ADD      sp,sp,#0x2c
        POP      {r4-r11,pc}
|L5.18|
        MOVS     r5,#0
        B        |L5.694|
|L5.22|
        MOVS     r0,#0
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        STRB     r0,[r4,r1,LSL #2]
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        STRB     r5,[r0,#1]
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        ADD      r0,r4,r1,LSL #2
        BL       flash_init_features
        MOVS     r0,#0
        STR      r0,[sp,#0x28]
        MOV      r10,#0x80000
        MOV      r8,#4
        MOV      r0,#0x1000
        STR      r0,[sp,#0x24]
        MOVS     r0,#0x20
        STR      r0,[sp,#0x20]
        MOVS     r0,#8
        STR      r0,[sp,#0x1c]
        MOVS     r0,#0x10
        STR      r0,[sp,#0x18]
        STR      r0,[sp,#0x14]
        MOV      r0,#0xf000000
        STR      r0,[sp,#0x10]
        MOVS     r0,#0x18
        STR      r0,[sp,#0xc]
        LDR      r0,|L5.704|
        LDRB     r0,[r0,#0]
        STR      r0,[sp,#8]
        LDR      r0,|L5.704|
        SUBS     r0,r0,#0x28
        LDRB     r0,[r0,#0x2b]
        STR      r0,[sp,#4]
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        ADD      r1,r4,r1,LSL #2
        LDR      r0,[sp,#0x28]
        STR      r0,[r1,#8]
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        STR      r8,[r0,#0x14]
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        ADD      r1,r4,r1,LSL #2
        LDR      r0,[sp,#0x24]
        STR      r0,[r1,#0x10]
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        LDRB     r0,[r0,#4]
        AND      r0,r0,#1
        CBZ      r0,|L5.240|
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        LDRB     r0,[r0,#4]
        UBFX     r0,r0,#1,#1
        CBZ      r0,|L5.240|
        MOV      r1,r10
        MOV      r0,r8
        LDRD     r3,r2,[sp,#0xc]
        BL       flash_calculate_mem_size
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        ADD      r1,r4,r1,LSL #2
        STR      r0,[r1,#0xc]
        B        |L5.258|
|L5.240|
        MUL      r0,r8,r10
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        ADD      r1,r4,r1,LSL #2
        STR      r0,[r1,#0xc]
|L5.258|
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        LDRB     r0,[r0,#4]
        UBFX     r0,r0,#4,#1
        CBZ      r0,|L5.372|
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        ADD      r1,r4,r1,LSL #2
        ADD      r0,r1,#0x18
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        ADD      r1,r4,r1,LSL #2
        LDRB     r1,[r1,#4]
        UBFX     r1,r1,#5,#1
        CBZ      r1,|L5.346|
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        ADD      r1,r4,r1,LSL #2
        LDR      r1,[r1,#8]
        STR      r1,[r0,#0]
        MOV      r2,#0x100
        LDR      r1,[sp,#8]
        LSLS     r2,r2,r1
        STR      r2,[r0,#4]
        LDR      r1,[sp,#4]
        STR      r1,[r0,#8]
        B        |L5.370|
|L5.346|
        LDR      r1,[r4,#8]
        STR      r1,[r0,#0]
        LDR      r1,|L5.704|
        LDRB     r2,[r1,#0]
        ASRS     r1,r1,#22
        LSLS     r1,r1,r2
        STR      r1,[r0,#4]
        LDR      r1,|L5.704|
        SUBS     r1,r1,#0x28
        LDRB     r1,[r1,#0x2b]
        STR      r1,[r0,#8]
|L5.370|
        NOP      
|L5.372|
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        LDRB     r0,[r0,#4]
        UBFX     r0,r0,#2,#1
        CMP      r0,#0
        BEQ      |L5.552|
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        ADD      r6,r0,#0x24
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        LDRB     r0,[r0,#4]
        UBFX     r0,r0,#3,#1
        CBZ      r0,|L5.474|
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        LDR      r0,[r0,#8]
        STR      r0,[r6,#0]
        LDR      r0,[sp,#0x20]
        STR      r0,[r6,#8]
        ADD      r2,r5,r5,LSL #3
        ADD      r2,r2,r5,LSL #4
        ADD      r2,r4,r2,LSL #2
        LDR      r1,[r6,#8]
        LDR      r0,[r2,#0xc]
        BL       flash_calculate_prot_segment_size
        STR      r0,[r6,#4]
        B        |L5.550|
|L5.474|
        MOV      r11,#0
        LDR      r0,[r4,#8]
        STR      r0,[r6,#0]
        MOVS     r0,#0x20
        STR      r0,[r6,#8]
        MOVS     r0,#0
        B        |L5.508|
|L5.490|
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        ADD      r1,r4,r1,LSL #2
        LDR      r1,[r1,#0xc]
        ADD      r11,r11,r1
        ADDS     r0,r0,#1
|L5.508|
        CMP      r0,#0
        BEQ      |L5.490|
        MOV      r0,r11
        LDR      r1,[r6,#8]
        BL       flash_calculate_prot_segment_size
        MOV      r9,r0
        MOVS     r0,#0
        B        |L5.544|
|L5.526|
        ADD      r1,r0,r0,LSL #3
        ADD      r1,r1,r0,LSL #4
        ADD      r1,r4,r1,LSL #2
        STR      r9,[r1,#0x28]
        ADDS     r0,r0,#1
|L5.544|
        CMP      r0,#0
        BEQ      |L5.526|
        NOP      
|L5.550|
        NOP      
|L5.552|
        LDR      r0,[sp,#0x1c]
        UXTB     r1,r0
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        STRB     r1,[r0,#0x39]
        LDR      r0,[sp,#0x18]
        UXTB     r1,r0
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        STRB     r1,[r0,#0x34]
        LDR      r0,[sp,#0x14]
        UXTB     r1,r0
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        STRB     r1,[r0,#0x35]
        MOVS     r1,#8
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        STRB     r1,[r0,#0x36]
        MOVS     r1,#4
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        STRB     r1,[r0,#0x37]
        MOVS     r1,#0x10
        ADD      r0,r5,r5,LSL #3
        ADD      r0,r0,r5,LSL #4
        ADD      r0,r4,r0,LSL #2
        STRB     r1,[r0,#0x38]
        ADD      r1,r5,r5,LSL #3
        ADD      r1,r1,r5,LSL #4
        ADD      r0,r4,r1,LSL #2
        BL       FTFx_API_Init
        MOV      r7,r0
        CBZ      r7,|L5.690|
        MOV      r0,r7
        B        |L5.12|
|L5.690|
        ADDS     r0,r5,#1
        UXTB     r5,r0
|L5.694|
        CMP      r5,#0
        BEQ      |L5.22|
        MOVS     r0,#0
        B        |L5.12|
        ENDP

|L5.704|
        DCD      0x40020028

        AREA ||i.FLASH_IsExecuteOnly||, CODE, READONLY, ALIGN=2

FLASH_IsExecuteOnly PROC
        PUSH     {r0-r12,lr}
        MOV      r8,r0
        MOV      r5,r1
        MOV      r9,r2
        MOV      r6,r3
        CBNZ     r6,|L6.22|
        MOVS     r0,#4
|L6.16|
        ADD      sp,sp,#0x10
        POP      {r4-r12,pc}
|L6.22|
        ADD      r3,sp,#0xc
        MOV      r2,r9
        MOV      r1,r5
        MOV      r0,r8
        BL       flash_check_range_to_get_index
        MOV      r7,r0
        CBZ      r7,|L6.42|
        MOV      r0,r7
        B        |L6.16|
|L6.42|
        LDRB     r0,[sp,#0xc]
        ADD      r1,r0,r0,LSL #3
        ADD      r0,r1,r0,LSL #4
        ADD      r4,r8,r0,LSL #2
        LDRB     r0,[r4,#4]
        UBFX     r0,r0,#4,#1
        CMP      r0,#0
        BEQ      |L6.306|
        MOVS     r1,#0
        ADD      r2,r5,r9
        LDR      r12,[r4,#0x1c]
        SUB      r12,r12,#1
        BIC      r12,r5,r12
        STR      r12,[sp,#8]
        LDR      r12,[r4,#0x1c]
        ADD      r12,r12,r2
        SUB      r12,r12,#1
        LDR      r10,[r4,#0x1c]
        SUB      r10,r10,#1
        BIC      r12,r12,r10
        STR      r12,[sp,#4]
        MOVS     r3,#1
        MOVS     r0,#0
        LDRD     r12,r10,[sp,#4]
        SUB      r10,r12,r10
        LDR      r12,[r4,#0x1c]
        UDIV     r12,r10,r12
        STR      r12,[sp,#0]
        B        |L6.258|
|L6.142|
        MOV      r12,#0
        MOV      r10,r12
        LDR      r11,[r4,#0x18]
        SUB      r11,r5,r11
        LDR      lr,[r4,#0x1c]
        UDIV     r0,r11,lr
        LDRB     r11,[r4,#1]
        CMP      r11,#0
        BEQ      |L6.188|
        LDRB     r11,[r4,#4]
        UBFX     r11,r11,#5,#1
        CMP      r11,#0
        BNE      |L6.226|
|L6.188|
        CMP      r0,#0x20
        BCS      |L6.202|
        LDR      r11,|L6.316|
        LDR      r12,[r11,#0x1c]
        B        |L6.226|
|L6.202|
        LDR      r11,[r4,#0x20]
        CMP      r11,r0
        BLS      |L6.222|
        LDR      r11,|L6.316|
        LDR      r12,[r11,#0x18]
        SUBS     r0,r0,#0x20
        B        |L6.226|
|L6.222|
        MOV      r10,#1
|L6.226|
        CMP      r10,#0
        BEQ      |L6.234|
        B        |L6.262|
|L6.234|
        LSL      r11,r3,r0
        BIC      r11,r11,r12
        CMP      r11,#0
        BEQ      |L6.250|
        ADDS     r1,r1,#1
|L6.250|
        LDR      r11,[r4,#0x1c]
        ADD      r5,r5,r11
        NOP      
|L6.258|
        CMP      r5,r2
        BCC      |L6.142|
|L6.262|
        NOP      
        CBNZ     r1,|L6.276|
        MOV      r12,#0
        STRB     r12,[r6,#0]
        B        |L6.304|
|L6.276|
        LDR      r12,[sp,#0]
        CMP      r1,r12
        BCS      |L6.296|
        MOV      r12,#2
        STRB     r12,[r6,#0]
        B        |L6.304|
        B        |L6.306|
|L6.296|
        MOV      r12,#1
        STRB     r12,[r6,#0]
|L6.304|
        B        |L6.310|
|L6.306|
        MOVS     r0,#0
        STRB     r0,[r6,#0]
|L6.310|
        MOVS     r0,#0
        B        |L6.16|
        ENDP

        DCW      0x0000
|L6.316|
        DCD      0x40020000

        AREA ||i.FLASH_IsProtected||, CODE, READONLY, ALIGN=2

FLASH_IsProtected PROC
        PUSH     {r4-r11,lr}
        SUB      sp,sp,#0xac
        MOV      r8,r0
        MOV      r5,r1
        MOV      r9,r2
        MOV      r6,r3
        CBNZ     r6,|L7.24|
        MOVS     r0,#4
|L7.18|
        ADD      sp,sp,#0xac
        POP      {r4-r11,pc}
|L7.24|
        ADD      r3,sp,#0xa8
        MOV      r2,r9
        MOV      r1,r5
        MOV      r0,r8
        BL       flash_check_range_to_get_index
        MOV      r7,r0
        CBZ      r7,|L7.44|
        MOV      r0,r7
        B        |L7.18|
|L7.44|
        LDRB     r0,[sp,#0xa8]
        ADD      r1,r0,r0,LSL #3
        ADD      r0,r1,r0,LSL #4
        ADD      r4,r8,r0,LSL #2
        LDRB     r0,[r4,#4]
        UBFX     r0,r0,#2,#1
        CMP      r0,#0
        BEQ      |L7.306|
        MOVS     r3,#0
        B        |L7.88|
|L7.74|
        MOV      r11,#0xff
        ADD      lr,sp,#0x88
        STRB     r11,[lr,r3]
        ADDS     r3,r3,#1
|L7.88|
        CMP      r3,#0x20
        BCC      |L7.74|
        MOV      r10,#0
        ADD      r12,r5,r9
        MOVS     r0,#0
        B        |L7.122|
|L7.104|
        LDRD     r11,r3,[r4,#0x24]
        MLA      r3,r3,r0,r11
        ADD      r11,sp,#4
        STR      r3,[r11,r0,LSL #2]
        ADDS     r0,r0,#1
|L7.122|
        LDR      r3,[r4,#0x2c]
        CMP      r3,r0
        BCS      |L7.104|
        MOVS     r0,#0
        B        |L7.352|
|L7.132|
        LDRB     r3,[r4,#1]
        CBZ      r3,|L7.144|
        LDRB     r3,[r4,#4]
        UBFX     r3,r3,#3,#1
        CBNZ     r3,|L7.258|
|L7.144|
        CMP      r0,#8
        BCS      |L7.168|
        LDR      r3,|L7.444|
        LDRB     r3,[r3,#0x10]
        ASRS     r3,r3,r0
        AND      r3,r3,#1
        ADD      r11,sp,#0x88
        STRB     r3,[r11,r0]
        B        |L7.264|
|L7.168|
        CMP      r0,#0x10
        BCS      |L7.198|
        LDR      r3,|L7.444|
        LDRB     r3,[r3,#0x11]
        SUB      r11,r0,#8
        ASR      r3,r3,r11
        AND      r3,r3,#1
        ADD      r11,sp,#0x88
        STRB     r3,[r11,r0]
        B        |L7.264|
|L7.198|
        CMP      r0,#0x18
        BCS      |L7.228|
        LDR      r3,|L7.444|
        LDRB     r3,[r3,#0x12]
        SUB      r11,r0,#0x10
        ASR      r3,r3,r11
        AND      r3,r3,#1
        ADD      r11,sp,#0x88
        STRB     r3,[r11,r0]
        B        |L7.264|
|L7.228|
        CMP      r0,#0x20
        BCS      |L7.260|
        LDR      r3,|L7.444|
        LDRB     r3,[r3,#0x13]
        SUB      r11,r0,#0x18
        ASR      r3,r3,r11
        AND      r3,r3,#1
        ADD      r11,sp,#0x88
        STRB     r3,[r11,r0]
        B        |L7.264|
|L7.258|
        B        |L7.268|
|L7.260|
        MOV      r10,#1
|L7.264|
        ADDS     r0,r0,#1
        B        |L7.344|
|L7.268|
        LDRB     r3,[r4,#1]
        CMP      r3,#1
        BNE      |L7.344|
        LDRB     r3,[r4,#4]
        UBFX     r3,r3,#3,#1
        CBZ      r3,|L7.344|
        CMP      r0,#8
        BCS      |L7.308|
        MOVS     r3,#0
        LDRB     r3,[r3,#0]
        ASRS     r3,r3,r0
        AND      r3,r3,#1
        ADD      r11,sp,#0x88
        STRB     r3,[r11,r0]
        B        |L7.342|
|L7.306|
        B        |L7.436|
|L7.308|
        CMP      r0,#0x10
        BCS      |L7.338|
        MOVS     r3,#0
        LDRB     r3,[r3,#0]
        SUB      r11,r0,#8
        ASR      r3,r3,r11
        AND      r3,r3,#1
        ADD      r11,sp,#0x88
        STRB     r3,[r11,r0]
        B        |L7.342|
|L7.338|
        MOV      r10,#1
|L7.342|
        ADDS     r0,r0,#1
|L7.344|
        CMP      r10,#0
        BEQ      |L7.352|
        B        |L7.358|
|L7.352|
        LDR      r3,[r4,#0x2c]
        CMP      r3,r0
        BHI      |L7.132|
|L7.358|
        NOP      
        MOVS     r0,#0
        MOVS     r2,#0
        MOVS     r1,#0
        B        |L7.408|
|L7.368|
        ADD      r3,sp,#4
        LDR      r3,[r3,r0,LSL #2]
        CMP      r3,r5
        BHI      |L7.406|
        ADD      r11,sp,#4
        ADDS     r3,r0,#1
        LDR      r3,[r11,r3,LSL #2]
        CMP      r3,r5
        BLS      |L7.406|
        ADDS     r2,r2,#1
        ADD      r3,sp,#0x88
        LDRB     r3,[r3,r0]
        CBNZ     r3,|L7.402|
        ADDS     r1,r1,#1
|L7.402|
        LDR      r3,[r4,#0x28]
        ADD      r5,r5,r3
|L7.406|
        ADDS     r0,r0,#1
|L7.408|
        CMP      r5,r12
        BCC      |L7.368|
        CBNZ     r1,|L7.420|
        MOVS     r3,#0
        STRB     r3,[r6,#0]
        B        |L7.434|
|L7.420|
        CMP      r1,r2
        BNE      |L7.430|
        MOVS     r3,#1
        STRB     r3,[r6,#0]
        B        |L7.434|
|L7.430|
        MOVS     r3,#2
        STRB     r3,[r6,#0]
|L7.434|
        B        |L7.440|
|L7.436|
        MOVS     r0,#0
        STRB     r0,[r6,#0]
|L7.440|
        MOVS     r0,#0
        B        |L7.18|
        ENDP

|L7.444|
        DCD      0x40020000

        AREA ||i.FLASH_PflashGetProtection||, CODE, READONLY, ALIGN=2

FLASH_PflashGetProtection PROC
        MOV      r2,r0
        CBZ      r2,|L8.6|
        CBNZ     r1,|L8.10|
|L8.6|
        MOVS     r0,#4
|L8.8|
        BX       lr
|L8.10|
        LDRB     r0,[r2,#4]
        UBFX     r0,r0,#2,#1
        CBZ      r0,|L8.50|
        MOVS     r3,#0x20
        LDR      r0,[r2,#4]
        CMP      r3,r0,LSR #24
        BHI      |L8.34|
        LDR      r0,|L8.56|
        LDR      r0,[r0,#0x10]
        STR      r0,[r1,#0]
|L8.34|
        MOVS     r3,#0x40
        LDR      r0,[r2,#4]
        CMP      r3,r0,LSR #24
        BNE      |L8.50|
        MOVS     r0,#0
        LDR      r0,[r0,#0]
        STR      r0,[r1,#0]
|L8.50|
        MOVS     r0,#0
        B        |L8.8|
        ENDP

        DCW      0x0000
|L8.56|
        DCD      0x40020000

        AREA ||i.FLASH_PflashSetProtection||, CODE, READONLY, ALIGN=2

FLASH_PflashSetProtection PROC
        MOV      r2,r0
        CBNZ     r2,|L9.8|
        MOVS     r0,#4
|L9.6|
        BX       lr
|L9.8|
        LDRB     r0,[r2,#4]
        UBFX     r0,r0,#2,#1
        CBZ      r0,|L9.72|
        MOVS     r3,#0x20
        LDR      r0,[r2,#4]
        CMP      r3,r0,LSR #24
        BHI      |L9.44|
        LDR      r3,|L9.76|
        LDR      r0,[r1,#0]
        STR      r0,[r3,#0x10]
        LDR      r0,[r1,#0]
        LDR      r3,[r3,#0x10]
        CMP      r0,r3
        BEQ      |L9.44|
        MOVS     r0,#0x69
        B        |L9.6|
|L9.44|
        MOVS     r3,#0x40
        LDR      r0,[r2,#4]
        CMP      r3,r0,LSR #24
        BNE      |L9.72|
        MOVS     r3,#0
        LDR      r0,[r1,#0]
        STR      r0,[r3,#0]
        LDR      r0,[r1,#0]
        LDR      r3,[r3,#0]
        CMP      r0,r3
        BEQ      |L9.72|
        MOVS     r0,#0x69
        B        |L9.6|
|L9.72|
        MOVS     r0,#0
        B        |L9.6|
        ENDP

|L9.76|
        DCD      0x40020000

        AREA ||i.FLASH_Program||, CODE, READONLY, ALIGN=1

FLASH_Program PROC
        PUSH     {r3-r9,lr}
        MOV      r5,r0
        MOV      r7,r1
        MOV      r8,r2
        MOV      r6,r3
        MOV      r3,sp
        MOV      r2,r6
        MOV      r1,r7
        MOV      r0,r5
        BL       flash_check_range_to_get_index
        MOV      r4,r0
        CBZ      r4,|L10.34|
        MOV      r0,r4
|L10.30|
        POP      {r3-r9,pc}
|L10.34|
        LDRB     r1,[sp,#0]
        ADD      r2,r1,r1,LSL #3
        ADD      r1,r2,r1,LSL #4
        ADD      r0,r5,r1,LSL #2
        MOV      r1,r7
        BL       flash_convert_start_address
        MOV      r4,r0
        CBZ      r4,|L10.64|
        MOV      r0,r4
        B        |L10.30|
|L10.64|
        LDRB     r1,[sp,#0]
        ADD      r2,r1,r1,LSL #3
        ADD      r1,r2,r1,LSL #4
        ADD      r0,r5,r1,LSL #2
        MOV      r3,r6
        MOV      r2,r8
        MOV      r1,r7
        BL       FTFx_CMD_Program
        B        |L10.30|
        ENDP


        AREA ||i.FLASH_ProgramOnce||, CODE, READONLY, ALIGN=1

FLASH_ProgramOnce PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r7,r3
        MOV      r3,r7
        MOV      r2,r6
        MOV      r1,r5
        MOV      r0,r4
        BL       FTFx_CMD_ReadOnce
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.FLASH_ProgramSection||, CODE, READONLY, ALIGN=1

FLASH_ProgramSection PROC
        PUSH     {r3-r9,lr}
        MOV      r5,r0
        MOV      r7,r1
        MOV      r8,r2
        MOV      r6,r3
        MOV      r3,sp
        MOV      r2,r6
        MOV      r1,r7
        MOV      r0,r5
        BL       flash_check_range_to_get_index
        MOV      r4,r0
        CBZ      r4,|L12.34|
        MOV      r0,r4
|L12.30|
        POP      {r3-r9,pc}
|L12.34|
        LDRB     r1,[sp,#0]
        ADD      r2,r1,r1,LSL #3
        ADD      r1,r2,r1,LSL #4
        ADD      r0,r5,r1,LSL #2
        MOV      r1,r7
        BL       flash_convert_start_address
        MOV      r4,r0
        CBZ      r4,|L12.64|
        MOV      r0,r4
        B        |L12.30|
|L12.64|
        LDRB     r1,[sp,#0]
        ADD      r2,r1,r1,LSL #3
        ADD      r1,r2,r1,LSL #4
        ADD      r0,r5,r1,LSL #2
        MOV      r3,r6
        MOV      r2,r8
        MOV      r1,r7
        BL       FTFx_CMD_ProgramSection
        B        |L12.30|
        ENDP


        AREA ||i.FLASH_ReadOnce||, CODE, READONLY, ALIGN=1

FLASH_ReadOnce PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r7,r3
        MOV      r3,r7
        MOV      r2,r6
        MOV      r1,r5
        MOV      r0,r4
        BL       FTFx_CMD_ReadOnce
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.FLASH_ReadResource||, CODE, READONLY, ALIGN=1

FLASH_ReadResource PROC
        PUSH     {r3-r9,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r6,r2
        MOV      r7,r3
        LDR      r8,[sp,#0x20]
        MOV      r3,r7
        MOV      r2,r6
        MOV      r1,r5
        MOV      r0,r4
        STR      r8,[sp,#0]
        BL       FTFx_CMD_ReadResource
        POP      {r3-r9,pc}
        ENDP


        AREA ||i.FLASH_SecurityBypass||, CODE, READONLY, ALIGN=1

FLASH_SecurityBypass PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r1,r5
        MOV      r0,r4
        BL       FTFx_CMD_SecurityBypass
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.FLASH_Swap||, CODE, READONLY, ALIGN=2

FLASH_Swap PROC
        PUSH     {r2-r8,lr}
        MOV      r7,r0
        MOV      r8,r1
        MOV      r6,r2
        MOV      r3,sp
        MOVS     r2,#1
        MOV      r1,r8
        MOV      r0,r7
        BL       flash_check_range_to_get_index
        MOV      r4,r0
        CBZ      r4,|L16.32|
        MOV      r0,r4
|L16.28|
        POP      {r2-r8,pc}
|L16.32|
        LDRB     r0,[sp,#0]
        ADD      r1,r0,r0,LSL #3
        ADD      r0,r1,r0,LSL #4
        ADD      r5,r7,r0,LSL #2
        MOVS     r2,#0xff
        MOVS     r1,#3
        ADD      r0,sp,#4
        BL       __aeabi_memset
        NOP      
|L16.60|
        ADD      r3,sp,#4
        MOVS     r2,#8
        MOV      r1,r8
        MOV      r0,r5
        BL       FTFx_CMD_SwapControl
        MOV      r4,r0
        CBZ      r4,|L16.80|
        MOV      r0,r4
        B        |L16.28|
|L16.80|
        CBNZ     r6,|L16.120|
        LDRB     r0,[sp,#4]
        CMP      r0,#5
        BNE      |L16.94|
        MOVS     r0,#0
        B        |L16.28|
|L16.94|
        LDRB     r0,[sp,#4]
        CBNZ     r0,|L16.116|
        ADD      r3,sp,#4
        MOVS     r2,#0x10
        MOV      r1,r8
        MOV      r0,r5
        BL       FTFx_CMD_SwapControl
        MOV      r4,r0
        B        |L16.232|
|L16.116|
        MOVS     r0,#0x74
        B        |L16.28|
|L16.120|
        LDRB     r0,[sp,#4]
        CMP      r0,#6
        BCS      |L16.226|
        TBB      [pc,r0]
        DCB      0x03,0x0b,0x19,0x24
        DCB      0x2c,0x2d
        ADD      r3,sp,#4
        MOVS     r2,#1
        MOV      r1,r8
        MOV      r0,r5
        BL       FTFx_CMD_SwapControl
        MOV      r4,r0
        B        |L16.230|
        MOV      r1,r8
        MOV      r0,r5
        BL       flash_validate_swap_indicator_address
        MOV      r4,r0
        CBNZ     r4,|L16.180|
        ADD      r3,sp,#4
        MOVS     r2,#2
        MOV      r1,r8
        MOV      r0,r5
        BL       FTFx_CMD_SwapControl
        MOV      r4,r0
|L16.180|
        B        |L16.230|
        MOVS     r0,#0x34
        LDRB     r2,[r0,r5]
        LDR      r0,[r5,#0xc]
        ADD      r1,r8,r0,LSR #1
        LDR      r3,|L16.256|
        MOV      r0,r7
        BL       FLASH_Erase
        MOV      r4,r0
        B        |L16.230|
        ADD      r3,sp,#4
        MOVS     r2,#4
        MOV      r1,r8
        MOV      r0,r5
        BL       FTFx_CMD_SwapControl
        MOV      r4,r0
        B        |L16.230|
        B        |L16.230|
        MOVS     r4,#0x74
        B        |L16.230|
|L16.226|
        MOVS     r4,#4
        NOP      
|L16.230|
        NOP      
|L16.232|
        CBZ      r4,|L16.236|
        B        |L16.248|
|L16.236|
        LDRB     r0,[sp,#4]
        CMP      r0,#4
        BNE      |L16.60|
        CMP      r6,#0
        BEQ      |L16.60|
|L16.248|
        NOP      
        MOV      r0,r4
        B        |L16.28|
        ENDP

        DCW      0x0000
|L16.256|
        DCD      0x6b65666b

        AREA ||i.FLASH_VerifyErase||, CODE, READONLY, ALIGN=1

FLASH_VerifyErase PROC
        PUSH     {r3-r9,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r7,r2
        MOV      r8,r3
        MOV      r3,sp
        MOV      r2,r7
        MOV      r1,r6
        MOV      r0,r5
        BL       flash_check_range_to_get_index
        MOV      r4,r0
        CBZ      r4,|L17.34|
        MOV      r0,r4
|L17.30|
        POP      {r3-r9,pc}
|L17.34|
        LDRB     r1,[sp,#0]
        ADD      r2,r1,r1,LSL #3
        ADD      r1,r2,r1,LSL #4
        ADD      r0,r5,r1,LSL #2
        MOV      r1,r6
        BL       flash_convert_start_address
        MOV      r4,r0
        CBZ      r4,|L17.64|
        MOV      r0,r4
        B        |L17.30|
|L17.64|
        LDRB     r1,[sp,#0]
        ADD      r2,r1,r1,LSL #3
        ADD      r1,r2,r1,LSL #4
        ADD      r0,r5,r1,LSL #2
        MOV      r3,r8
        MOV      r2,r7
        MOV      r1,r6
        BL       FTFx_CMD_VerifyErase
        B        |L17.30|
        ENDP


        AREA ||i.FLASH_VerifyEraseAll||, CODE, READONLY, ALIGN=1

FLASH_VerifyEraseAll PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        MOV      r1,r5
        MOV      r0,r4
        BL       FTFx_CMD_VerifyEraseAll
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.FLASH_VerifyProgram||, CODE, READONLY, ALIGN=1

FLASH_VerifyProgram PROC
        PUSH     {r0-r12,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOV      r7,r2
        MOV      r8,r3
        LDRD     r10,r11,[sp,#0x3c]
        LDR      r9,[sp,#0x38]
        ADD      r3,sp,#0xc
        MOV      r2,r7
        MOV      r1,r6
        MOV      r0,r5
        BL       flash_check_range_to_get_index
        MOV      r4,r0
        CBZ      r4,|L19.44|
        MOV      r0,r4
|L19.38|
        ADD      sp,sp,#0x10
        POP      {r4-r12,pc}
|L19.44|
        LDRB     r1,[sp,#0xc]
        ADD      r2,r1,r1,LSL #3
        ADD      r1,r2,r1,LSL #4
        ADD      r0,r5,r1,LSL #2
        MOV      r1,r6
        BL       flash_convert_start_address
        MOV      r4,r0
        CBZ      r4,|L19.74|
        MOV      r0,r4
        B        |L19.38|
|L19.74|
        STM      sp,{r9-r11}
        LDRB     r1,[sp,#0xc]
        ADD      r2,r1,r1,LSL #3
        ADD      r1,r2,r1,LSL #4
        ADD      r0,r5,r1,LSL #2
        MOV      r3,r8
        MOV      r2,r7
        MOV      r1,r6
        BL       FTFx_CMD_VerifyProgram
        B        |L19.38|
        ENDP


        AREA ||i.flash_calculate_mem_size||, CODE, READONLY, ALIGN=2

flash_calculate_mem_size PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        LDR      r6,|L20.36|
        LDR      r6,[r6,#0x4c]
        ANDS     r6,r6,r2
        LSRS     r6,r6,r3
        UXTB     r5,r6
        CMP      r5,#0xf
        BNE      |L20.24|
        MUL      r0,r4,r1
        B        |L20.32|
|L20.24|
        LDR      r6,|L20.40|
        LDRH     r6,[r6,r5,LSL #1]
        LSLS     r0,r6,#10
|L20.32|
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L20.36|
        DCD      0x40048000
|L20.40|
        DCD      kPFlashDensities

        AREA ||i.flash_calculate_prot_segment_size||, CODE, READONLY, ALIGN=1

flash_calculate_prot_segment_size PROC
        MOV      r2,r0
        CMP      r2,r1,LSL #10
        BLS      |L21.14|
        UDIV     r0,r2,r1
        B        |L21.18|
|L21.14|
        MOV      r0,#0x400
|L21.18|
        BX       lr
        ENDP


        AREA ||i.flash_check_range_to_get_index||, CODE, READONLY, ALIGN=1

flash_check_range_to_get_index PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBNZ     r4,|L22.12|
        MOVS     r0,#4
|L22.10|
        POP      {r4-r6,pc}
|L22.12|
        MOVS     r1,#0
        B        |L22.94|
|L22.16|
        ADD      r0,r1,r1,LSL #3
        ADD      r0,r0,r1,LSL #4
        ADD      r0,r4,r0,LSL #2
        LDR      r0,[r0,#8]
        CMP      r0,r5
        BHI      |L22.90|
        ADD      r0,r1,r1,LSL #3
        ADD      r0,r0,r1,LSL #4
        ADD      r0,r4,r0,LSL #2
        LDR      r0,[r0,#8]
        ADD      r6,r1,r1,LSL #3
        ADD      r6,r6,r1,LSL #4
        ADD      r6,r4,r6,LSL #2
        LDR      r6,[r6,#0xc]
        ADD      r0,r0,r6
        ADDS     r6,r5,r2
        CMP      r0,r6
        BCC      |L22.90|
        ADD      r0,r1,r1,LSL #3
        ADD      r0,r0,r1,LSL #4
        ADD      r0,r4,r0,LSL #2
        LDRB     r0,[r0,#1]
        STRB     r0,[r3,#0]
        MOVS     r0,#0
        B        |L22.10|
|L22.90|
        ADDS     r0,r1,#1
        UXTB     r1,r0
|L22.94|
        CMP      r1,#0
        BEQ      |L22.16|
        MOVS     r0,#0x66
        B        |L22.10|
        ENDP


        AREA ||i.flash_convert_start_address||, CODE, READONLY, ALIGN=1

flash_convert_start_address PROC
        MOV      r2,r0
        CBNZ     r2,|L23.8|
        MOVS     r0,#4
|L23.6|
        BX       lr
|L23.8|
        LDRB     r0,[r2,#1]
        CBZ      r0,|L23.32|
        LDRB     r0,[r2,#4]
        AND      r0,r0,#1
        CBZ      r0,|L23.32|
        LDR      r0,[r2,#8]
        SUBS     r0,r1,r0
        ADD      r0,r0,#0x800000
        STR      r0,[r2,#0x30]
        B        |L23.34|
|L23.32|
        STR      r1,[r2,#0x30]
|L23.34|
        MOVS     r0,#0
        B        |L23.6|
        ENDP


        AREA ||i.flash_init_features||, CODE, READONLY, ALIGN=1

flash_init_features PROC
        LDRB     r1,[r0,#1]
        CBNZ     r1,|L24.44|
        LDR      r1,[r0,#4]
        BIC      r1,r1,#1
        ADDS     r1,r1,#1
        STR      r1,[r0,#4]
        LDR      r1,[r0,#4]
        BIC      r1,r1,#2
        ADDS     r1,r1,#2
        STR      r1,[r0,#4]
        LDR      r1,[r0,#4]
        BIC      r1,r1,#8
        ADDS     r1,r1,#8
        STR      r1,[r0,#4]
        LDR      r1,[r0,#4]
        BIC      r1,r1,#0x20
        ADDS     r1,r1,#0x20
        STR      r1,[r0,#4]
|L24.44|
        LDR      r1,[r0,#4]
        BIC      r1,r1,#4
        ADDS     r1,r1,#4
        STR      r1,[r0,#4]
        LDR      r1,[r0,#4]
        BIC      r1,r1,#0x10
        ADDS     r1,r1,#0x10
        STR      r1,[r0,#4]
        BX       lr
        ENDP


        AREA ||i.flash_validate_swap_indicator_address||, CODE, READONLY, ALIGN=1

flash_validate_swap_indicator_address PROC
        PUSH     {r4-r7,lr}
        SUB      sp,sp,#0x14
        MOV      r4,r0
        MOV      r5,r1
        MOVS     r0,#0
        STR      r0,[sp,#0]
        MOVS     r3,#0x10
        ADD      r2,sp,#4
        MOV      r0,r4
        LDR      r1,[r4,#0x5c]
        BL       FTFx_CMD_ReadResource
        MOV      r6,r0
        CBZ      r6,|L25.34|
        MOV      r0,r6
|L25.30|
        ADD      sp,sp,#0x14
        POP      {r4-r7,pc}
|L25.34|
        LDRH     r1,[sp,#4]
        LDRB     r0,[r4,#0x38]
        MUL      r7,r1,r0
        CMP      r5,r7
        BEQ      |L25.54|
        MOVS     r0,#0x75
        B        |L25.30|
|L25.54|
        MOV      r0,r6
        B        |L25.30|
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.constdata||, DATA, READONLY, ALIGN=1

kPFlashDensities
        DCW      0x0008,0x0010
        DCW      0x0018,0x0020
        DCW      0x0030,0x0040
        DCW      0x0060,0x0080
        DCW      0x00c0,0x0100
        DCW      0x0180,0x0200
        DCW      0x0300,0x0400
        DCW      0x0600

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_ftfx_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_fsl_ftfx_flash_c_a1c89a96____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___16_fsl_ftfx_flash_c_a1c89a96____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_fsl_ftfx_flash_c_a1c89a96____REVSH|
#line 483
|__asm___16_fsl_ftfx_flash_c_a1c89a96____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_fsl_ftfx_flash_c_a1c89a96____RRX|
#line 670
|__asm___16_fsl_ftfx_flash_c_a1c89a96____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT FLASH_Erase [CODE]
        EXPORT FLASH_EraseAll [CODE]
        EXPORT FLASH_GetProperty [CODE]
        EXPORT FLASH_GetSecurityState [CODE]
        EXPORT FLASH_Init [CODE]
        EXPORT FLASH_IsExecuteOnly [CODE]
        EXPORT FLASH_IsProtected [CODE]
        EXPORT FLASH_PflashGetProtection [CODE]
        EXPORT FLASH_PflashSetProtection [CODE]
        EXPORT FLASH_Program [CODE]
        EXPORT FLASH_ProgramOnce [CODE]
        EXPORT FLASH_ProgramSection [CODE]
        EXPORT FLASH_ReadOnce [CODE]
        EXPORT FLASH_ReadResource [CODE]
        EXPORT FLASH_SecurityBypass [CODE]
        EXPORT FLASH_Swap [CODE]
        EXPORT FLASH_VerifyErase [CODE]
        EXPORT FLASH_VerifyEraseAll [CODE]
        EXPORT FLASH_VerifyProgram [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT FTFx_API_Init [CODE]
        IMPORT FTFx_CMD_Erase [CODE]
        IMPORT FTFx_CMD_EraseAll [CODE]
        IMPORT FTFx_CMD_Program [CODE]
        IMPORT FTFx_CMD_ReadOnce [CODE]
        IMPORT FTFx_CMD_ProgramSection [CODE]
        IMPORT FTFx_CMD_ReadResource [CODE]
        IMPORT FTFx_CMD_VerifyErase [CODE]
        IMPORT FTFx_CMD_VerifyEraseAll [CODE]
        IMPORT FTFx_CMD_VerifyProgram [CODE]
        IMPORT FTFx_REG_GetSecurityState [CODE]
        IMPORT FTFx_CMD_SecurityBypass [CODE]
        IMPORT __aeabi_memset [CODE]
        IMPORT FTFx_CMD_SwapControl [CODE]

        KEEP flash_calculate_mem_size
        KEEP flash_calculate_prot_segment_size
        KEEP flash_check_range_to_get_index
        KEEP flash_convert_start_address
        KEEP flash_init_features
        KEEP flash_validate_swap_indicator_address
        KEEP kPFlashDensities

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
