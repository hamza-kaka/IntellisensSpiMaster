; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --split_sections --debug -c --asm --gnu -o.\objects\fsl_rtc.o --depend=.\objects\fsl_rtc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I.\board -I..\..\CMSIS\Include -I..\..\devices\MK66F18 -I..\..\devices\MK66F18\drivers -I..\..\devices\MK66F18\arm -I..\..\devices\MK66F18\utilities -I..\..\devices\MK66F18\utilities\str -I..\..\devices\MK66F18\utilities\debug_console -I..\..\TestingFiles -I..\..\SpiCommunication -I..\..\I2Commands -I..\..\HelpingModules -I..\k66 -I..\..\components\serial_manager -I..\..\spiApp -I..\..\application -I.\RTE\_Target_1 -I"C:\Users\Taraz Tech1\AppData\Local\Arm\Packs\Keil\Kinetis_K60_DFP\1.5.0\Device\Include" -IC:\Keil_v5\ARM\CMSIS\Include -D__UVISION_VERSION=528 -DMK66FN2M0xxx18 -DCPU_MK66FN2M0VLQ18 --omf_browse=.\objects\fsl_rtc.crf ..\..\devices\MK66F18\drivers\fsl_rtc.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.RTC_CheckDatetimeFormat||, CODE, READONLY, ALIGN=2

RTC_CheckDatetimeFormat PROC
        PUSH     {r0-r4,lr}
        MOV      r4,r0
        CBZ      r4,|L1.8|
        B        |L1.18|
|L1.8|
        MOVS     r2,#0x3d
        ADR      r1,|L1.148|
        ADR      r0,|L1.188|
        BL       __aeabi_assert
|L1.18|
        ADR      r3,|L1.208|
        LDM      r3,{r0-r3}
        STM      sp,{r0-r3}
        LDRH     r0,[r4,#0]
        MOV      r1,#0x7b2
        CMP      r0,r1
        BCC      |L1.74|
        LDRH     r0,[r4,#0]
        MOV      r1,#0x833
        CMP      r0,r1
        BHI      |L1.74|
        LDRB     r0,[r4,#2]
        CMP      r0,#0xc
        BHI      |L1.74|
        LDRB     r0,[r4,#2]
        CBZ      r0,|L1.74|
        LDRB     r0,[r4,#4]
        CMP      r0,#0x18
        BCS      |L1.74|
        LDRB     r0,[r4,#5]
        CMP      r0,#0x3c
        BCS      |L1.74|
        LDRB     r0,[r4,#6]
        CMP      r0,#0x3c
        BCC      |L1.80|
|L1.74|
        MOVS     r0,#0
|L1.76|
        ADD      sp,sp,#0x10
        POP      {r4,pc}
|L1.80|
        LDRB     r0,[r4,#0]
        AND      r0,r0,#3
        CBNZ     r0,|L1.102|
        LDRH     r0,[r4,#0]
        MOVS     r1,#0x64
        UDIV     r2,r0,r1
        MLS      r0,r1,r2,r0
        CBNZ     r0,|L1.118|
|L1.102|
        LDRH     r0,[r4,#0]
        MOV      r1,#0x190
        UDIV     r2,r0,r1
        MLS      r0,r1,r2,r0
        CBNZ     r0,|L1.124|
|L1.118|
        MOVS     r0,#0x1d
        STRB     r0,[sp,#2]
|L1.124|
        LDRB     r0,[r4,#3]
        LDRB     r1,[r4,#2]
        LDRB     r1,[sp,r1]
        CMP      r0,r1
        BGT      |L1.140|
        LDRB     r0,[r4,#3]
        CBNZ     r0,|L1.144|
|L1.140|
        MOVS     r0,#0
        B        |L1.76|
|L1.144|
        MOVS     r0,#1
        B        |L1.76|
        ENDP

|L1.148|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c",0
|L1.188|
        DCB      "NULL != datetime",0
        DCB      0
        DCB      0
        DCB      0
|L1.208|
        DCB      0
        DCB      31,28,31,30,31,30,31,31,30,31,30,31,0
        DCB      0
        DCB      0

        AREA ||i.RTC_ClearStatusFlags||, CODE, READONLY, ALIGN=1

RTC_ClearStatusFlags PROC
        AND      r2,r1,#4
        CMP      r2,#4
        BNE      |L2.12|
        MOVS     r2,#0
        STR      r2,[r0,#8]
|L2.12|
        AND      r2,r1,#2
        CMP      r2,#2
        BNE      |L2.24|
        MOVS     r2,#1
        STR      r2,[r0,#0]
|L2.24|
        AND      r2,r1,#1
        CBZ      r2,|L2.34|
        MOVS     r2,#1
        STR      r2,[r0,#0]
|L2.34|
        BX       lr
        ENDP


        AREA ||i.RTC_ConvertDatetimeToSeconds||, CODE, READONLY, ALIGN=2

RTC_ConvertDatetimeToSeconds PROC
        PUSH     {r4,r5,lr}
        SUB      sp,sp,#0x1c
        MOV      r4,r0
        CBZ      r4,|L3.10|
        B        |L3.20|
|L3.10|
        MOVS     r2,#0x5d
        ADR      r1,|L3.124|
        ADR      r0,|L3.164|
        BL       __aeabi_assert
|L3.20|
        MOVS     r2,#0x1c
        LDR      r1,|L3.184|
        MOV      r0,sp
        BL       __aeabi_memcpy4
        LDRH     r0,[r4,#0]
        SUB      r0,r0,#0x7b2
        MOV      r1,#0x16d
        MUL      r5,r0,r1
        LDRH     r0,[r4,#0]
        MOV      r1,#0x1ec
        RSB      r0,r1,r0,LSR #2
        ADD      r5,r5,r0
        LDRB     r0,[r4,#2]
        LDRH     r0,[sp,r0,LSL #1]
        ADD      r5,r5,r0
        LDRB     r0,[r4,#3]
        SUBS     r0,r0,#1
        ADD      r5,r5,r0
        LDRB     r0,[r4,#0]
        AND      r0,r0,#3
        CBNZ     r0,|L3.86|
        LDRB     r0,[r4,#2]
        CMP      r0,#2
        BHI      |L3.86|
        SUBS     r5,r5,#1
|L3.86|
        LDR      r0,|L3.188|
        MULS     r0,r5,r0
        LDRB     r1,[r4,#4]
        RSB      r2,r1,r1,LSL #5
        RSB      r1,r2,r1,LSL #8
        ADD      r0,r0,r1,LSL #4
        LDRB     r1,[r4,#5]
        RSB      r1,r1,r1,LSL #4
        ADD      r0,r0,r1,LSL #2
        LDRB     r1,[r4,#6]
        ADDS     r5,r0,r1
        MOV      r0,r5
        ADD      sp,sp,#0x1c
        POP      {r4,r5,pc}
        ENDP

|L3.124|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c",0
|L3.164|
        DCB      "NULL != datetime",0
        DCB      0
        DCB      0
        DCB      0
|L3.184|
        DCD      ||.constdata||
|L3.188|
        DCD      0x00015180

        AREA ||i.RTC_ConvertSecondsToDatetime||, CODE, READONLY, ALIGN=2

RTC_ConvertSecondsToDatetime PROC
        PUSH     {r0-r10,lr}
        MOV      r8,r0
        MOV      r4,r1
        CBZ      r4,|L4.12|
        B        |L4.22|
|L4.12|
        MOVS     r2,#0x7b
        ADR      r1,|L4.188|
        ADR      r0,|L4.228|
        BL       __aeabi_assert
|L4.22|
        ADR      r3,|L4.248|
        LDM      r3,{r0-r3}
        STM      sp,{r0-r3}
        MOV      r6,r8
        LDR      r0,|L4.264|
        UDIV     r0,r6,r0
        ADDS     r7,r0,#1
        LDR      r0,|L4.264|
        UDIV     r1,r6,r0
        MLS      r6,r0,r1,r6
        MOV      r0,#0xe10
        UDIV     r0,r6,r0
        STRB     r0,[r4,#4]
        MOV      r0,#0xe10
        UDIV     r1,r6,r0
        MLS      r6,r0,r1,r6
        MOVS     r0,#0x3c
        UDIV     r0,r6,r0
        STRB     r0,[r4,#5]
        MOVS     r0,#0x3c
        UDIV     r1,r6,r0
        MLS      r0,r0,r1,r6
        STRB     r0,[r4,#6]
        MOV      r9,#0x16d
        MOV      r0,#0x7b2
        STRH     r0,[r4,#0]
        B        |L4.132|
|L4.104|
        SUB      r7,r7,r9
        LDRH     r0,[r4,#0]
        ADDS     r0,r0,#1
        STRH     r0,[r4,#0]
        LDRB     r0,[r4,#0]
        AND      r0,r0,#3
        CBZ      r0,|L4.128|
        MOV      r9,#0x16d
        B        |L4.132|
|L4.128|
        MOV      r9,#0x16e
|L4.132|
        CMP      r7,r9
        BHI      |L4.104|
        LDRB     r0,[r4,#0]
        AND      r0,r0,#3
        CBNZ     r0,|L4.150|
        MOVS     r0,#0x1d
        STRB     r0,[sp,#2]
|L4.150|
        MOVS     r5,#1
        B        |L4.174|
|L4.154|
        LDRB     r0,[sp,r5]
        CMP      r0,r7
        BCC      |L4.166|
        STRB     r5,[r4,#2]
        B        |L4.178|
|L4.166|
        LDRB     r0,[sp,r5]
        SUBS     r7,r7,r0
        ADDS     r5,r5,#1
|L4.174|
        CMP      r5,#0xc
        BLS      |L4.154|
|L4.178|
        NOP      
        STRB     r7,[r4,#3]
        POP      {r0-r10,pc}
        ENDP

        DCW      0x0000
|L4.188|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c",0
|L4.228|
        DCB      "NULL != datetime",0
        DCB      0
        DCB      0
        DCB      0
|L4.248|
        DCB      0
        DCB      31,28,31,30,31,30,31,31,30,31,30,31,0
        DCB      0
        DCB      0
|L4.264|
        DCD      0x00015180

        AREA ||i.RTC_DisableInterrupts||, CODE, READONLY, ALIGN=1

RTC_DisableInterrupts PROC
        MOV      r2,r0
        MOVS     r0,#0
        AND      r3,r1,#1
        CBZ      r3,|L5.14|
        ORR      r0,r0,#1
|L5.14|
        AND      r3,r1,#2
        CMP      r3,#2
        BNE      |L5.26|
        ORR      r0,r0,#2
|L5.26|
        AND      r3,r1,#4
        CMP      r3,#4
        BNE      |L5.38|
        ORR      r0,r0,#4
|L5.38|
        AND      r3,r1,#8
        CMP      r3,#8
        BNE      |L5.50|
        ORR      r0,r0,#0x10
|L5.50|
        AND      r3,r1,#0x10
        CMP      r3,#0x10
        BNE      |L5.62|
        ORR      r0,r0,#8
|L5.62|
        LDR      r3,[r2,#0x1c]
        BICS     r3,r3,r0
        STR      r3,[r2,#0x1c]
        BX       lr
        ENDP


        AREA ||i.RTC_EnableInterrupts||, CODE, READONLY, ALIGN=1

RTC_EnableInterrupts PROC
        MOV      r2,r0
        MOVS     r0,#0
        AND      r3,r1,#1
        CBZ      r3,|L6.14|
        ORR      r0,r0,#1
|L6.14|
        AND      r3,r1,#2
        CMP      r3,#2
        BNE      |L6.26|
        ORR      r0,r0,#2
|L6.26|
        AND      r3,r1,#4
        CMP      r3,#4
        BNE      |L6.38|
        ORR      r0,r0,#4
|L6.38|
        AND      r3,r1,#8
        CMP      r3,#8
        BNE      |L6.50|
        ORR      r0,r0,#0x10
|L6.50|
        AND      r3,r1,#0x10
        CMP      r3,#0x10
        BNE      |L6.62|
        ORR      r0,r0,#8
|L6.62|
        LDR      r3,[r2,#0x1c]
        ORRS     r3,r3,r0
        STR      r3,[r2,#0x1c]
        BX       lr
        ENDP


        AREA ||i.RTC_GetAlarm||, CODE, READONLY, ALIGN=2

RTC_GetAlarm PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBZ      r5,|L7.10|
        B        |L7.22|
|L7.10|
        MOV      r2,#0x175
        ADR      r1,|L7.36|
        ADR      r0,|L7.76|
        BL       __aeabi_assert
|L7.22|
        MOVS     r6,#0
        LDR      r6,[r4,#8]
        MOV      r1,r5
        MOV      r0,r6
        BL       RTC_ConvertSecondsToDatetime
        POP      {r4-r6,pc}
        ENDP

|L7.36|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c",0
|L7.76|
        DCB      "NULL != datetime",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.RTC_GetDatetime||, CODE, READONLY, ALIGN=2

RTC_GetDatetime PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBZ      r5,|L8.10|
        B        |L8.22|
|L8.10|
        MOV      r2,#0x13a
        ADR      r1,|L8.36|
        ADR      r0,|L8.76|
        BL       __aeabi_assert
|L8.22|
        MOVS     r6,#0
        LDR      r6,[r4,#0]
        MOV      r1,r5
        MOV      r0,r6
        BL       RTC_ConvertSecondsToDatetime
        POP      {r4-r6,pc}
        ENDP

|L8.36|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c",0
|L8.76|
        DCB      "NULL != datetime",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.RTC_GetDefaultConfig||, CODE, READONLY, ALIGN=2

RTC_GetDefaultConfig PROC
        PUSH     {r4,lr}
        MOV      r4,r0
        CBZ      r4,|L9.8|
        B        |L9.20|
|L9.8|
        MOV      r2,#0x105
        ADR      r1,|L9.40|
        ADR      r0,|L9.80|
        BL       __aeabi_assert
|L9.20|
        MOVS     r0,#0
        STR      r0,[r4,#0]
        STR      r0,[r4,#4]
        STR      r0,[r4,#8]
        STRB     r0,[r4,#0]
        STRB     r0,[r4,#1]
        STRB     r0,[r4,#2]
        STR      r0,[r4,#4]
        STR      r0,[r4,#8]
        POP      {r4,pc}
        ENDP

|L9.40|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c",0
|L9.80|
        DCB      "NULL != config",0
        DCB      0

        AREA ||i.RTC_GetEnabledInterrupts||, CODE, READONLY, ALIGN=1

RTC_GetEnabledInterrupts PROC
        MOV      r1,r0
        MOVS     r0,#0
        LDR      r2,[r1,#0x1c]
        AND      r2,r2,#1
        CBZ      r2,|L10.16|
        ORR      r0,r0,#1
|L10.16|
        LDR      r2,[r1,#0x1c]
        AND      r2,r2,#2
        CMP      r2,#2
        BNE      |L10.30|
        ORR      r0,r0,#2
|L10.30|
        LDR      r2,[r1,#0x1c]
        AND      r2,r2,#4
        CMP      r2,#4
        BNE      |L10.44|
        ORR      r0,r0,#4
|L10.44|
        LDR      r2,[r1,#0x1c]
        AND      r2,r2,#0x10
        CMP      r2,#0x10
        BNE      |L10.58|
        ORR      r0,r0,#8
|L10.58|
        LDR      r2,[r1,#0x1c]
        AND      r2,r2,#8
        CMP      r2,#8
        BNE      |L10.72|
        ORR      r0,r0,#0x10
|L10.72|
        BX       lr
        ENDP


        AREA ||i.RTC_GetMonotonicCounter||, CODE, READONLY, ALIGN=2

RTC_GetMonotonicCounter PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBZ      r5,|L11.10|
        B        |L11.22|
|L11.10|
        MOV      r2,#0x2e4
        ADR      r1,|L11.40|
        ADR      r0,|L11.80|
        BL       __aeabi_assert
|L11.22|
        LDR      r0,[r4,#0x2c]
        MOVS     r1,#0
        LDR      r2,[r4,#0x28]
        MOV      r3,r1
        ORRS     r1,r1,r2
        ORRS     r0,r0,r3
        STRD     r1,r0,[r5,#0]
        POP      {r4-r6,pc}
        ENDP

|L11.40|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c",0
|L11.80|
        DCB      "NULL != counter",0

        AREA ||i.RTC_GetStatusFlags||, CODE, READONLY, ALIGN=1

RTC_GetStatusFlags PROC
        MOV      r1,r0
        MOVS     r0,#0
        LDR      r2,[r1,#0x14]
        AND      r2,r2,#1
        CBZ      r2,|L12.16|
        ORR      r0,r0,#1
|L12.16|
        LDR      r2,[r1,#0x14]
        AND      r2,r2,#2
        CMP      r2,#2
        BNE      |L12.30|
        ORR      r0,r0,#2
|L12.30|
        LDR      r2,[r1,#0x14]
        AND      r2,r2,#4
        CMP      r2,#4
        BNE      |L12.44|
        ORR      r0,r0,#4
|L12.44|
        LDR      r2,[r1,#0x14]
        AND      r2,r2,#8
        CMP      r2,#8
        BNE      |L12.58|
        ORR      r0,r0,#8
|L12.58|
        BX       lr
        ENDP


        AREA ||i.RTC_IncrementMonotonicCounter||, CODE, READONLY, ALIGN=1

RTC_IncrementMonotonicCounter PROC
        MOV      r1,r0
        LDR      r0,[r1,#0x14]
        AND      r0,r0,#9
        CBZ      r0,|L13.14|
        MOVS     r0,#1
|L13.12|
        BX       lr
|L13.14|
        LDR      r0,[r1,#0x24]
        ORR      r0,r0,#0x10
        STR      r0,[r1,#0x24]
        MOVS     r0,#1
        STR      r0,[r1,#0x28]
        MOVS     r0,#0
        B        |L13.12|
        ENDP


        AREA ||i.RTC_Init||, CODE, READONLY, ALIGN=2

RTC_Init PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r0
        MOV      r4,r1
        CBZ      r4,|L14.10|
        B        |L14.20|
|L14.10|
        MOVS     r2,#0xcc
        ADR      r1,|L14.144|
        ADR      r0,|L14.184|
        BL       __aeabi_assert
|L14.20|
        LDR      r0,|L14.200|
        LDR      r2,|L14.204|
        ADD      r1,r2,r0,LSR #16
        LDR      r2,[r1,#0]
        MOVS     r3,#1
        LSLS     r3,r3,r0
        ORRS     r2,r2,r3
        STR      r2,[r1,#0]
        NOP      
        LDR      r0,|L14.208|
        BL       RTC_GetStatusFlags
        AND      r0,r0,#1
        CBZ      r0,|L14.84|
        NOP      
        LDR      r0,|L14.208|
        LDR      r0,[r0,#0x10]
        ORR      r0,r0,#1
        LDR      r1,|L14.208|
        STR      r0,[r1,#0x10]
        MOV      r0,r1
        LDR      r0,[r0,#0x10]
        BIC      r0,r0,#1
        STR      r0,[r1,#0x10]
        MOVS     r0,#1
        STR      r0,[r1,#0]
        NOP      
        NOP      
|L14.84|
        LDR      r5,[r6,#0x10]
        BIC      r5,r5,#0xc
        LDRB     r0,[r4,#1]
        MOVS     r1,#8
        AND      r0,r1,r0,LSL #3
        LDRB     r1,[r4,#2]
        MOVS     r2,#4
        AND      r1,r2,r1,LSL #2
        ORRS     r0,r0,r1
        ORRS     r5,r5,r0
        BIC      r5,r5,#0x10
        LDRB     r0,[r4,#0]
        MOVS     r1,#0x10
        AND      r0,r1,r0,LSL #4
        ORRS     r5,r5,r0
        STR      r5,[r6,#0x10]
        MOV      r1,#0xff00
        LDR      r0,[r4,#4]
        AND      r0,r1,r0,LSL #8
        LDRB     r1,[r4,#8]
        ORRS     r0,r0,r1
        STR      r0,[r6,#0xc]
        POP      {r4-r6,pc}
        ENDP

|L14.144|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c",0
|L14.184|
        DCB      "NULL != config",0
        DCB      0
|L14.200|
        DCD      0x103c001d
|L14.204|
        DCD      0x40047000
|L14.208|
        DCD      0x4003d000

        AREA ||i.RTC_SetAlarm||, CODE, READONLY, ALIGN=2

RTC_SetAlarm PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        MOV      r5,r1
        CBZ      r5,|L15.12|
        B        |L15.24|
|L15.12|
        MOV      r2,#0x151
        ADR      r1,|L15.68|
        ADR      r0,|L15.108|
        BL       __aeabi_assert
|L15.24|
        MOVS     r6,#0
        MOVS     r7,#0
        MOV      r0,r5
        BL       RTC_CheckDatetimeFormat
        CBNZ     r0,|L15.42|
        MOVS     r0,#4
|L15.38|
        POP      {r4-r8,pc}
|L15.42|
        MOV      r0,r5
        BL       RTC_ConvertDatetimeToSeconds
        MOV      r6,r0
        LDR      r7,[r4,#0]
        CMP      r6,r7
        BCS      |L15.60|
        MOVS     r0,#1
        B        |L15.38|
|L15.60|
        STR      r6,[r4,#8]
        MOVS     r0,#0
        B        |L15.38|
        ENDP

        DCW      0x0000
|L15.68|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c",0
|L15.108|
        DCB      "NULL != alarmTime",0
        DCB      0
        DCB      0

        AREA ||i.RTC_SetDatetime||, CODE, READONLY, ALIGN=2

RTC_SetDatetime PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r4,r1
        CBZ      r4,|L16.10|
        B        |L16.22|
|L16.10|
        MOV      r2,#0x124
        ADR      r1,|L16.48|
        ADR      r0,|L16.88|
        BL       __aeabi_assert
|L16.22|
        MOV      r0,r4
        BL       RTC_CheckDatetimeFormat
        CBNZ     r0,|L16.34|
        MOVS     r0,#4
|L16.32|
        POP      {r4-r6,pc}
|L16.34|
        MOV      r0,r4
        BL       RTC_ConvertDatetimeToSeconds
        STR      r0,[r5,#0]
        MOVS     r0,#0
        B        |L16.32|
        ENDP

        DCW      0x0000
|L16.48|
        DCB      "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c",0
|L16.88|
        DCB      "NULL != datetime",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.RTC_SetMonotonicCounter||, CODE, READONLY, ALIGN=1

RTC_SetMonotonicCounter PROC
        LDR      r1,[r0,#0x24]
        BIC      r1,r1,#0x10
        STR      r1,[r0,#0x24]
        STR      r3,[r0,#0x2c]
        STR      r2,[r0,#0x28]
        BX       lr
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.constdata||, DATA, READONLY, ALIGN=2

        DCW      0x0000,0x0000
        DCW      0x001f,0x003b
        DCW      0x005a,0x0078
        DCW      0x0097,0x00b5
        DCW      0x00d4,0x00f3
        DCW      0x0111,0x0130
        DCW      0x014e

;*** Start embedded assembler ***

#line 1 "..\\..\\devices\\MK66F18\\drivers\\fsl_rtc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_rtc_c_RTC_Init____REV16|
#line 468 "..\\..\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_fsl_rtc_c_RTC_Init____REV16| PROC
#line 469

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_rtc_c_RTC_Init____REVSH|
#line 483
|__asm___9_fsl_rtc_c_RTC_Init____REVSH| PROC
#line 484

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_fsl_rtc_c_RTC_Init____RRX|
#line 670
|__asm___9_fsl_rtc_c_RTC_Init____RRX| PROC
#line 671

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT RTC_ClearStatusFlags [CODE]
        EXPORT RTC_DisableInterrupts [CODE]
        EXPORT RTC_EnableInterrupts [CODE]
        EXPORT RTC_GetAlarm [CODE]
        EXPORT RTC_GetDatetime [CODE]
        EXPORT RTC_GetDefaultConfig [CODE]
        EXPORT RTC_GetEnabledInterrupts [CODE]
        EXPORT RTC_GetMonotonicCounter [CODE]
        EXPORT RTC_GetStatusFlags [CODE]
        EXPORT RTC_IncrementMonotonicCounter [CODE]
        EXPORT RTC_Init [CODE]
        EXPORT RTC_SetAlarm [CODE]
        EXPORT RTC_SetDatetime [CODE]
        EXPORT RTC_SetMonotonicCounter [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_assert [CODE]
        IMPORT __aeabi_memcpy4 [CODE]

        KEEP RTC_CheckDatetimeFormat
        KEEP RTC_ConvertDatetimeToSeconds
        KEEP RTC_ConvertSecondsToDatetime

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
